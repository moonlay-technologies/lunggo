<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.VisualStudio</name>
    </assembly>
    <members>
        <member name="T:NuGet.VisualStudio.IVsPackageSourceProvider">
            <summary>
            A public API for retrieving the list of NuGet package sources.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageSourceProvider.GetSources(System.Boolean,System.Boolean)">
            <summary>
            Provides the list of package sources.
            </summary>
            <param name="includeUnOfficial">Unofficial sources will be included in the results</param>
            <param name="includeDisabled">Disabled sources will be included in the results</param>
            <returns>Key: source name Value: source URI</returns>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageSourceProvider.SourcesChanged">
            <summary>
            Raised when sources are added, removed, disabled, or modified.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstaller">
            <summary>
            Contains methods to install packages into a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(System.String,EnvDTE.Project,System.String,System.Version,System.Boolean)">
            <summary>
            Installs a single package from the specified package source.
            </summary>
            <param name="source">The package source to install the package from.</param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package id of the package to install.</param>
            <param name="version">The version of the package to install</param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(System.String,EnvDTE.Project,System.String,System.String,System.Boolean)">
            <summary>
            Installs a single package from the specified package source.
            </summary>
            <param name="source">The package source to install the package from.</param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package id of the package to install.</param>
            <param name="version">The version of the package to install</param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackage(NuGet.IPackageRepository,EnvDTE.Project,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Installs a single package from the specified package source.
            </summary>
            <param name="repository">The package repository to install the package from.</param>
            <param name="project">The target project for package installation.</param>
            <param name="packageId">The package id of the package to install.</param>
            <param name="version">The version of the package to install</param>
            <param name="ignoreDependencies">
            A boolean indicating whether or not to ignore the package's dependencies
            during installation.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating if assembly references from the package should be
            skipped.
            </param>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromRegistryRepository(System.String,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that exist on disk in a folder defined in the registry.
            </summary>
            <param name="keyName">
            The registry key name (under NuGet's repository key) that defines the folder on disk
            containing the packages.
            </param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="project">The target project for package installation.</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            <para>
            Dependencies are always ignored.
            </para>
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromRegistryRepository(System.String,System.Boolean,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that exist on disk in a folder defined in the registry.
            </summary>
            <param name="keyName">
            The registry key name (under NuGet's repository key) that defines the folder on disk
            containing the packages.
            </param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="ignoreDependencies">A boolean indicating whether the package's dependencies should be ignored</param>
            <param name="project">The target project for package installation.</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromVSExtensionRepository(System.String,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that are embedded in a Visual Studio Extension Package.
            </summary>
            <param name="extensionId">The Id of the Visual Studio Extension Package.</param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="project">The target project for package installation</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            <para>
            Dependencies are always ignored.
            </para>
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstaller.InstallPackagesFromVSExtensionRepository(System.String,System.Boolean,System.Boolean,System.Boolean,EnvDTE.Project,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Installs one or more packages that are embedded in a Visual Studio Extension Package.
            </summary>
            <param name="extensionId">The Id of the Visual Studio Extension Package.</param>
            <param name="isPreUnzipped">
            A boolean indicating whether the folder contains packages that are
            pre-unzipped.
            </param>
            <param name="skipAssemblyReferences">
            A boolean indicating whether the assembly references from the packages
            should be skipped.
            </param>
            <param name="ignoreDependencies">A boolean indicating whether the package's dependencies should be ignored</param>
            <param name="project">The target project for package installation</param>
            <param name="packageVersions">
            A dictionary of packages/versions to install where the key is the package id
            and the value is the version.
            </param>
            <remarks>
            If any version of the package is already installed, no action will be taken.
            </remarks>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstallerEvents">
            <summary>
            Contains events which are raised when packages are installed or uninstalled from projects and the current
            solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageInstalling">
            <summary>
            Raised when a package is about to be installed into the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageInstalled">
            <summary>
            Raised after a package has been installed into the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageUninstalling">
            <summary>
            Raised when a package is about to be uninstalled from the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageUninstalled">
            <summary>
            Raised after a package has been uninstalled from the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageReferenceAdded">
            <summary>
            Raised after a package has been installed into a project within the current solution.
            </summary>
        </member>
        <member name="E:NuGet.VisualStudio.IVsPackageInstallerEvents.PackageReferenceRemoved">
            <summary>
            Raised after a package has been uninstalled from a project within the current solution.
            </summary>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageInstallerServices">
            <summary>
            Contains methods to query for installed packages within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.GetInstalledPackages">
            <summary>
            Get the list of NuGet packages installed in the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalled(EnvDTE.Project,System.String)">
            <summary>
            Checks if a NuGet package with the specified Id is installed in the specified project.
            </summary>
            <param name="project">The project to check for NuGet package.</param>
            <param name="id">The id of the package to check.</param>
            <returns><c>true</c> if the package is install. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalled(EnvDTE.Project,System.String,NuGet.SemanticVersion)">
            <summary>
            Checks if a NuGet package with the specified Id and version is installed in the specified project.
            </summary>
            <param name="project">The project to check for NuGet package.</param>
            <param name="id">The id of the package to check.</param>
            <param name="version">The version of the package to check.</param>
            <returns><c>true</c> if the package is install. <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.IsPackageInstalledEx(EnvDTE.Project,System.String,System.String)">
            <summary>
            Checks if a NuGet package with the specified Id and version is installed in the specified project.
            </summary>
            <param name="project">The project to check for NuGet package.</param>
            <param name="id">The id of the package to check.</param>
            <param name="versionString">The version of the package to check.</param>
            <returns><c>true</c> if the package is install. <c>false</c> otherwise.</returns>
            <remarks>
            The reason this method is named IsPackageInstalledEx, instead of IsPackageInstalled, is that
            when client project compiles against this assembly, the compiler would attempt to bind against
            the other overload which accepts SemanticVersion and would require client project to reference NuGet.Core.
            </remarks>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageInstallerServices.GetInstalledPackages(EnvDTE.Project)">
            <summary>
            Get the list of NuGet packages installed in the specified project.
            </summary>
            <param name="project">The project to get NuGet packages from.</param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageMetadata">
            <summary>
            Contains information about an installed package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Id">
            <summary>
            Id of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Version">
            <summary>
            Version of the package.
            </summary>
            <remarks>
            Do not use this property because it will require referencing NuGet.Core.dll assembly. Use the VersionString
            property instead.
            </remarks>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Title">
            <summary>
            Title of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Description">
            <summary>
            Description of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.Authors">
            <summary>
            The authors of the package.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.InstallPath">
            <summary>
            The location where the package is installed on disk.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageMetadata.VersionString">
            <summary>
            The version of the package.
            </summary>
            <remarks>
            Use this property instead of the Version property becase with the type string,
            it doesn't require referencing NuGet.Core.dll assembly.
            </remarks>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageRestorer">
            <summary>
            Contains methods to restore packages installed in a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageRestorer.IsUserConsentGranted">
            <summary>
            Returns a value indicating whether the user consent to download NuGet packages
            has been granted.
            </summary>
            <returns>true if the user consent has been granted; otherwise, false.</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageRestorer.RestorePackages(EnvDTE.Project)">
            <summary>
            Restores NuGet packages installed in the given project within the current solution.
            </summary>
            <param name="project">The project whose NuGet packages to restore.</param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageUninstaller">
            <summary>
            Contains methods to uninstall packages from a project within the current solution.
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageUninstaller.UninstallPackage(EnvDTE.Project,System.String,System.Boolean)">
            <summary>
            Uninstall the specified package from a project and specify whether to uninstall its dependency packages
            too.
            </summary>
            <param name="project">The project from which the package is uninstalled.</param>
            <param name="packageId">The package to be uninstalled</param>
            <param name="removeDependencies">
            A boolean to indicate whether the dependency packages should be
            uninstalled too.
            </param>
        </member>
        <member name="T:NuGet.VisualStudio.IVsPackageManagerProvider">
            <summary>
            Interface allowing integration of alternate package manager suggestion for a NuGet package. 
            For example jQuery may appear on Bower and npm,
            it might be more appropriate to install a package from them for certain projects. 
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageManagerProvider.PackageManagerName">
            <summary>
            Localized display package manager name.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageManagerProvider.PackageManagerId">
            <summary>
            Package manager unique id.
            </summary>
        </member>
        <member name="P:NuGet.VisualStudio.IVsPackageManagerProvider.Description">
            <summary>
            The tool tip description for the package
            </summary>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageManagerProvider.CheckForPackageAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Check if a recommendation should be surfaced for an alternate package manager. 
            This code should not rely on slow network calls, and should return rapidly.
            </summary>
            <param name="packageId">Current package id</param>
            <param name="projectName">Unique project name for finding the project through VS dte</param>
            <param name="token">Cancellation Token</param>
            <returns>return true if need to direct to integrated package manager for this package</returns>
        </member>
        <member name="M:NuGet.VisualStudio.IVsPackageManagerProvider.GoToPackage(System.String,System.String)">
            <summary>
            This Action should take the user to the other package manager.
            </summary>
            <param name="packageId">Current package id</param>
            <param name="projectName">Unique project name for finding the project through VS dte</param>
        </member>
    </members>
</doc>
