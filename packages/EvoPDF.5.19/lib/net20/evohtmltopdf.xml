<?xml version="1.0"?>
<doc>
    <assembly>
        <name>evohtmltopdf</name>
    </assembly>
    <members>
        <member name="T:EvoPdf.AddElementResult">
            <summary>
            The result of adding a PDF element to the renderer
            </summary>
        </member>
        <member name="F:EvoPdf.AddElementResult.pageIndex">
            <summary>
            The index of the PDF page where the rendering ends
            </summary>
        </member>
        <member name="F:EvoPdf.AddElementResult.pdfPage">
            <summary>
            The PDF page where the rendering ends
            </summary>
        </member>
        <member name="F:EvoPdf.AddElementResult.pageBounds">
            <summary>
            The bounds inside the end page
            </summary>
        </member>
        <member name="M:EvoPdf.AddElementResult.#ctor">
            <summary>
            Construct a AddElementResult object with no page information
            </summary>
        </member>
        <member name="M:EvoPdf.AddElementResult.#ctor(System.Int32,EvoPdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Constructs an <see cref="T:EvoPdf.AddElementResult"/> object based on the page index and the bounds
            inside the page where the element rendering ended.
            </summary>
            <param name="endPageIndex"></param>
            <param name="endPdfPage"></param>
            <param name="endPageBounds"></param>
        </member>
        <member name="P:EvoPdf.AddElementResult.EndPageIndex">
            <summary>
            The index of the page where the rendering of a page element ended.
            This information is useful for paged output of elements to continue adding new elements after this element
            </summary>
        </member>
        <member name="P:EvoPdf.AddElementResult.EndPdfPage">
            <summary>
            The PDF page where the rendering of a page element ended.
            This information is useful for paged output of elements to continue adding new elements after this element
            </summary>
        </member>
        <member name="P:EvoPdf.AddElementResult.EndPageBounds">
            <summary>
            The bounds inside the page where the rendering of a page element ended.
            This information is useful for paged output of elements to continue adding new elements after this element
            </summary>
        </member>
        <member name="T:EvoPdf.AddTextElementResult">
            <summary>
            The result of adding a text element to the renderer
            </summary>
        </member>
        <member name="M:EvoPdf.AddTextElementResult.#ctor">
            <summary>
            Construct an empty AddTextElementResult object
            </summary>
        </member>
        <member name="M:EvoPdf.AddTextElementResult.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:EvoPdf.AddTextElementResult"/> object with the not rendered text
            </summary>
            <param name="remainingText">The not rendered text</param>
        </member>
        <member name="M:EvoPdf.AddTextElementResult.#ctor(System.String,System.Int32,EvoPdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Constructs a <see cref="T:EvoPdf.AddTextElementResult"/> object with the not rendered text and the page
            where rendering of this text element ended
            </summary>
            <param name="remainingText">The not rendered text</param>
            <param name="endPageIndex">The index of the page where the rendering of text ended</param>
            <param name="endPdfPage">The PDF page where the rendering of text ended</param>
            <param name="endPageBounds">The bounds inside the page where the rendering of the text ended</param>
        </member>
        <member name="P:EvoPdf.AddTextElementResult.RemainingText">
            <summary>
            Gets the text after remained not rendered after the rendering ended. A text can be partially
            rendered if the text cannot fit the specified bounds of the text element.
            </summary>
        </member>
        <member name="T:EvoPdf.AfterRenderPdfPageDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.HtmlToPdfConverter.AfterRenderPdfPageEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.AfterRenderPdfPageParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.HtmlToPdfConverter.AfterRenderPdfPageEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.AfterRenderPdfPageParams.Page">
            <summary>
            The PDF page that was rendered when the event was raised
            </summary>
        </member>
        <member name="P:EvoPdf.AfterRenderPdfPageParams.PageNumber">
            <summary>
            The number in PDF document of the PDF page that was rendered
            </summary>
        </member>
        <member name="P:EvoPdf.AfterRenderPdfPageParams.PageCount">
            <summary>
            The total number of PDF pages to be rendered by the current conversion
            </summary>
        </member>
        <member name="P:EvoPdf.AfterRenderPdfPageParams.RenderedRectangle">
            <summary>
            The rectangle that was rendered in PDF page
            </summary>
        </member>
        <member name="T:EvoPdf.AuthenticationOptions">
            <summary>
            Authentication options for accessing a URL in HTML to PDF converter like Integrated Windows Authentication in IIS. 
            </summary>
        </member>
        <member name="P:EvoPdf.AuthenticationOptions.Username">
            <summary>
            The username of the user used for authentication
            </summary>
        </member>
        <member name="P:EvoPdf.AuthenticationOptions.Password">
            <summary>
            The password of the user used for authentication
            </summary>
        </member>
        <member name="P:EvoPdf.AuthenticationOptions.UseDefaultCredentials">
            <summary>
            A flag indicating if the credentials of the user running the converter are sent when the converter requests the web page from server. 
            If the <see cref="P:EvoPdf.AuthenticationOptions.Username"/> property is set this property will not have any effect. 
            The default value is true
            </summary>
        </member>
        <member name="T:EvoPdf.BeforeRenderPdfPageDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.HtmlToPdfConverter.BeforeRenderPdfPageEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.BeforeRenderPdfPageParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.HtmlToPdfConverter.BeforeRenderPdfPageEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderPdfPageParams.Page">
            <summary>
            The PDF page being rendered when the event is raised
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderPdfPageParams.PageNumber">
            <summary>
            The number in PDF document of the PDF page to be rendered
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderPdfPageParams.PageCount">
            <summary>
            The total number of PDF pages that will be rendered by the current conversion
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderPdfPageParams.RenderedRectangle">
            <summary>
            The rectangle to be rendered in PDF page
            </summary>
        </member>
        <member name="T:EvoPdf.BezierCurveElement">
            <summary>
            Represents a Bezier curve element to be rendered in a PDF document 
            </summary>
        </member>
        <member name="T:EvoPdf.PageGraphicElement">
            <summary>
            This abstract class is the base class for all graphic elements that can be added to a PDF document
            </summary>
        </member>
        <member name="T:EvoPdf.PageElement">
            <summary>
            This abstract class is the base class for all elements that can can be added in a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.PageElement.Render(EvoPdf.ElementsRenderer)">
            <summary>
            Render this page element using the specified renderer. A renderer can be a page or a template
            </summary>
            <param name="renderer">The renderer to render this element. Can be a document page or template</param>
            <returns>The result of adding this element</returns>
        </member>
        <member name="M:EvoPdf.PageGraphicElement.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:EvoPdf.PageGraphicElement.Translate(System.Single,System.Single)">
            <summary>
            Translates the coordinate system before rendering the element.         
            The coordinates of the element are relative to the translated coordinate system.
            </summary>
            <param name="tx">The distance to translate the origin of the coordinate system in the horizontal dimension</param>
            <param name="ty">The distance to translate the origin of the coordinate system in the horizontal dimension</param>
        </member>
        <member name="M:EvoPdf.PageGraphicElement.Scale(System.Single,System.Single)">
            <summary>
            Scales the coordinates so that 1 unit in the horizontal and vertical dimensions of the new coordinate system 
            is the same size as sx and sy units, respectively, in the previous coordinate system.
            </summary>
            <param name="sx">The value by which to scale coordinate system in the x-axis direction.</param>
            <param name="sy">The value by which to scale coordinate system in the y-axis direction.</param>
        </member>
        <member name="M:EvoPdf.PageGraphicElement.Rotate(System.Single)">
            <summary>
            Rotates the coordinate system axes clockwise by the specified angle before rendering the element. 
            The coordinates of the element are relative to the rotated coordinates system.
            </summary>
            <param name="rotateAngle">The angle of the rotation in degrees.</param>
            <remarks>For text rotation use the TextAngle property of the TextElement.</remarks>
        </member>
        <member name="M:EvoPdf.PageGraphicElement.Skew(System.Single,System.Single)">
            <summary>
            Skews the x axis by an skewXAngle and the y axis by an skewYAngle
            before rendering the element.
            </summary>
            <param name="skewXAngle">Skew x angle.</param>
            <param name="skewYAngle">Skew y angle.</param>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.BackColor">
            <summary>
            Gets or sets element background color.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.ForeColor">
            <summary>
            Gets or sets the element foreground color.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Opacity">
            <summary>
            Gets or sets element opacity. The opacity is expressed as a value between 0 and 100. 
            0 means completely transparent and 100 completely opaque. The default value of this property is 100.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Blending">
            <summary>
            Gets or sets blending mode for transparent rendering mode of the element.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.LineStyle">
            <summary>
            Gets or sets the line style for elements rendering lines.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Gradient">
            <summary>
            The gradient used to fill a shape.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Translated">
            <summary>
            A flag to indicate if this element was translated.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Scaled">
            <summary>
            A flag to indicate if this element was scaled.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Rotated">
            <summary>
            A flag to indicate if this element was rotated.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.Skewed">
            <summary>
            A flag to indicate if this element was skewed.
            </summary>
        </member>
        <member name="P:EvoPdf.PageGraphicElement.ClipRectangle">
            <summary>
            The clip rectangle applied when the element is rendered in PDF
            </summary>
        </member>
        <member name="M:EvoPdf.BezierCurveElement.#ctor">
            <summary>
            Constructs an empty bezier curve
            </summary>
        </member>
        <member name="M:EvoPdf.BezierCurveElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a Bezier curve element
            </summary>
            <param name="x1">The first point X coordinate</param>
            <param name="y1">The first point Y coordinate</param>
            <param name="x2">The second point X coordinate</param>
            <param name="y2">The second point Y coordinate</param>
            <param name="x3">The third point X coordinate</param>
            <param name="y3">The third point Y coordinate</param>
            <param name="x4">The fourth point X coordinate</param>
            <param name="y4">The fourth point Y coordinate</param>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.X1">
            <summary>
            The X coordinate of the first point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.Y1">
            <summary>
            The Y coordinate of the first point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.X2">
            <summary>
            The X coordinate of the second point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.Y2">
            <summary>
            The Y coordinate of the second point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.X3">
            <summary>
            The X coordinate of the third point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.Y3">
            <summary>
            The Y coordinate of the third point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.X4">
            <summary>
            The X coordinate of the fourth point of the Bezier curve
            </summary>
        </member>
        <member name="P:EvoPdf.BezierCurveElement.Y4">
            <summary>
            The Y coordinate of the fourth point of the Bezier curve
            </summary>
        </member>
        <member name="T:EvoPdf.Blending">
            <summary>
            The blending function for transparent rendering mode.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Multiply">
            <summary>
            Multiplies the backdrop and source color values.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Screen">
            <summary>
            Multiplies the complements of the backdrop and source color values, then complements the result.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Overlay">
            <summary>
            Multiplies or screens the colors, depending on the backdrop color value. 
            Source colors overlay the backdrop while preserving its highlights and shadows. 
            The backdrop color is not replaced but is mixed with the source color to reflect 
            the lightness or darkness of the backdrop
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Darken">
            <summary>
            Selects the darker of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color. Painting with black produces no changes.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color. Painting with white produces no change.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color value. 
            The effect is similar to shining a harsh spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color value. 
            The effect is similar to shining a diffused spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Exclusion">
            <summary>
            Produces an effect similar to that of the Difference mode but lower in contrast. 
            Painting with white inverts the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Hue">
            <summary>
            Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Saturation">
            <summary>
            Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color. 
            Painting with this mode in an area of the backdrop that is a pure gray (no saturation) produces no change.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Color">
            <summary>
            Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color. 
            This preserves the gray levels of the backdrop and is useful for coloring monochrome images or tinting color images.
            </summary>
        </member>
        <member name="F:EvoPdf.Blending.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color. 
            This produces an inverse effect to that of the Color mode.
            </summary>
        </member>
        <member name="T:EvoPdf.Bookmark">
            <summary>
            This class represents a bookmark in the PDF document used to outline a section of the PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.Bookmark.Text">
            <summary>
            Gets or sets the PDF bookmark text displayed in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.Bookmark.Color">
            <summary>
            Gets or sets the bookmark text color.
            </summary>
        </member>
        <member name="P:EvoPdf.Bookmark.Style">
            <summary>
            Gets or sets the bookmark text style.
            </summary>
        </member>
        <member name="P:EvoPdf.Bookmark.Destination">
            <summary>
            Gets or sets the bookmark destination.
            </summary>
        </member>
        <member name="P:EvoPdf.Bookmark.ParentBookmark">
            <summary>
            Gets the parent bookmark of this bookmark or null if the bookmark has no parent.
            </summary>
        </member>
        <member name="P:EvoPdf.Bookmark.DescendantBookmarks">
            <summary>
            Gets a collection of all the descendant bookmarks of this bookmark.
            </summary>
        </member>
        <member name="T:EvoPdf.BookmarksCollection">
            <summary>
            Represents a collection of bookmarks of a document.
            </summary>
        </member>
        <member name="F:EvoPdf.BookmarksCollection.document">
            <summary>
            The parent PDF document.
            </summary>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.#ctor(EvoPdf.Document)">
            <summary>
            Creates a collection of bookmarks for this document.
            </summary>
            <param name="document">The PDF document for which this collection is created.</param>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>The collection enumerator.</returns>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.AddNewBookmark(System.String,EvoPdf.ExplicitDestination)">
            <summary>
            Adds a new bookmark to the collection.
            </summary>
            <param name="text">The bookmark text.</param>
            <param name="destination">The bookmark destination.</param>
            <returns>The newly created PDF bookmark.</returns>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.InsertNewBookmark(System.Int32,System.String,EvoPdf.ExplicitDestination)">
            <summary>
            Creates a new bookmark and inserts it at the specified zero based position index in collection.
            </summary>
            <param name="positionIndex">The zero based position index where to insert the bookmark.</param>
            <param name="text">The bookmark text.</param>
            <param name="destination">The bookmark destination.</param>
            <returns>The newly created PDF bookmark.</returns>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.Remove(EvoPdf.Bookmark)">
            <summary>
            Removes the specified PDF bookmark.
            </summary>
            <param name="bookmark">The PDF bookmark to be removed.</param>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.Remove(System.Int32)">
            <summary>
            Removes the PDF bookmark at the specified index in collection.
            </summary>
            <param name="bookmarkIndex">The zero based index of the PDF bookmark to be removed.</param>
        </member>
        <member name="M:EvoPdf.BookmarksCollection.RemoveAll">
            <summary>
            Removes all the bookmarks from collection
            </summary>
        </member>
        <member name="P:EvoPdf.BookmarksCollection.Document">
            <summary>
            The parent document of this collection
            </summary>
        </member>
        <member name="P:EvoPdf.BookmarksCollection.Count">
            <summary>
            The number of bookmarks in this PDF bookmarks collection
            </summary>
        </member>
        <member name="P:EvoPdf.BookmarksCollection.Item(System.Int32)">
            <summary>
            Gets the bookmark at the specified zero based index in the bookmarks collection.
            </summary>
            <param name="bookmarkIndex">The zero based bookmark index in the collection.</param>
            <returns>The PDF bookmark at the specified index</returns>
        </member>
        <member name="T:EvoPdf.PdfBookmarkStyle">
            <summary>
            This enumeration represents the possible styles of a bookmark in a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBookmarkStyle.Normal">
            <summary>
            Normal text style.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBookmarkStyle.Italic">
            <summary>
            The text is italic.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBookmarkStyle.Bold">
            <summary>
            The text is bold.
            </summary>
        </member>
        <member name="T:EvoPdf.CertSystemStore">
            <summary>
            This enumeration represents the possible diital certificates stores in a system
            </summary>
        </member>
        <member name="F:EvoPdf.CertSystemStore.PersonalCertificates">
            <summary>
            A certificate store that holds certificates with associated private keys (Personal Certificates store).
            </summary>
        </member>
        <member name="F:EvoPdf.CertSystemStore.RootCertificationAuthorities">
            <summary>
            Root certificates (Trusted Root Certification Authorities store).
            </summary>
        </member>
        <member name="F:EvoPdf.CertSystemStore.CertificationAuthorities">
            <summary>
            Certification authority certificates (Intermediate Certification Authorities store).
            </summary>
        </member>
        <member name="F:EvoPdf.CertSystemStore.SoftwarePublisherCertificates">
            <summary>
            Software Publisher Certificates store.
            </summary>
        </member>
        <member name="T:EvoPdf.CircleElement">
            <summary>
            This class represents a circle element that can be added to a PDF document
            </summary>
        </member>
        <member name="T:EvoPdf.EllipseElement">
            <summary>
            This class represents an ellipse element that can be added to a PDF document 
            </summary>
        </member>
        <member name="M:EvoPdf.EllipseElement.#ctor">
            <summary>
            This constructor constructs an empty ellipse element without size
            </summary>
        </member>
        <member name="M:EvoPdf.EllipseElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This constructor constructs an ellipse element at the given coordinates and having the given size 
            </summary>
            <param name="x">The X coordinate where the ellipse will be rendered</param>
            <param name="y">Y coordinate where the ellipse will be rendered</param>
            <param name="xRadius">The X radius of the ellipse</param>
            <param name="yRadius">The Y radius of the ellipse</param>
        </member>
        <member name="P:EvoPdf.EllipseElement.X">
            <summary>
            The X coordinate of the ellipse center
            </summary>
        </member>
        <member name="P:EvoPdf.EllipseElement.Y">
            <summary>
            The Y coordinate of the ellipse center
            </summary>
        </member>
        <member name="P:EvoPdf.EllipseElement.XRadius">
            <summary>
            The horizontal radius
            </summary>
        </member>
        <member name="P:EvoPdf.EllipseElement.YRadius">
            <summary>
            The vertical radius
            </summary>
        </member>
        <member name="M:EvoPdf.CircleElement.#ctor">
            <summary>
            Constructs an empty circle
            </summary>
        </member>
        <member name="M:EvoPdf.CircleElement.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Circle element constructor
            </summary>
            <param name="x">The X coordinate where the ellipse will be rendered</param>
            <param name="y">Y coordinate where the ellipse will be rendered</param>
            <param name="radius">The circle radius</param>
        </member>
        <member name="P:EvoPdf.CircleElement.Radius">
            <summary>
            The circle radius
            </summary>
        </member>
        <member name="T:EvoPdf.ColorProfile">
            <summary>
            This enumeration represents the color profiles of PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.ColorProfile.Default">
            <summary>
            The default color profile
            </summary>
        </member>
        <member name="F:EvoPdf.ColorProfile.Custom">
            <summary>
            A custom color profile
            </summary>
        </member>
        <member name="T:EvoPdf.ColorSpace">
            <summary>
            This enumeration contains the possible color spaces of a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.ColorSpace.RGB">
            <summary>
            RGB color space.
            </summary>
        </member>
        <member name="F:EvoPdf.ColorSpace.CMYK">
            <summary>
            CMYK color space.
            </summary>
        </member>
        <member name="F:EvoPdf.ColorSpace.Gray">
            <summary>
            Gray color space.
            </summary>
        </member>
        <member name="T:EvoPdf.ConversionSummary">
            <summary>
            Offers summary information about the conversion process. After a successfull conversion the 
            <see cref="P:EvoPdf.HtmlToPdfConverter.ConversionSummary"/> property is initialized with an instance of this class.
            </summary>
        </member>
        <member name="M:EvoPdf.ConversionSummary.#ctor(System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Drawing.SizeF,System.Single,System.Int32,EvoPdf.PdfPage,System.Drawing.RectangleF,System.Drawing.RectangleF[])">
            <summary>
            Creates a <see cref="T:EvoPdf.ConversionSummary"/> object
            </summary>
            <param name="pdfPageCount"></param>
            <param name="htmlContentSizePixels"></param>
            <param name="htmlContentSizePoints"></param>
            <param name="pdfPageSizePoints"></param>
            <param name="htmlContentWidthResizeFactor"></param>
            <param name="lastPageIndex"></param>
            <param name="lastPdfPage"></param>
            <param name="lastPageRectangle"></param>
            <param name="renderedPagesRectangles"></param>
        </member>
        <member name="P:EvoPdf.ConversionSummary.PdfPageCount">
            <summary>
            The number of pages in the generated PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.HtmlContentSizePixels">
            <summary>
            The size of the converted HTML content in pixels.
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.HtmlContentSizePoints">
            <summary>
            The size of the HTML content in points. A point is 1/72 inches. The converter internally transforms the <see cref="P:EvoPdf.ConversionSummary.HtmlContentSizePixels"/>
            in points using the <see cref="T:EvoPdf.UnitsConverter"/> class methods.
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.PdfPageSizePoints">
            <summary>
            The page size in points of the generated PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.HtmlContentWidthResizeFactor">
            <summary>
            The factor used to resize the HTML content when rendered in the PDF document. When <see cref="P:EvoPdf.PdfDocumentOptions.FitWidth"/> property 
            of the <see cref="P:EvoPdf.HtmlToPdfConverter.PdfDocumentOptions"/> object is true,
            the HTML content will be resized to fit the PDF page width if necessary.
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.LastPageIndex">
            <summary>
            The index of the page where the rendering of the HTML ended.
            This information is useful when new elements are added after conversion.
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.LastPdfPage">
            <summary>
            The PDF page where the rendering of the HTML ended
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.LastPageRectangle">
            <summary>
            The bounds of the rectangle rendered on the last page.
            This information is useful when new elements are added after conversion.
            </summary>
        </member>
        <member name="P:EvoPdf.ConversionSummary.RenderedPagesRectangles">
            <summary>
            The bounds of the rendered rectangle on each PDF page.
            </summary>
        </member>
        <member name="T:EvoPdf.DestinationViewMode">
            <summary>
            The view mode when an explicit destination is displayed in the viewer.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.XYZ">
            <summary>
            Display the page designated by page, with the coordinates (left, top) positioned 
            at the upper-left corner of the window and the contents of the page magnified by the factor zoom. 
            A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged.
            A zoom value of 0 has the same meaning as a null value.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.Fit">
            <summary>
            Display the page designated by page, with its contents magnified just enough to fit the entire page 
            within the window both horizontally and vertically. 
            If the required horizontal and vertical magnification factors are different, 
            use the smaller of the two, centering the page within the window in the other dimension.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.FitH">
            <summary>
            Display the page designated by page, with the vertical coordinate top positioned
            at the top edge of the window and the contents of the page magnified
            just enough to fit the entire width of the page within the window.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.FitV">
            <summary>
            Display the page designated by page, with the horizontal coordinate left positioned
            at the left edge of the window and the contents of the page magnified
            just enough to fit the entire height of the page within the window.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.FitB">
            <summary>
            Display the page designated by page, with its contents magnified
            just enough to fit its bounding box entirely within the window both horizontally
            and vertically. If the required horizontal and vertical magnification
            factors are different, use the smaller of the two, centering the bounding box
            within the window in the other dimension.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.FitBH">
            <summary>
            Display the page designated by page, with the vertical coordinate top positioned at the top edge 
            of the window and the contents of the page magnified just enough to fit the entire width of its 
            bounding box within the window. A null value for top specifies that the current value of that 
            parameter is to be retained unchanged.
            </summary>
        </member>
        <member name="F:EvoPdf.DestinationViewMode.FitBV">
            <summary>
            Display the page designated by page, with the horizontal coordinate left positioned at the left 
            edge of the window and the contents of the page magnified just enough to fit the entire height 
            of its bounding box within the window. A null value for left specifies that the current value of that 
            parameter is to be retained unchanged.
            </summary>
        </member>
        <member name="T:EvoPdf.DigitalCertificate">
            <summary>
            This class represents a certificate used for digital signatures
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalCertificate.Version">
            <summary>
            Gets version number of this digital certificate.
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalCertificate.SerialNumber">
            <summary>
            Gets serial number of this digital certificate.
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalCertificate.Issuer">
            <summary>
            Gets issuer name of this digital certificate. 
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalCertificate.Subject">
            <summary>
            Gets the subject of this digital certificate.
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalCertificate.StartDate">
            <summary>
            Gets the start date of this digital certificate.
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalCertificate.EndDate">
            <summary>
            Gets the end date of this digital certificate.
            </summary>
        </member>
        <member name="T:EvoPdf.DigitalCertificatesCollection">
            <summary>
            This class is used to manage a collection of certificates.
            </summary>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>The collection enumerator.</returns>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesCollection.GetCertBySerialNumber(System.Byte[])">
            <summary>
            Searches the certificate by the specified serial number.
            </summary>
            <param name="serialNumber">Serial number to search.</param>
            <returns>The certificate with the specified serial number or null if no certificate was found.</returns>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesCollection.GetCertByIssuer(System.String)">
            <summary>
            Searches the certificate by issuer name in the digital certificates collection.
            </summary>
            <param name="issuerName">Issuer name.</param>
            <returns>The certificate with the specified issuer name or null if no certificate was found.</returns>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesCollection.GetCertBySubject(System.String)">
            <summary>
            Searches the certificate by subject name.
            </summary>
            <param name="subjectName">Subject name.</param>
            <returns>The certificate with the specified subject name or null if no certificate was found.</returns>
        </member>
        <member name="P:EvoPdf.DigitalCertificatesCollection.Item(System.Int32)">
            <summary>
            Gets the certificate at the specified zero besed index from collection.
            </summary>
            <param name="index">The zero based certificate index.</param>
            <returns>The certificate at the specified index.</returns>
        </member>
        <member name="P:EvoPdf.DigitalCertificatesCollection.Count">
            <summary>
            Gets the number of certificates in collection.
            </summary>
        </member>
        <member name="T:EvoPdf.DigitalCertificatesStore">
            <summary>
            Provides and interface for getting digital certificates from system certificates store or from a password protected 
            PKCS#12 file. 
            A PKCS#12 file stores both the private and the public keys and such a file can be for example a file with extension .pfx 
            generated by IIS from the SSL certificate installed for a website. 
            </summary>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesStore.GetCertificates">
            <summary>
            Gets the certificates collection from the Personal Certificates store. 
            The Personal Certificates store can be accessed from Control Panel/Internet Options,
            Content, Certificates.
            </summary>
            <returns>The Personal certificates collection.</returns>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesStore.GetCertificates(EvoPdf.CertSystemStore)">
            <summary>
            Gets the certificates collection from the specified system certificates store.
            </summary>
            <param name="sysCertStore">The system certificates store</param>
            <returns>The certificates collection</returns>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesStore.GetCertificates(System.String)">
            <summary>
            Gets the certificates collection from the specified PKCS#12 file. This method uses a NULL 
            password to get the certificates from packet.
            A PKCS#12 file stores both the private and the public key and such a file can be for example a file with extension .pfx 
            generated by IIS from the SSL certificate installed for a website.
            </summary>
            <param name="certFileName">The path of the .pfx or .p12 file storing the certificates.</param>
            <returns>The certificates collection.</returns>
        </member>
        <member name="M:EvoPdf.DigitalCertificatesStore.GetCertificates(System.String,System.String)">
            <summary>
            Gets the certificates collection from the specified password protected PKCS#12 file. 
            A PKCS#12 file stores both the private and the public key and such a file can be for example a file with extension .pfx 
            generated by IIS from the SSL certificate installed for a website.
            </summary>
            <param name="certFileName">The path of the .pfx or .p12 file storing the certificates.</param>
            <param name="password">The password used to decrypt and verify the PFX packet.
            This password must be exactly the same as the password that was used to encrypt the packet. 
            If the password used to encrypt the packet was blank, pass NULL for the value of this parameter.
            </param>
            <returns>The certificates collection.</returns>
        </member>
        <member name="T:EvoPdf.DigitalSignatureElement">
            <summary>
            Represents a digital signature in the PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.DigitalSignatureElement.#ctor(System.Drawing.RectangleF,EvoPdf.DigitalCertificate)">
            <summary>
            Constructs a digital signature object that can be added to a PDF page.
            </summary>
            <param name="bounds">The digital signature rectangle inside the PDF page.</param>
            <param name="certificate">The digital certificate obtained from the digital certificates store.</param>
        </member>
        <member name="P:EvoPdf.DigitalSignatureElement.Certificate">
            <summary>
            Gets the certificate used to create the signature.
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalSignatureElement.Reason">
            <summary>
            Gets or sets the reason The reason for the signing, such as ( I agree ?).
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalSignatureElement.Location">
            <summary>
            Gets or sets the CPU host name or physical location of the signing.
            </summary>
        </member>
        <member name="P:EvoPdf.DigitalSignatureElement.ContactInfo">
            <summary>
            Information provided by the signer to enable a recipient to contact the signer 
            to verify the signature; for example, a phone number.
            </summary>
        </member>
        <member name="T:EvoPdf.Document">
            <summary>
            This class encapsulates a PDF document and can be used to create a new PDF document or to load an existing PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.Document.#ctor">
            <summary>
            Creates an empty PDF document object. New pages can be added to the document and new PDF elements can be added
            to document pages.
            </summary>
        </member>
        <member name="M:EvoPdf.Document.#ctor(EvoPdf.PdfStandardSubset)">
            <summary>
            Creates a PDF document based on the specified PDF standard. By default the Full PDF stadard is used.
            This property can be used to create PDF/A or PDF/X compliant documents.
            </summary>
            <param name="pdfSubset">The PDF standard used to create the PDF document.
            </param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(EvoPdf.ColorSpace)">
            <summary>
            Creates a PDF document with the specified color space. This property can be used to create 
            PDF documents in RGB, Grayscale or CMYK color spaces. By default the document uses the RGB color space.
            </summary>
            <param name="colorSpace">The color space of the document.</param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(EvoPdf.ColorProfile)">
            <summary>
            Creates a PDF document with a color profile. 
            </summary>
            <param name="colorProfile">The color profile to be used when creating the PDF document</param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(EvoPdf.PdfStandardSubset,EvoPdf.ColorSpace)">
            <summary>
            Creates a PDF document based on the specified PDF standard and using the specified color space. 
            By default the Full PDF stadard is used. This property can be used to create PDF/A or PDF/X
            compliant documents using the specified color space.
            </summary>
            <param name="pdfSubset">The PDF standard used to create the PDF document.</param>
            <param name="colorSpace">The color space of the document.</param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(System.IO.Stream)">
            <summary>
            Creates a PDF document object from the specified stream containing the PDF document.
            </summary>
            <param name="pdfStream">The PDF document stream.</param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(System.String)">
            <summary>
            Creates a PDF document from and existing PDF file.
            </summary>
            <param name="pdfFilePath">The full path of an existing PDF document file.
            </param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(System.IO.Stream,System.String)">
            <summary>
            Creates a PDF document from a stream cotaining a password protected PDF document. 
            The specified password can be a user or owner password.
            </summary>
            <param name="pdfStream">The stream containing the PDF document.</param>
            <param name="password">The password to open the specified PDF document.</param>
        </member>
        <member name="M:EvoPdf.Document.#ctor(System.String,System.String)">
            <summary>
            Creates a PDF document object from an existing password protected PDF file.
            </summary>
            <param name="pdfFilePath">The full path to the PDF file.</param>
            <param name="password">The password to open the specified PDF document.</param>
        </member>
        <member name="M:EvoPdf.Document.Close">
            <summary>
            Releases all the resources allocated by this PDF document. Always call this method after the document was saved.
            If the document was created from a stream or file, the stream will be closed if it was not explicitly detached 
            by calling the DetachStream() before the document is closed.
            </summary>
        </member>
        <member name="M:EvoPdf.Document.DetachStream">
            <summary>
            Call this method to detach the stream from which this document was created. When this method is called before 
            calling Close(), the Close method will not close the detached stream.
            </summary>
        </member>
        <member name="M:EvoPdf.Document.Save(System.String)">
            <summary>
            Saves this PDF document into the file given by the method parameter
            </summary>
            <param name="pdfFilePath">The name of the file where to save the document. It can be a full path or a relative path.</param>
        </member>
        <member name="M:EvoPdf.Document.Save(System.IO.Stream)">
            <summary>
            Saves this PDF document into the specified output stream.
            </summary>
            <param name="outStream">The stream where to save the PDF document.</param>
        </member>
        <member name="M:EvoPdf.Document.Save">
            <summary>
            Saves the PDF document as byte array that can be further saved into a file or sent over HTTP to a browser.
            </summary>
            <returns>The byte array representation of the document.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddHeaderTemplate(System.Single)">
            <summary>
            Adds a header with the given height to document        
            </summary>
            <param name="height">The header height</param>
            <returns>The newly added header template</returns>
        </member>
        <member name="M:EvoPdf.Document.AddFooterTemplate(System.Single)">
            <summary>
            Adds a footer with the given height to document 
            </summary>
            <param name="height">The footer height</param>
            <returns>The newly added footer template</returns>
        </member>
        <member name="M:EvoPdf.Document.AddTemplate(System.Single,System.Single)">
            <summary>
            Add a new template with the specified width and height to the document templates collection.
            The template location is top left corner of the page.
            </summary>
            <param name="width">The template width</param>
            <param name="height">The template height</param>
            <returns>The newly added template</returns>
        </member>
        <member name="M:EvoPdf.Document.AddTemplate(System.Drawing.RectangleF)">
            <summary>
            Add a new template with the specified bounds to the document templates collection.
            </summary>
            <param name="bounds">The template element bounds</param>
            <returns>The newly added template.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddFileAttachment(System.String)">
            <summary>
            Adds an attachment a given file to this PDF document 
            </summary>
            <param name="filePath">The path to file to be attached</param>
        </member>
        <member name="M:EvoPdf.Document.AddFileAttachment(System.String,System.String)">
            <summary>
            Adds an attachment a given file and given description to this PDF document 
            </summary>
            <param name="filePath">The path to file to be attached</param>
            <param name="descr">The attachment description</param>
        </member>
        <member name="M:EvoPdf.Document.AddFileAttachment(System.IO.Stream,System.String)">
            <summary>
            Adds an attachment with the given name from a stream to this PDF document 
            </summary>
            <param name="fileStream">The file stream</param>
            <param name="attachmentName">A name for attachment</param>
        </member>
        <member name="M:EvoPdf.Document.AddFileAttachment(System.IO.Stream,System.String,System.String)">
            <summary>
            Adds an attachment with the given name and a given description from a stream to this PDF document 
            </summary>
            <param name="fileStream">The file stream</param>
            <param name="attachmentName">A name for attachment</param>
            <param name="descr">The attachment description</param>
        </member>
        <member name="M:EvoPdf.Document.AddPage">
            <summary>
            Creates a new PDF page and adds it to the collection. If there is a previous page in the
            collection, the orientation and size are inherited from the that page otherwise a first page with
            the default A4 size and Portrait orientation is created. The page margins are inherited from the
            default document margins
            </summary>
            <returns>The newly created PDF page</returns>
        </member>
        <member name="M:EvoPdf.Document.AddPage(EvoPdf.Margins)">
            <summary>
            Creates a new PDF page and adds it to the collection. If there is a previous page in the
            collection, the orientation and size are inherited from the that page otherwise a first page with
            the default A4 size and Portrait orientation is created
            </summary>
            <param name="pageMargins">The PDF page margins</param>
            <returns>The newly created PDF page</returns>
        </member>
        <member name="M:EvoPdf.Document.AddPage(EvoPdf.PdfPageSize,EvoPdf.Margins)">
            <summary>
            Creates a new PDF page and adds it to the collection. If there is a previous page in the
            collection, the page orientation is inherited from the that page otherwise a first page with
            the specified size and Portrait orientation is created
            </summary>
            <param name="pageSize">The page size in points</param>
            <param name="pageMargins">The page mergins in points</param>
            <returns>The newly created PDF page</returns>
        </member>
        <member name="M:EvoPdf.Document.AddPage(EvoPdf.PdfPageSize,EvoPdf.Margins,EvoPdf.PdfPageOrientation)">
            <summary>
            Creates a new PDF page with the specified size, margins and orientation and adds it to the collection
            </summary>
            <param name="pageSize">The PDF page size in points</param>
            <param name="pageMargins">The PDF page margins in points</param>
            <param name="pageOrientation">The PDF page orientation</param>
            <returns>The newly created PDF page</returns>
        </member>
        <member name="M:EvoPdf.Document.AddPage(EvoPdf.PdfPage)">
            <summary>
            Adds the specified page to the document pages collection. The page to be added is allowed to be
            from another document. The source document of the page to be added must remain opened until the
            current document is saved.
            </summary>
            <param name="pdfPage">The page to be added to the collection.</param>
        </member>
        <member name="M:EvoPdf.Document.InsertPage(System.Int32,EvoPdf.PdfPageSize,EvoPdf.Margins,EvoPdf.PdfPageOrientation)">
            <summary>
            Creates a new PDF page with the specified size, margins and orientation and inserts it into the collection
            at the specified index.
            </summary>
            <param name="index">The index where to insert the new page.</param>
            <param name="pageSize">The PDF page size in points</param>
            <param name="pageMargins">The PDF page margins in points</param>
            <param name="pageOrientation">The PDF page orientation</param>
            <returns>The newly created PDF page</returns>
        </member>
        <member name="M:EvoPdf.Document.InsertPage(System.Int32,EvoPdf.PdfPage)">
            <summary>
            Inserts the specified page into the document pages collection given by the <see cref="P:EvoPdf.Document.Pages"/> property at the specified index. 
            The page to be added is allowed to be from another document. 
            The source document of the page to be inserted must remain opened until the
            current document is saved.
            </summary>
            <param name="pageIndex">The index where the page will be inserted.</param>
            <param name="pdfPage">The PDF page to be inserted.</param>
        </member>
        <member name="M:EvoPdf.Document.AppendDocument(EvoPdf.Document)">
            <summary>
            Appends the document given as parameter to the current document.
            The appended document must remain open until the current document is saved
            </summary>
            <param name="doc">The document to be appended</param>
        </member>
        <member name="M:EvoPdf.Document.AppendDocument(EvoPdf.Document,System.Int32,System.Int32)">
            <summary>
            Appends a range of pages from the document given as parameter to the current document.
            The appended document must remain open until the current document is saved
            </summary>
            <param name="doc">The document to be appended</param>
            <param name="fromPageIndex">The page index in appended PDF document from where to start copying the pages</param>
            <param name="pageCount">The number of pages to append</param>
        </member>
        <member name="M:EvoPdf.Document.AppendDocument(EvoPdf.Document,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends the document given as parameter to the current document and optionally applies the current document header and footer to the 
            appended document pages if the appended document was loaded from an external file or stream
            </summary>
            <param name="doc">The document to be appended</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer of the current document are also applied to the appended document pages</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn on first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.Document.AppendDocument(EvoPdf.Document,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Appends a range of pages from the document given as parameter to the current document and optionally applies the current document header and footer to the 
            appended document pages if the appended document was loaded from an external file or stream
            </summary>
            <param name="doc">The document to be appended</param>
            <param name="fromPageIndex">The page index in appended PDF document from where to start copying the pages</param>
            <param name="pageCount">The number of pages to append</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer of the current document are also applied to the appended document pages</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn on first page of the appended document</param>        
        </member>
        <member name="M:EvoPdf.Document.InsertDocument(System.Int32,EvoPdf.Document)">
            <summary>
            Inserts the document given as parameter in the current document at the given page index.
            The appended document must remain open until the current document is saved
            </summary>
            <param name="startIndex">The page index where to start insertion in this document</param>
            <param name="doc">The document to be inserted</param>
        </member>
        <member name="M:EvoPdf.Document.InsertDocument(System.Int32,EvoPdf.Document,System.Int32,System.Int32)">
            <summary>
            Inserts a range of pages from the document given as parameter in the current document at the given page index.
            The appended document must remain open until the current document is saved
            </summary>
            <param name="startIndex">The page index where to start insertion in this document</param>
            <param name="doc">The document to be inserted</param>
            <param name="fromPageIndex">The page index in appended PDF document from where to start copying the pages</param>
            <param name="pageCount">The number of pages to insert</param>
        </member>
        <member name="M:EvoPdf.Document.InsertDocument(System.Int32,EvoPdf.Document,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Inserts the document given as parameter to the current document and optionally applies the current document header and footer to the 
            appended document pages if the appended document was loaded from an external file or stream
            </summary>
            <param name="insertIndex">The page index where to start insertion in this document</param>
            <param name="doc">The document to be appended</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer of the current document are also applied to the inserted document pages</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn on first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.Document.InsertDocument(System.Int32,EvoPdf.Document,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Inserts a range of pages from the document given as parameter to the current document and optionally applies the current document header and footer to the 
            appended document pages if the appended document was loaded from an external file or stream
            </summary>
            <param name="insertIndex">The page index where to start insertion in this document</param>
            <param name="doc">The document to be appended</param>
            <param name="fromPageIndex">The page index in appended PDF document from where to start copying the pages</param>
            <param name="pageCount">The number of pages to insert</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer of the current document are also applied to the inserted document pages</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn on first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.Document.RemovePage(EvoPdf.PdfPage)">
            <summary>
            Removes the specified PDF page from the pages collection of this document.
            </summary>
            <param name="pdfPage">The PDF page to be removed.</param>
        </member>
        <member name="M:EvoPdf.Document.RemovePage(System.Int32)">
            <summary>
            Removes the PDF page at the specified index in pages collection.
            </summary>
            <param name="pageIndex">The zero based index of the PDF page to be removed.</param>
        </member>
        <member name="M:EvoPdf.Document.AddFont(System.Drawing.Font)">
            <summary>
            Adds a system font to the fonts collection. If the font was already added 
            the method returns the existing font. By default the font
            is embedded in the PDF document in order to support Unicode texts.
            </summary>
            <param name="font">The font to be added to the collection.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddFont(System.Drawing.Font,System.Boolean)">
            <summary>
            Adds a system font to the fonts collection. If the font was already added 
            the method returns the existing font. The embedFont property indicates if the added font 
            will be embedded into the PDF document.
            </summary>
            <param name="font">Font for adding.</param>
            <param name="embedFont">When true the font will be embedded in the PDF document.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddFont(System.String)">
            <summary>
            Adds a system font to the fonts collection. The font is created from the specified file.
            If the font was already added the method returns the existing font. 
            </summary>
            <param name="fontFilename">The file name of the font to be added.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddFont(EvoPdf.StdFontBaseFamily)">
            <summary>
            Adds a standard font to the collection.
            If the font was already added the method returns the existing font.
            </summary>
            <param name="stdFont">The standard font family.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddFont(EvoPdf.StandardCJKFont)">
            <summary>
            Adds a standard CJK font to the collection.
            If the font was already added the method returns the existing font.
            </summary>
            <param name="stdCJKFont">The standard CJK font to add to the document fonts collection.</param>
            <returns>The CJK font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.Document.GetPageCount(System.String)">
            <summary>
            A fast method to obtain the page count of a PDF document from the given file path.
            </summary>
            <param name="pdfFilePath">The path of the PDF file for which to get the page count.</param>
            <returns>The number of pages in the specified PDF document.</returns>
        </member>
        <member name="M:EvoPdf.Document.GetPageCount(System.IO.Stream)">
            <summary>
            A fast method to obtain the page count of a PDF document from the given stream.
            </summary>
            <param name="pdfStream">The stream containing the PDF document for which to get the page count.</param>
            <returns>The number of pages in the specified PDF document.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddBookmark(System.String,EvoPdf.ExplicitDestination)">
            <summary>
            Creates a root bookmark for the document
            </summary>
            <param name="text">The bookmark text</param>
            <param name="destination">The bookmark destination</param>
            <returns>The newly added bookmark.</returns>
        </member>
        <member name="M:EvoPdf.Document.AddBookmark(System.String,EvoPdf.ExplicitDestination,EvoPdf.Bookmark)">
            <summary>
            Creates a child bookmark for the existing parentBookmark
            </summary>
            <param name="text">The text of the child bookmark</param>
            <param name="destination">The destination of the child bookmark</param>
            <param name="parentBookmark">The parent bookmark</param>
            <returns>The newly added bookmark.</returns>
        </member>
        <member name="E:EvoPdf.Document.ExternalPdfPageAddedEvent">
            <summary>
            The event is raised after a page from an external PDF document is added to this document
            </summary>
        </member>
        <member name="P:EvoPdf.Document.LicenseKey">
            <summary>
            Gets or sets the license key string received from the vendor.
            If this property is null the library will automatically enter in evaluation mode
            and a demo watermark will be displayed on the generated PDF document. 
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Pages">
            <summary>
            Gets the collection of pages of this PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Fonts">
            <summary>
            Gets the collection of fonts of this PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Templates">
            <summary>
            Gets the collection of templates of this PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Margins">
            <summary>
            The default document margins. The new pages will use the default margins
            if no margings are specified
            </summary>
        </member>
        <member name="P:EvoPdf.Document.AutoCloseAppendedDocs">
            <summary>
            Gets or sets a value indicating if the PDF documents appended to this document using the
            <see cref="M:EvoPdf.Document.AppendDocument(EvoPdf.Document)"/> method are automatically closed when the current document is closed using the 
            <see cref="M:EvoPdf.Document.Close"/> method. The default value is false.
            The appended documents must remain open until the current document is saved.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Header">
            <summary>
            Represents the default PDF document header template. This header is automatically considered
            when calculating the available space for drawing in a PDF page. This template is automatically 
            docked to the top of the PDF page. 
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Footer">
            <summary>
            Represents the default PDF document footer template. This footer is automatically considered
            when calculating the available space for rendering in a PDF page. This template is automatically 
            docked to the bottom of the PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Security">
            <summary>
            Offers access to security features of the PDF document like encryption.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Form">
            <summary>
            Gets a reference to the PDF form of this PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.Document.DocumentInformation">
            <summary>
            Offers access to the document information object where the document's 
            title, subject, keywords, etc can be set.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.ViewerPreferences">
            <summary>
            Offers access to the viewer preferences settings for the document.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.OpenAction">
            <summary>
            The Go To, JavaScript, Submit Form or Reset Form action to be performed when the PDF document is opened.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.CompressCrossReference">
            <summary>
            Set this property on true to store the PDF cross-reference table and PDF trailer in compressed cross-reference streams
            and to reduce the PDF file size. The default value is false for the new documents
            </summary>
        </member>
        <member name="P:EvoPdf.Document.TransparencyEnabled">
            <summary>
            Gets or sets a flag indicating if the transparency is enabled in the PDF document.
            Default value is true. This property can be set to false to eliminate the additional flattening time 
            when the document is sent to the printer from Adobe Reader viewer.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.Bookmarks">
            <summary>
            Gets the bookmarks collection of the document.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.CompressionLevel">
            <summary>
            Gets or sets the PDF document compression level. By default the compression level is <see cref="F:EvoPdf.PdfCompressionLevel.Normal"/>
            </summary>
        </member>
        <member name="P:EvoPdf.Document.JpegCompressionEnabled">
            <summary>
            Gets or sets a flag indicating if the JPEG compression is enabled or not for the images in the generated PDF.
            By default the JPEG compression is enabled to reduce the size of the generated PDF. When the JPEG compression is enabled
            the quality of the images in the generated PDF is lower than the quality of the original images in the HTML document,
            function of the <see cref="P:EvoPdf.Document.JpegCompressionLevel"/> parameter. When the <see cref="P:EvoPdf.Document.JpegCompressionLevel"/> is increased, the quality of the images in PDF decreases.
            </summary>
        </member>
        <member name="P:EvoPdf.Document.JpegCompressionLevel">
            <summary>
            Gets the compression level of images in the generated PDF as an integer value between 0 and 100. 
            This property has effect only when the JpegCompressionEnabled is true.
            When the <see cref="P:EvoPdf.Document.JpegCompressionLevel"/> is 0, the compression rate is the lowest and the quality of the images is the best.
            When the <see cref="P:EvoPdf.Document.JpegCompressionLevel"/> is 100, the compression rate is the highest and quality of the images in PDF is the worst.
            The default JPEG compression level is 10, which should offer a good balance between the compression rate and 
            the quality of the images in PDF.
            </summary>
        </member>
        <member name="T:EvoPdf.DocumentInformation">
            <summary>
            This class encapsulates the options to control the PDF document description (author, title, keywords, etc). 
            The <see cref="T:EvoPdf.Document"/> class exposes a reference to an object of this type in the <see cref="P:EvoPdf.Document.DocumentInformation"/> property
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentInformation.Title">
            <summary>
            Gets or sets the document title.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentInformation.Author">
            <summary>
            Gets or sets the name of document author.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentInformation.Subject">
            <summary>
            Gets or sets the subject of a PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentInformation.Keywords">
            <summary>
            Gets or sets the keywords associated with the PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentInformation.Producer">
            <summary>
            Gets the name of the PDF document producer. 
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentInformation.CreationDate">
            <summary>
            Gets or sets the date and time the PDF document was created.
            </summary>
        </member>
        <member name="T:EvoPdf.DocumentOpenAction">
            <summary>
            Encapsulates a Go To, JavaScript, Submit Form or Reset Form action to be performed when the document is opened.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentOpenAction.Action">
            <summary>
            The open document action as an instance of the <see cref="T:EvoPdf.PdfActionGoTo"/> or <see cref="T:EvoPdf.PdfActionJavaScript"/> classes. 
            </summary>
        </member>
        <member name="T:EvoPdf.DocumentViewerPreferences">
            <summary>
            Represents the viewer preferences of the PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.HideToolbar">
            <summary>
            A flag specifying whether to hide the viewer application’s tool
            bars when the document is active. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.HideMenuBar">
            <summary>
            A flag specifying whether to hide the viewer application’s
            menu bar when the document is active. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.HideWindowUI">
            <summary>
            A flag specifying whether to hide user interface elements in
            the document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.FitWindow">
            <summary>
            A flag specifying whether to resize the document’s window to
            fit the size of the first displayed page. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.CenterWindow">
            <summary>
            A flag specifying whether to position the document’s window
            in the center of the screen. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.DisplayDocTitle">
            <summary>
            A flag specifying whether the window’s title bar should display the document title
            taken from the title entry of the document information dictionary. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.NonFullScreenPageMode">
            <summary>
            The document’s page mode, specifying how to display the
            document on exiting full-screen mode. This entry is meaningful only if the value of the PageMode entry in the catalog dictionary 
            is FullScreen; it is ignored otherwise. Default value: UseNone.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.Direction">
            <summary>
            The predominant reading order for text. Default value: L2R.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.PageMode">
            <summary>
            Specifies how the document should be displayed when opened. Default value: UseNone.
            </summary>
        </member>
        <member name="P:EvoPdf.DocumentViewerPreferences.PageLayout">
            <summary>
            The page layout to be used when the document is opened. Default value: OneColumn.
            </summary>
        </member>
        <member name="T:EvoPdf.ElementsRenderer">
            <summary>
            Base class for classes capable of rendering page elements
            </summary>
        </member>
        <member name="M:EvoPdf.ElementsRenderer.AddElement(EvoPdf.PageElement)">
            <summary>
            An abstract method to add a PDF page element to the elements renderer
            </summary>
            <param name="pageElement">The page element to be rendered</param>
            <returns>The result of adding the element</returns>
        </member>
        <member name="P:EvoPdf.ElementsRenderer.ParentDocument">
            <summary>
            The parent document of this renderer
            </summary>
        </member>
        <member name="P:EvoPdf.ElementsRenderer.ClientRectangle">
            <summary>
            Gets the drawable area of the renderer. The margins, document header and footer are excluded.
            </summary>
        </member>
        <member name="T:EvoPdf.EllipseArcElement">
            <summary>
            Represents an ellipse arc element
            </summary>
        </member>
        <member name="M:EvoPdf.EllipseArcElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an ellipse arc element
            </summary>
            <param name="x">X coordinate of the rectangle eclosing the ellipse.</param>
            <param name="y">Y coordinate of the rectangle eclosing the ellipse.</param>
            <param name="width">Width of the rectangle eclosing the ellipse.</param>
            <param name="height">Height of the rectangle eclosing the ellipse.</param>
            <param name="startAngle">The start angle in degrees of the ellipse arc measured counter-clockwise from the X axis centered in the enclosing rectangle.</param>
            <param name="sweepAngle">The angle in degrees of the ellipse arc measured counter-clockwise from the start angle of the slice.</param>
        </member>
        <member name="T:EvoPdf.EllipseSliceElement">
            <summary>
            This class represents an ellipse slice element that can be added to a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.EllipseSliceElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an ellipse slice element
            </summary>
            <param name="x">X coordinate of the rectangle eclosing the ellipse.</param>
            <param name="y">Y coordinate of the rectangle eclosing the ellipse.</param>
            <param name="width">Width of the rectangle eclosing the ellipse.</param>
            <param name="height">Height of the rectangle eclosing the ellipse.</param>
            <param name="startAngle">The start angle in degrees of the ellipse slice measured counter-clockwise from the X axis centered in the enclosing rectangle.</param>
            <param name="sweepAngle">The angle in degrees of the ellipse slice measured counter-clockwise from the start angle of the slice.</param>
        </member>
        <member name="T:EvoPdf.EncryptionKeySize">
            <summary>
            This enumeration contains the possible values of the length of the encryption key used to encrypt a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.EncryptionKeySize.EncryptKey128Bit">
            <summary>
            A 128 bit length.
            </summary>
        </member>
        <member name="F:EvoPdf.EncryptionKeySize.EncryptKey40Bit">
            <summary>
            A 40 bit length.
            </summary>
        </member>
        <member name="T:EvoPdf.ExplicitDestination">
            <summary>
            Represents a destination in the PDF document for links, bookmarks and other interactive PDF features. 
            </summary>
        </member>
        <member name="M:EvoPdf.ExplicitDestination.#ctor">
            <summary>
            Creates an empty explivit destination. The <see cref="P:EvoPdf.ExplicitDestination.DestPage"/> property must be set after object creation
            </summary>
        </member>
        <member name="M:EvoPdf.ExplicitDestination.#ctor(EvoPdf.PdfPage)">
            <summary>
            Constructs a destination to the specified page
            </summary>
            <param name="page">The destination page</param>
        </member>
        <member name="M:EvoPdf.ExplicitDestination.#ctor(EvoPdf.PdfPage,System.Drawing.PointF)">
            <summary>
            Constructs a destination to the specified location in the specified page
            </summary>
            <param name="page">The destination poge</param>
            <param name="point">The destination point in page</param>
        </member>
        <member name="M:EvoPdf.ExplicitDestination.#ctor(EvoPdf.PdfPage,System.Drawing.PointF,EvoPdf.DestinationViewMode)">
            <summary>
            Constructs a destination to the specified location in the specified page and with the specified view mode
            of the destination page
            </summary>
            <param name="page">The destination page</param>
            <param name="point">The destination point in page</param>
            <param name="viewMode">The destination view mode</param>
        </member>
        <member name="P:EvoPdf.ExplicitDestination.Point">
            <summary>
            Gets or sets the destination point in destination page.
            </summary>
        </member>
        <member name="P:EvoPdf.ExplicitDestination.ZoomPercentage">
            <summary>
            Gets or sets the zoom percentage of the destination page when viewed in the viewer and the 
            view mode is XYZ (for example a 100 value will not zoom the page).
            </summary>
        </member>
        <member name="P:EvoPdf.ExplicitDestination.DestPage">
            <summary>
            Gets or sets the destination page.
            </summary>
        </member>
        <member name="P:EvoPdf.ExplicitDestination.ViewMode">
            <summary>
            Gets or sets the view mode of the destination page.
            </summary>
        </member>
        <member name="T:EvoPdf.FileAttachmentElement">
            <summary>
            This class represents a file attachment in the PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.FileAttachmentElement.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Creates a file attachment and a link in page to the attachment
            </summary>
            <param name="linkRectangle">The attachment link rectangle in page</param>
            <param name="filePath">The path to file to be attached</param>
        </member>
        <member name="M:EvoPdf.FileAttachmentElement.#ctor(System.Drawing.RectangleF,System.IO.Stream,System.String)">
            <summary>
            Creates a file attachment from a stream and a link in page to the attachment
            </summary>
            <param name="linkRectangle">The attachment link rectangle in page</param>
            <param name="fileStream">The file stream</param>
            <param name="attachmentName">A name for attachment</param>
        </member>
        <member name="P:EvoPdf.FileAttachmentElement.IconType">
            <summary>
            The file attachment icon type. The default icon is paper clip
            </summary>
        </member>
        <member name="P:EvoPdf.FileAttachmentElement.IconColor">
            <summary>
            The file attachment icon color. By default is black
            </summary>
        </member>
        <member name="P:EvoPdf.FileAttachmentElement.Text">
            <summary>
            The file attachment text
            </summary>
        </member>
        <member name="T:EvoPdf.FileAttachmentIcon">
            <summary>
            This enumeration contains the possible types of icons used in PDF to mark a file attachment
            </summary>
        </member>
        <member name="F:EvoPdf.FileAttachmentIcon.PushPin">
            <summary>
            PushPin icon
            </summary>
        </member>
        <member name="F:EvoPdf.FileAttachmentIcon.Paperclip">
            <summary>
            Paperclip icon
            </summary>
        </member>
        <member name="T:EvoPdf.FileLinkElement">
            <summary>
            This class represents a link to an external file in a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.FileLinkElement.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Constructs a file link element
            </summary>
            <param name="linkRectangle">The link rectangle in page</param>
            <param name="filePath">The link file</param>
        </member>
        <member name="P:EvoPdf.FileLinkElement.LinkRectangle">
            <summary>
            Gets or sets the file link element rectangle in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.FileLinkElement.FilePath">
            <summary>
            Gets or sets the external file path
            </summary>
        </member>
        <member name="T:EvoPdf.FontCollection">
            <summary>
            Represents a collection of fonts in a PDF document.
            </summary>
        </member>
        <member name="F:EvoPdf.FontCollection.document">
            <summary>
            The parent PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.FontCollection.#ctor(EvoPdf.Document)">
            <summary>
            Creates a font collection for the specified PDF document
            </summary>
            <param name="document">The parent document of the fonts collection</param>
        </member>
        <member name="M:EvoPdf.FontCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>The collection enumerator.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Add(System.Drawing.Font)">
            <summary>
            Adds a system font to the fonts collection. If the font was already added 
            the method returns the existing font.
            </summary>
            <param name="font">The font to be added to the collection.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Add(System.Drawing.Font,System.Boolean)">
            <summary>
            Adds a system font to the fonts collection. If the font was already added 
            the method returns the existing font. The embedFont property says if the added font 
            will be embedded into the PDF document
            </summary>
            <param name="font">Font for adding.</param>
            <param name="embedFont">When true the font will be embedded in the PDF document.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Add(System.String)">
            <summary>
            Adds a system font to the fonts collection. The font is created from the specified file.
            If the font was already added the method returns the existing font.
            </summary>
            <param name="fontFilename">The file name of the font to be added.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Add(EvoPdf.StdFontBaseFamily)">
            <summary>
            Adds a standard font to the collection.
            If the font was already added the method returns the existing font.
            </summary>
            <param name="stdFont">The standard font family.</param>
            <returns>The font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Add(EvoPdf.StandardCJKFont)">
            <summary>
            Adds a standard CJK font to the collection.
            If the font was already added the method returns the existing font.
            </summary>
            <param name="stdCJKFont">The standard CJK font to add to the document fonts collection.</param>
            <returns>The CJK font added to the collection.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Add(EvoPdf.PdfFont)">
            <summary>
            Adds a PDF font to the fonts collection.
            If the font was already added the method returns the existing font.
            </summary>
            <param name="font">Font object to add to the collection.</param>
            <returns>Added to the collection font.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.AddRange(EvoPdf.PdfFont[])">
            <summary>
            Adds a set of fonts to the fonts collection.
            </summary>
            <param name="fonts">The set of fonts to be added.</param>
        </member>
        <member name="M:EvoPdf.FontCollection.Contains(EvoPdf.PdfFont)">
            <summary>
            Checks if the specified font belongs to the fonts collection.
            </summary>
            <param name="font">Font to search.</param>
            <returns>True if the font is found in the collection, otherwise returns false.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.IndexOf(EvoPdf.PdfFont)">
            <summary>
            Returns the index of the specified font in the fonts collection.
            </summary>
            <param name="font">The font to search in collection.</param>
            <returns>The index of font or -1 if the font does not exist.</returns>
        </member>
        <member name="M:EvoPdf.FontCollection.Remove(EvoPdf.PdfFont)">
            <summary>
            Removes the specified font from the fonts collection.
            </summary>
            <param name="font">The font to be removed from collection.</param>
        </member>
        <member name="M:EvoPdf.FontCollection.Insert(System.Int32,EvoPdf.PdfFont)">
            <summary>
            Inserts a font to the specified index in collection.
            </summary>
            <param name="font">The font to be inserted in the collection.</param>
            <param name="index">Index in collection where to insert the font.</param>
        </member>
        <member name="P:EvoPdf.FontCollection.Item(System.Int32)">
            <summary>
            Gets the font from the specified index.
            </summary>
        </member>
        <member name="T:EvoPdf.GradientColor">
            <summary>
            Used to fill a shape
            </summary>
        </member>
        <member name="M:EvoPdf.GradientColor.#ctor(EvoPdf.GradientDirection,EvoPdf.PdfColor,EvoPdf.PdfColor)">
            <summary>
            Gradient contructor
            </summary>
            <param name="gradientDirection">The gradient direction</param>
            <param name="start">The start color of the gradient</param>
            <param name="end">The end color of the gradient</param>
        </member>
        <member name="P:EvoPdf.GradientColor.StartColor">
            <summary>
            The gradient start color
            </summary>
        </member>
        <member name="P:EvoPdf.GradientColor.EndColor">
            <summary>
            The gradient end color
            </summary>
        </member>
        <member name="P:EvoPdf.GradientColor.GradientDirection">
            <summary>
            The gradient direction
            </summary>
        </member>
        <member name="T:EvoPdf.GradientDirection">
            <summary>
            This enumeration represents the possible directions of the gradient color in a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.GradientDirection.Horizontal">
            <summary>
            Horizontal gradient from left to right
            </summary>
        </member>
        <member name="F:EvoPdf.GradientDirection.Vertical">
            <summary>
            Vertical gradient from top to bottom
            </summary>
        </member>
        <member name="F:EvoPdf.GradientDirection.ForwardDiagonal">
            <summary>
            Diagonal gradient from top left to bottom right
            </summary>
        </member>
        <member name="F:EvoPdf.GradientDirection.BackwardDiagonal">
            <summary>
            Diagonal gradient from top right bottom left
            </summary>
        </member>
        <member name="T:EvoPdf.HorizontalTextAlign">
            <summary>
            This enumeration contains the possible values of the horizontal alignment of the text in PDF documents.
            </summary>
        </member>
        <member name="F:EvoPdf.HorizontalTextAlign.Default">
            <summary>
            Align default.
            </summary>
        </member>
        <member name="F:EvoPdf.HorizontalTextAlign.Left">
            <summary>
            Align left.
            </summary>
        </member>
        <member name="F:EvoPdf.HorizontalTextAlign.Center">
            <summary>
            Align center.
            </summary>
        </member>
        <member name="F:EvoPdf.HorizontalTextAlign.Right">
            <summary>
            Align right.
            </summary>
        </member>
        <member name="F:EvoPdf.HorizontalTextAlign.Justify">
            <summary>
            Align justify.
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlConvertException">
            <summary>
            This class represents an exception thrown by the HTML to PDF Converter library.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlConvertException.#ctor(System.String)">
            <summary>
            Constructs an HTML converter exception with the given error message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:EvoPdf.HtmlConvertException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs an HTML converter exception with the given error message and the given inner exception object
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception that triggered this exception</param>
        </member>
        <member name="T:EvoPdf.HtmlDocumentInfo">
            <summary>
            This class encapsulates the information about a converted HTML document like 
            title, keywords, description and subject.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlDocumentInfo.HtmlDocTitle">
            <summary>
            The title of the converted HTML document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlDocumentInfo.HtmlDocKeywords">
            <summary>
            The keywords of the converted HTML document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlDocumentInfo.HtmlDocDescription">
            <summary>
            The description of the converted HTML document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlDocumentInfo.HtmlDocSubject">
            <summary>
            The subject of the converted HTML document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlDocumentInfo.HtmlDocAuthor">
            <summary>
            The author of the converted HTML document
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlElementMapping">
            <summary>
            Represents te mapping of a HTML element in the PDF document as collection of PDF 
            rectangles. A HTML element can span on many pages in the generated PDF document 
            and therefore, in general, many PDF rectangles are necessary to completely describe 
            the mapping of a HTML element in PDF
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementId">
            <summary>
            The ID in HTML of the HTML element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.MappingId">
            <summary>
            The mapping ID of the element given by the data-mapping-id HTML attribute
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.PdfRectangles">
            <summary>
            The rectangles occupied by the HTML element in the generated PDF document.
            A HTML element can span on many pages in the generated PDF document 
            and therefore, in general, many PDF rectangles are necessary to completely describe 
            the mapping of a HTML element in PDF.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementText">
            <summary>
            The text of the HTML element. If the element does not have an
            associated text, this property returns null
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementOuterHtml">
            <summary>
            The HTML code of the HTML element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementInnerHtml">
            <summary>
            The HTML code between the HTML tags of the HTML element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementTagName">
            <summary>
            The HTML tag name of the HTML element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementCssClassName">
            <summary>
            The CSS class name of the HTML element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementMapping.HtmlElementAttributes">
            <summary>
            The attributes of the HTML element
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlElementMappingsCollection">
            <summary>
            Represents a collection of mappings of HTML elements in PDF.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlElementMappingsCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:EvoPdf.HtmlElementMappingsCollection.GetElementByHtmlId(System.String)">
            <summary>
            Gets the mapping in PDF of the HTML element with the specified HTML ID.
            The search is case insensitive. 
            </summary>
            <param name="htmlElementId">The HTML ID of the element.</param>
            <returns>The mapping in PDF of the specified HTML element or null if no element 
            with the specified ID was found.</returns>
        </member>
        <member name="M:EvoPdf.HtmlElementMappingsCollection.GetElementByMappingId(System.String)">
            <summary>
            Gets the mapping in PDF of the HTML element with the mapping ID given by the special HTML attribute data-mapping-id.
            The search is case insensitive. 
            </summary>
            <param name="mappingId">The mapping ID of the element given by the data-mapping-id HTML attribute</param>
            <returns>The mapping in PDF of the specified HTML element or null if no element 
            with the specified mapping ID was found</returns>
        </member>
        <member name="M:EvoPdf.HtmlElementMappingsCollection.GetElementsByTagName(System.String)">
            <summary>
            Gets the mapping in PDF of the HTML elements with the specified HTML tag name.
            The search is case insensitive.
            </summary>
            <param name="htmlElementTagName">The HTML tag name of the element.</param>
            <returns>The mappings in PDF of the specified HTML elements or null if no element 
            with the specified tag name was found.</returns>
        </member>
        <member name="P:EvoPdf.HtmlElementMappingsCollection.Item(System.Int32)">
            <summary>
            Gets the mapping at the specified zero based index from collection.
            </summary>
            <param name="index">The zero based index of the mapping.</param>
            <returns>The mapping at the specified index in collection. Returns null 
            if the index is out of collection bounds.</returns>
        </member>
        <member name="P:EvoPdf.HtmlElementMappingsCollection.Count">
            <summary>
            Gets the number of HTML element mappings in this collection.
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlElementPdfRectangle">
            <summary>
            Represents the rectangle occupied by a HTML element in a page of the generated PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementPdfRectangle.PageIndex">
            <summary>
            The zero based index of the PDF page containing this rectangle. 
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementPdfRectangle.PdfPage">
            <summary>
            The PDF page containing this rectangle
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementPdfRectangle.Rectangle">
            <summary>
            The rectangle position inside the PDF page drawing area. The drawing area of the PDF page 
            does not include the page margins, header or footer. The rectangle dimensions are expressed 
            in points (1 point is 1/72 inch).
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlElementsMappingOptions">
            <summary>
            Defines the necessary API to retrieve the positions in the generated PDF document
            for the HTML elements specified in a list. The HTML elements to map are specified by
            the CSS selectors given by the <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementSelectors"/> property 
            or by the special HTML attributes in HTML document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementSelectors">
            <summary>
            This property is used to set an array containing the selectors of the HTML elements for which
            to retrieve position in PDF. 
            For example, the selector for all the image elements is "img", the selector for all the elements with the CSS class name 'myclass'
            is "*.myclass" and the selector for the elements with the id 'myid' is "*#myid".
            The elements mapping will be retrieved in the <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementsMappingResult"/> property after conversion.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementsMappingOptions.MapHiddenElements">
            <summary>
            A flag indicating if the mapping of hidden elements is enabled. This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementsMappingResult">
            <summary>
            This property is set by the converter after conversion and returns the mapping of the HTML elements 
            selected by the <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementSelectors"/> selectors. 
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlToImageElement">
            <summary>
            This class encapsulates a HTML to Image converter. The HTML to Image conversion is performed 
            when the element is added to a PDF page. The resulted image is embedded in the PDF document.
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToImageElement.DEFAULT_HTML_VIEWER_WIDTH_PX">
            <summary>
            The default virtual browser width in pixels
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToImageElement.AUTO_HTML_VIEWER_HEIGHT_PX">
            <summary>
            The default virtual browser height in pixels is set to autodetect the HTML content height.
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToImageElement.AVAILABLE_PDF_WIDTH_POINTS">
            <summary>
            The default width in PDF of the element is set to available width in PDF page.
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToImageElement.AUTO_PDF_HEIGHT_POINTS">
            <summary>
            The default width in PDF of the element is set to available width in PDF page.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.String,System.String)">
            <summary>
            Creates a HTML string to image converter element that will be rendered at the (0,0) location in PDF page using a base URL to resolve the external resources. 
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.String)">
            <summary>
            Creates a URL to image converter element at the (0,0) location in PDF page.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to image converter element at the specified x and y coordinates in PDF page using a base URL to resolve the external resources.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.String)">
            <summary>
            Creates a URL to image converter element at the specified x and y coordinates in PDF page.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to image converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a URL to image converter element at the specified x and y coordinates with the specified
            width. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to image converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or auomatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates a URL to image converter element at the specified x and y coordinates with the specified
            width and height. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or auomatic page breaks.</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.Int32)">
            <summary>
            Create a HTML string to image converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources. The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width. When this parameter is less or equal 0, the
            converter will try to auto-determine the HTML page width from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.String,System.Int32)">
            <summary>
            Creates a URL to image converter element at the specified x and y coordinates with the specified
            width. The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width. When this parameter is less or equal 0, the
            converter will try to auto-determine the HTML page width from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML string to image converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources. The virtual browser width and height in pixels is specified by 
            the htmlViewerWidth and htmlViewerHeight parameters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or auomatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width. When this parameter is less or equal 0, the
            converter will try to auto-determine the HTML page width from the HTMl document content.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window `
            with the specified width and height. When this parameter is less or equal 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML string to image converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources and a document URL to resolve the internal links. The virtual browser width and height in pixels is specified by 
            the htmlViewerWidth and htmlViewerHeight parameters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or auomatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width. When this parameter is less or equal 0, the
            converter will try to auto-determine the HTML page width from the HTML document content.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window `
            with the specified width and height. When this parameter is less or equal 0, the converter will try to auto-determine the 
            HTML page height from HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32,System.Int32)">
            <summary>
            Create a URL to image converter element at the specified x and y coordinates with the specified
            width and height. The virtual browser width and height in pixels are specified by the 
            htmlViewerWidth and htmlViewerHeight paramenters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or auomatic page breaks.</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width. When this parameter is less or equal 0, the
            converter will try to auto-determine the HTML page width from HTML document content.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window `
            with the specified width and height. When this parameter is less or equal 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Create a URL to image converter element at the specified x and y coordinates with the specified
            width and height using a document URL to resolve the internal links. The virtual browser width and height in pixels are specified by the 
            htmlViewerWidth and htmlViewerHeight paramenters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or auomatic page breaks.</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width. When this parameter is less or equal 0, the
            converter will try to auto-determine the HTML page width from the HTML document content.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window `
            with the specified width and height. When this parameter is less or equal 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML document. This parameter 
            is necessary when the converted URL is not the full URL of a document.
            </param>
        </member>
        <member name="E:EvoPdf.HtmlToImageElement.PrepareRenderPdfPageEvent">
            <summary>
            The event is raised after the HTML to Image element created the PDF page and before starting rendering it. 
            In the handler of this event the PDF page configuration like size, orientation, header or footer can still be changed 
            before starting rendering.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToImageElement.BeforeRenderPdfPageEvent">
            <summary>
            The event is raised right before the page is rendered by HTML to Image element. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the background of the PDF page to be rendered.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToImageElement.AfterRenderPdfPageEvent">
            <summary>
            The event is raised right after the HTML to Image element finished PDF page rendering. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the foreground of the rendered PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HtmlViewerWidth">
            <summary>
            Gets or sets the preferred HTML viewer width in pixels of the HTML to Image element. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToImageElement.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToImageElement.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The HTML viewer width can also be specified in the <see cref="T:EvoPdf.HtmlToImageElement"/> class constructor. The default value is 1024 pixels.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HtmlViewerHeight">
            <summary>
            Gets or sets the HTML viewer height in pixels of the HTML to Image element. 
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and 
            the HTML viewer width in order to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToImageElement.HtmlViewerWidth"/> property of the <see cref="T:EvoPdf.HtmlToImageElement"/> class. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToImageElement.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer height can also be specified in the <see cref="T:EvoPdf.HtmlToImageElement"/> class contructor. The default value is 0 to automatically determine
            the HTML viewer height based on the HTML content and the HTML viewer width.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Url">
            <summary>
            Gets or sets the URL of the HTML document to be converted to image
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Html">
            <summary>
            Gets or sets the HTML string to be converted to image
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.BaseUrl">
            <summary>
            Gets or sets the base URL of the HTML string to be converted to image
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.X">
            <summary>
            Gets or sets the x position in points where the rendered image will be placed in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Y">
            <summary>
            Gets or sets the y position in points where the rendered image will be placed in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Width">
            <summary>
            Gets or sets the destination width in points of the rendered image. If the specified width is less or equal to 0,
            the destination width will be given by the available width in page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Height">
            <summary>
            Gets or sets the destination height in points of the rendered image. If the specified height is less or equal to 0,
            the destination height will be auto determined so all the content can be rendered.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.TopSpacing">
            <summary>
            A space in points to introduce at the top of PDF pages where the HTML is rendered to image. 1 point is 1/72 inch. By default the top spacing is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.BottomSpacing">
            <summary>
            A space in points to introduce at the bottom of PDF pages where the HTML is rendered to image. 1 point is 1/72 inch. By default the bottom spacing is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.ClipHtmlView">
            <summary>
            If the HTML content is not entirely visible in the HTML viewer of the HTML to Image element at the specified width, the <see cref="P:EvoPdf.HtmlToImageElement.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer width is given by the HtmlViewerWidth property. 
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.FitWidth">
            <summary>
            When this property is true the resulted image will be resized if necessary to fit the available width in PDF page.
            When false the image will be rendered at the real size. By default this property is true and 
            the image will be resized if necessary to fit the available width in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.FitHeight">
            <summary>
            When this property is true the resulted image will be resized if necessary to fit the available height in PDF page.
            By default this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.StretchToFit">
            <summary>
            This property has effect in HTML to Image element only when <see cref="P:EvoPdf.HtmlToImageElement.FitWidth"/> property is true. When <see cref="P:EvoPdf.HtmlToImageElement.FitWidth"/> is true and this property is true 
            the HTML content will be stretched if necessary to fit the available width in PDF page.
            By default this property is false and the content will not be stretched to fit the available width in PDF page. 
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.InsertNewPagesMode">
            <summary>
            A flag indicating if the HTML to Image element will always insert a new page in the PDF document when rendering next page 
            instead of trying to use an already existing PDF page. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.LiveUrlsEnabled">
            <summary>
            When true this options instructs the HTML to Image element converter to convert the HTML links to PDF links. 
            The default value is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.InteractiveHiddenElements">
            <summary>
            A flag indicating if the interactive features are enabled for hidden HTML elements. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.InternalLinksEnabled">
            <summary>
            When true this options instructs the HTML to Image element converter to convert the internal HTML links to internal PDF links. 
            The default value is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.JavaScriptEnabled">
            <summary>
            A flag indicating if JavaScript execution is enabled in the HTML to Image element converter. 
            The default is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Enable3DTransformations">
            <summary>
            Gets or sets a flag indicating if the accelerated CSS 3D transformations are enabled in the HTML to Image element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.EnableWebGL">
            <summary>
            Gets or sets a flag indicating if the WebGL is enabled in the HTML to Image element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.EnableAccelerated2DCanvas">
            <summary>
            Gets or sets a flag indicating if the accelerated 2D canvas is enabled in the HTML to Image element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.Paginate">
            <summary>
            When this property is true the HTML to Image element can be paginated to render many PDF pages if necessary.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HttpPostFields">
            <summary>
            Returns the collection of HTTP POST fields to be used when accessing a web page in HTML to Image element.
            If there are elements in collection then the converter will make a POST request to the web page URL 
            with the fields from this collection, otherwise it will make a GET request
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.MediaType">
            <summary>
            Gets or sets the media type of the HTML document used by the HTML to Image element. The default media type is 'screen'. 
            If you set this property with 'print' then the CSS properties defined in '@media print' rule will be used to render the document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.SvgFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the SVG fonts are enabled in HTML in the HTML to Image element converter. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.WebFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the Web Fonts are enabled in HTML  in the HTML to Image element converter. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.ExtensionsEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML viewer extensions are executed in the HTML to Image element converter. The default value is false and no extension is executed.
            The Flash player for Google Chrome must be installed in order to execute the flash content from HTML
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.DownloadAllResources">
            <summary>
            Gets or sets a flag indicating if the HTML to Image element should try to download all the resources even if this could cause
            a slower conversion. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.PrerenderEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML to Image element should perform a pre-rendering. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.InterruptSlowJavaScript">
            <summary>
            Gets or sets a flag indicating if the slow JavaScript script should be interrupted in HTML to Image element converter. The default value is false and the scripts are not interrupted
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.RenderedHtmlElementSelector">
            <summary>
            Get or set the CSS selector of the HTML element to be rendered by the HTML to Image element. If the selector selects multiple HTML elements, 
            only the the first one will be converted. The CSS selector is case sensitive. If this property is not set then the entire 
            HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.MaxHtmlViewerHeight">
            <summary>
            Gets or sets the maximum height in pixels to be rendered from the HTML document by the HTML to Image element.
            The default value is 0 and the entire HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.MinHtmlViewerHeight">
            <summary>
            Gets or sets the minimum height in pixels to be rendered from HTML document by the HTML to Image element.
            This value of this property is ignored if the HtmlViewerHeight property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.InitialHtmlViewerHeight">
            <summary>
            Gets or sets the initial height in pixels of the HTML viewer in HTML to Image element.
            This value of this property is ignored if the HtmlViewerHeight property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.DefaultHtmlEncoding">
            <summary>
            The default HTML document text encoding to be used if there is no charset meta tag defined in the HTML document. By default this property is not set
            and an auto determined text encoding will be used by converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.ImagePartSize">
            <summary>
            Gets or sets the maximum height in pixels of an image part in HTML to Image element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.TriggeringMode">
            <summary>
            The conversion triggering mode used by the HTML to Image element converter. The default value is Auto
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.ConversionDelay">
            <summary>
            An additional time in seconds to wait for asynchronous items to be completely loaded or for a web page redirect to finish before
            starting the rendering in HTML to Image element.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.NavigationTimeout">
            <summary>
            The HTML to Image element converter navigation timeout in seconds. Default value is 60.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HttpRequestHeaders">
            <summary>
            Gets a collection of custom HTTP headers to be sent by the HTML to Image element converter to the web server 
            when the web page is requested from a URL. A custom HTTP header is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToImageElement.HttpRequestHeaders"/> property.
            The <see cref="P:EvoPdf.HtmlToImageElement.PersistentHttpRequestHeaders"/> property can be set on true to instruct the converter to send the custom headers 
            each time an external resource (image, css, etc) referenced by the web page is requested. By default the <see cref="P:EvoPdf.HtmlToImageElement.PersistentHttpRequestHeaders"/>
            property is false and the custom headers are not automatically sent to the web server when the web page resources are requested.
            The custom HTTP headers can be used to define cookies, authentication options, URL referer or any other
            HTTP header to be sent to the web browser. The preferred method to send cookies is to use the <see cref="P:EvoPdf.HtmlToImageElement.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.PersistentHttpRequestHeaders">
            <summary>
            This property can be set on true to instruct the HTML to Image element converter to send the custom headers defined by the 
            HttpRequestHeaders property each time an external resource (image, css, etc) referenced by the web page is requested. 
            The default value of this property is true and the custom headers are automatically sent to the web server when the web page resources are requested.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HttpRequestCookies">
            <summary>
            Gets a collection of custom HTTP cookies to be sent by the HTML to Image element converter to the web server 
            when the web page to convert and the resources (image, css, etc) referenced by the web page are requested. A cookie is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToImageElement.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.XPSupplementalLanguages">
            <summary>
            A flag in HTML to Image element indicating if the supplemental languages (complex script, right-to-left, East Asian) support was enabled in Windows XP Regional and Language Options. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.AvoidImageBreak">
            <summary>
            When true this property instructs the HTML to Image element converter to try to avoid cutting off the images between PDF pages
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.AvoidHtmlElementsBreakSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to not be broken between PDF pages if possible when the HTML to Image element is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.PageBreakBeforeHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements before which to force a page break in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.PageBreakAfterHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements after which to force a page break in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.EvoInternalFileName">
            <summary>
            Sets the full path of evointernal.dat helper file of the HTML to Image element. By default this file is expected to be found 
            in the same folder with evohtmltopdf.dll assembly.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.ProxyOptions">
            <summary>
            Gets a reference to an object encapsulating the proxy options used by the HTML to Image element to access the HTML document to convert.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.AuthenticationOptions">
            <summary>
            This property can be set with an username and a password in order to authenticate to the web server
            before accessing the URL to be converted in HTML to Image element. They can be used for example to resolve the IIS Integrated Windows Authentication
            or other types of IIS authentication.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.ImpersonationOptions">
            <summary>
            The impersonation options applied during navigation in HTML to Image element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.PdfBookmarkOptions">
            <summary>
            Gets a reference to the object controlling the bookmarks creation in PDF for the HTML to Image element.
            In order to enable creation of bookmarks you have to set the <see cref="P:EvoPdf.PdfBookmarkOptions.HtmlElementSelectors"/> property of <see cref="T:EvoPdf.PdfBookmarkOptions"/> class
            with the CSS selectors of the HTML elements you want to bookmark.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HtmlElementsMappingOptions">
            <summary>
            Gets a reference to the object that can be used to obtain the position in PDF of the HTML elements rendered by the HTML to Image element.
            In order to retrieve the position in PDF for a list of HTML elements, the <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementSelectors"/> property of 
            <see cref="T:EvoPdf.HtmlElementsMappingOptions"/> class must be set with an array of strings containing the CSS selectors of the HTML elements you want to map.
            The positions of the HTML elements in the generated PDF document will be returned in the 
            <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementsMappingResult"/> object after the element was added to the page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.RenderedPagesRectangles">
            <summary>
            The bounds of the rectangle rendered in each PDF page by the HTML to Image element. This property is assigned
            after the element has been added to a PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageElement.HtmlDocumentInfo">
            <summary>
            Gets an object populated after conversion with the title, keywords, and description of the converted HTML document rendered by the HTML to Image element.
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlToPdfElement">
            <summary>
            This class encapsulates a HTML to PDF converter functionality. Objects of this class can be added at any location in a PDF page or Template to render HTML.
            The conversion is performed when the element is added to a page or Template.
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToPdfElement.DEFAULT_HTML_VIEWER_WIDTH_PX">
            <summary>
            The default virtual browser width in pixels
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToPdfElement.AUTO_HTML_VIEWER_HEIGHT_PX">
            <summary>
            The default virtual browser height in pixels is set to autodetect the HTML content height.
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToPdfElement.AVAILABLE_PDF_WIDTH_POINTS">
            <summary>
            The default width in PDF of the element is set to available width in PDF page.
            </summary>
        </member>
        <member name="F:EvoPdf.HtmlToPdfElement.AUTO_PDF_HEIGHT_POINTS">
            <summary>
            The default width in PDF of the element is set to available width in PDF page.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element that will be rendered at the (0,0) location in PDF page using a base URL to resolve the external resources. 
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element that will be rendered at the (0,0) location in PDF page 
            using a base URL to resolve the external resources and a document URL to resolve the internal links. 
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.String)">
            <summary>
            Creates an URL to PDF converter element at the (0,0) location in PDF page.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates in PDF page using a base URL to resolve the external resources.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates in PDF page
            using a base URL to resolve the external resources and a document URL to resolve the internal links.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.String)">
            <summary>
            Creates an URL to PDF converter element at the specified x and y coordinates in PDF page.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources and a document URL to resolve the internal links. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates an URL to PDF converter element at the specified x and y coordinates with the specified
            width. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources and a document URL to resolve the internal links. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates an URL to PDF converter element at the specified x and y coordinates with the specified
            width and height. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources. The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources and a document URL to resolve the internal links. 
            The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.String,System.Int32)">
            <summary>
            Creates an URL to PDF converter element at the specified x and y coordinates with the specified
            width. The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources. The virtual browser width and height in pixels is specified by 
            the htmlViewerWidth and htmlViewerHeight parameters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window
            with the specified width and height. When this parameter is less or equal to 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources and a document URL to resolve the internal links. 
            The virtual browser width and height in pixels is specified by the htmlViewerWidth and htmlViewerHeight parameters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window
            with the specified width and height. When this parameter is less or equal to 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a URL to PDF converter element at the specified x and y coordinates with the specified
            width and height. The virtual browser width and height in pixels are specified by the 
            htmlViewerWidth and htmlViewerHeight paramenters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window
            with the specified width and height. When this parameter is less or equal to 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a URL to PDF converter element at the specified x and y coordinates with the specified
            width and height using a document URL to resolve the internal links. The virtual browser width and height in pixels are specified by the 
            htmlViewerWidth and htmlViewerHeight paramenters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="urlToConvert">The URL to convert to PDF</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window
            with the specified width and height. When this parameter is less or equal to 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML document. This parameter 
            is necessary when the converted URL is not the full URL of a document.
            </param>
        </member>
        <member name="E:EvoPdf.HtmlToPdfElement.PrepareRenderPdfPageEvent">
            <summary>
            The event is raised after the HTML to PDF element created the PDF page and before starting rendering it. 
            In the handler of this event the PDF page configuration like size, orientation, header or footer can still be changed 
            before starting rendering.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToPdfElement.BeforeRenderPdfPageEvent">
            <summary>
            The event is raised right before the page is rendered by HTML to PDF element. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the background of the PDF page to be rendered.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToPdfElement.AfterRenderPdfPageEvent">
            <summary>
            The event is raised right after the HTML to PDF element finished PDF page rendering. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the foreground of the rendered PDF page.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToPdfElement.NavigationCompletedEvent">
            <summary>
            The event is raised right after the converter finished the navigation and before rendering HTML content to PDF
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HtmlViewerWidth">
            <summary>
            Gets or sets the preferred HTML viewer width in pixels of the HTML to PDF element. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToPdfElement.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToPdfElement.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The HTML viewer width can also be specified in the <see cref="T:EvoPdf.HtmlToPdfElement"/> class constructor. The default value is 1024 pixels.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HtmlViewerHeight">
            <summary>
            Gets or sets the HTML viewer height in pixels of the HTML to PDF element. 
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and 
            the HTML viewer width in order to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToPdfElement.HtmlViewerWidth"/> property of the <see cref="T:EvoPdf.HtmlToPdfElement"/> class. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToPdfElement.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer height can also be specified in the <see cref="T:EvoPdf.HtmlToPdfElement"/> class contructor. The default value is 0 to automatically determine
            the HTML viewer height based on the HTML content and the HTML viewer width.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Url">
            <summary>
            Gets or sets the URL of the HTML document to be converted to PDF
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Html">
            <summary>
            Gets or sets the HTML string to be converted to PDF
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.BaseUrl">
            <summary>
            Gets or sets the base URL of the HTML string to be converted to PDF
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.X">
            <summary>
            Gets or sets the x position in points where the rendered content will be placed in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Y">
            <summary>
            Gets or sets the y position in points where the rendered content will be placed in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Width">
            <summary>
            Gets or sets the destination width in points of the rendered content. If the specified width is less or equal to 0,
            the destination width will be given by the available width in page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Height">
            <summary>
            Gets or sets the destination height in points of the rendered content. If the specified height is less or equal to 0,
            the destination height will be auto determined so all the content can be rendered.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.TopSpacing">
            <summary>
            A space in points to introduce at the top of PDF pages where the HTML element is rendered. 1 point is 1/72 inch. By default the top spacing is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.BottomSpacing">
            <summary>
            A space in points to introduce at the bottom of PDF pages where the HTML element is rendered. 1 point is 1/72 inch. By default the bottom spacing is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ClipHtmlView">
            <summary>
            If the HTML content is not entirely visible in the HTML viewer of the HTML to PDF element at the specified width, the <see cref="P:EvoPdf.HtmlToPdfElement.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToPdfElement.HtmlViewerWidth"/> property. 
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.AvoidTextBreak">
            <summary>
            When true this property instructs the HTML to PDF element converter to try to
            avoid cutting off the text between PDF pages. This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.AvoidImageBreak">
            <summary>
            When true this property instructs the HTML to PDF element converter to try to avoid cutting off the images between PDF pages
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.AvoidHtmlElementsBreakSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to not be broken between PDF pages if possible when the HTML to PDF element is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PageBreakBeforeHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements before which to force a page break in PDF document when the HTML to PDF element is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PageBreakAfterHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements after which to force a page break in PDF document when the HTML to PDF element is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.FitWidth">
            <summary>
            When this property is true the content produced by the HTML to PDF element will be resized if necessary to fit the available width in PDF page.
            When false the HTML content will be rendered at the real size. By default this property is true and 
            the content will be resized if necessary to fit the available width in PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.FitHeight">
            <summary>
            When this property is true the content produced by the HTML to PDF element will be resized if necessary to fit the available height in PDF page.
            By default this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.StretchToFit">
            <summary>
            This property has effect in HTML to PDF element only when <see cref="P:EvoPdf.HtmlToPdfElement.FitWidth"/> property is true. When <see cref="P:EvoPdf.HtmlToPdfElement.FitWidth"/> is true and this property is true 
            the HTML content will be stretched if necessary to fit the available width in PDF page.
            By default this property is false and the content will not be stretched to fit the available width in PDF page. 
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.LiveUrlsEnabled">
            <summary>
            When true this options instructs the HTML to PDF element to convert the HTML links to PDF links. 
            The default value is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.InteractiveHiddenElements">
            <summary>
            A flag indicating if the interactive features are enabled for hidden HTML elements. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.InternalLinksEnabled">
            <summary>
            When true this options instructs the HTML to PDF element to convert the internal HTML links to internal PDF links. 
            The default value is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.JavaScriptEnabled">
            <summary>
            A flag indicating if JavaScript execution is enabled in HTML to PDF element converter. 
            The default is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Enable3DTransformations">
            <summary>
            Gets or sets a flag indicating if the accelerated CSS 3D transformations are enabled in the HTML to PDF element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.EnableWebGL">
            <summary>
            Gets or sets a flag indicating if the WebGL is enabled in the HTML to PDF element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.EnableAccelerated2DCanvas">
            <summary>
            Gets or sets a flag indicating if the accelerated 2D canvas is enabled in the HTML to PDF element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.Paginate">
            <summary>
            When this property is true the HTML to PDF element can be paginated to render many PDF pages if necessary.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.EmbedFonts">
            <summary>
            When true this options instructs the HTML to PDF element converter to embed all the true type fonts into the PDF document. 
            The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HttpPostFields">
            <summary>
            Returns the collection of HTTP POST fields to be used when accessing a web page in HTML to PDF element.
            If there are elements in collection then the converter will make a POST request to the web page URL 
            with the fields from this collection, otherwise it will make a GET request
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.MediaType">
            <summary>
            Gets or sets the media type of the HTML document used by the HTML to PDF element. The default media type is 'screen'. 
            If you set this property with 'print' then the CSS properties defined in '@media print' rule will be used to render the document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.SvgFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the SVG fonts are enabled in the HTML to PDF element converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.WebFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the Web Fonts are enabled in the HTML to PDF element converter. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PostScriptFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the fonts with PostScript outlines are enabled in the HTML to PDF element converter. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ExtensionsEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML viewer extensions are executed in HTML to PDF element converter. The default value is false and no extension is executed.
            The Flash player for Google Chrome must be installed in order to execute the flash content from HTML
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.DownloadAllResources">
            <summary>
            Gets or sets a flag indicating if the HTML to PDF element should try to download all the resources even if this could cause
            a slower conversion. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PrerenderEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML to PDF element should perform a pre-rendering. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.InterruptSlowJavaScript">
            <summary>
            Gets or sets a flag indicating if the slow JavaScript script should be interrupted in the HTML to PDF element converter. The default value is false and the scripts are not interrupted
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HiddenHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to be excluded from rendering in HTML to PDF element
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.RenderedHtmlElementSelector">
            <summary>
            Get or set the CSS selector of the HTML element to be rendered by the HTML to PDF element converter. If the selector selects multiple HTML elements, 
            only the the first one will be converted. The CSS selector is case sensitive. If this property is not set then the entire 
            HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.MaxHtmlViewerHeight">
            <summary>
            Gets or sets the maximum height in pixels to be rendered from the HTML document by the HTML to PDF element converter.
            The default value is 0 and the entire HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.MinHtmlViewerHeight">
            <summary>
            Gets or sets the minimum height in pixels to be rendered from HTML document by the HTML to PDF element converter.
            This value of this property is ignored if the <see cref="P:EvoPdf.HtmlToPdfElement.HtmlViewerHeight"/> property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.InitialHtmlViewerHeight">
            <summary>
            Gets or sets the initial height in pixels of the HTML viewer in HTML to PDF element converter.
            This value of this property is ignored if the <see cref="P:EvoPdf.HtmlToPdfElement.HtmlViewerHeight"/> property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.DefaultHtmlEncoding">
            <summary>
            The default HTML document text encoding to be used if there is no charset meta tag defined in the HTML document. By default this property is not set
            and an auto determined text encoding will be used by converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ImagePartSize">
            <summary>
            Gets or sets the maximum height in pixels of an image part in HTML to PDF element converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.TriggeringMode">
            <summary>
            The conversion triggering mode used by HTML to PDF element converter. The default value is <see cref="F:EvoPdf.TriggeringMode.Auto"/>
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ConversionDelay">
            <summary>
            An additional time in seconds to wait for asynchronous items to be completely loaded or for a web page redirect to finish before
            starting the rendering in HTML to PDF element converter.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.NavigationTimeout">
            <summary>
            The HTML to PDF element converter navigation timeout in seconds. Default value is 60.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HttpRequestHeaders">
            <summary>
            Gets a collection of custom HTTP headers to be sent by the HTML to PDF element converter to the web server 
            when the web page is requested from a URL. A custom HTTP header is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToPdfElement.HttpRequestHeaders"/> property.
            The <see cref="P:EvoPdf.HtmlToPdfElement.PersistentHttpRequestHeaders"/> property can be set on true to instruct the converter to send the custom headers 
            each time an external resource (image, css, etc) referenced by the web page is requested. By default the <see cref="P:EvoPdf.HtmlToPdfElement.PersistentHttpRequestHeaders"/>
            property is false and the custom headers are not automatically sent to the web server when the web page resources are requested.
            The custom HTTP headers can be used to define cookies, authentication options, URL referer or any other
            HTTP header to be sent to the web browser. The preferred method to send cookies is to use the <see cref="P:EvoPdf.HtmlToPdfElement.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PersistentHttpRequestHeaders">
            <summary>
            This property can be set on true to instruct the HTML to PDF element converter to send the custom headers defined by the 
            <see cref="P:EvoPdf.HtmlToPdfElement.HttpRequestHeaders"/> property each time an external resource (image, css, etc) referenced by the web page is requested. 
            The default value of this property is true and the custom headers are automatically sent to the web server when the web page resources are requested.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HttpRequestCookies">
            <summary>
            Gets a collection of custom HTTP cookies to be sent by the HTML to PDF element converter to the web server 
            when the web page to convert and the resources (image, css, etc) referenced by the web page are requested. A cookie is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToPdfElement.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.XPSupplementalLanguages">
            <summary>
            A flag in HTML to PDF element indicating if the supplemental languages (complex script, right-to-left, East Asian) support was enabled in Windows XP Regional and Language Options. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.TiledRenderingEnabled">
            <summary>
            A flag indicating if rendering of HTML document is tiled in HTML to PDF element.
            This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.InsertNewPagesEnabled">
            <summary>
            A flag indicating if the HTML to PDF element will always insert a new page in the PDF document when rendering next page 
            instead of trying to use an already existing PDF page. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.EnhancedGraphicsQuality">
            <summary>
            A flag indicating the PDF graphics are rendered at the best quality by HTML to PDF element.
            The default property value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.TransparentImagesEnabled">
            <summary>
            A flag indicating if the HTML to PDF element converter uses transparency information of the images.
            The default property value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ImagesScalingEnabled">
            <summary>
            A flag indicating if the images scaling is allowed in HTML to PDF element.
            The default property value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.NoSizeElementsEnabled">
            <summary>
            A flag indicating if the hidden elements are rendered by the HTML to PDF element.
            The default property value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.TableHeaderRepeatEnabled">
            <summary>
            Get or sets a flag indicating if the repeating of the HTML table header in PDF pages generated by the HTML to PDF element is enabled. Default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.TableFooterRepeatEnabled">
            <summary>
            Get or sets a flag indicating if the repeating of the HTML table footer in PDF pages generated by the HTML to PDF element is enabled. Default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.EvoInternalFileName">
            <summary>
            Sets the full path of evointernal.dat helper file of the HTML to PDF element. By default this file is expected to be found 
            in the same folder with evohtmltopdf.dll assembly.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ProxyOptions">
            <summary>
            Gets a reference to an object encapsulating the proxy options used by HTML to PDF element to access the HTML document to convert.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.AuthenticationOptions">
            <summary>
            The AuthenticationOptions can be set with an username and a password in order to authenticate to the web server
            before accessing the URL to be converted in HTML to PDF element converter. They can be used for example to resolve the IIS Integrated Windows Authentication
            or other types of IIS authentication. They cannot be used to resolve ASP.NET Forms Authentication
            or a custom authentication method defined at application level.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.ImpersonationOptions">
            <summary>
            The impersonation options applied during navigation by HTML to PDF element converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PdfBookmarkOptions">
            <summary>
            Gets a reference to the object controlling the bookmarks creation in PDF for the HTML to PDF element.
            In order to enable creation of bookmarks you have to set the <see cref="P:EvoPdf.PdfBookmarkOptions.HtmlElementSelectors"/> property of <see cref="T:EvoPdf.PdfBookmarkOptions"/> class
            with the CSS selectors of the HTML elements you want to bookmark.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.PdfFormOptions">
            <summary>
            Gets a reference to the object controlling the automatic conversion of a HTML form to a PDF form in the generated PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HtmlElementsMappingOptions">
            <summary>
            Gets a reference to the object that can be used to obtain the position in PDF of the HTML elements rendered by the HTML to PDF element.
            In order to retrieve the position in PDF for a list of HTML elements, the <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementSelectors"/> property of 
            <see cref="T:EvoPdf.HtmlElementsMappingOptions"/> class must be set with an array of strings containing the CSS selectors of the HTML elements you want to map.
            The positions of the HTML elements in the generated PDF document will be returned in the 
            <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementsMappingResult"/> object after the element was added to the page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.RenderedPagesRectangles">
            <summary>
            The bounds of the rectangle rendered in each PDF page by the HTML to PDF element. This property is assigned
            after the element has been added to a PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfElement.HtmlDocumentInfo">
            <summary>
            Gets an object populated after conversion with the title, keywords, and description of the HTML document rendered by the HTML to PDF element.
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlToPdfVariableElement">
            <summary>
            This class encapsulates a HTML to PDF converter functionality. Objects of this class can be added at any location in a <see cref="T:EvoPdf.Template"/> to render HTML.
            A conversion is performed for each PDF page where the Template is rendered.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element that will be rendered at the (0,0) location in PDF page using a base URL to resolve the external resources. 
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element that will be rendered at the (0,0) location in PDF page
            using a base URL to resolve the external resources and a document URL to resolve the internal links. 
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates in PDF page using a base URL to resolve the external resources.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates in PDF page
            using a base URL to resolve the external resources and a document URL to resolve the internal links.
            The width of element in PDF page is the available width in PDF page and the height is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources and a document URL to resolve the internal links. The height in PDF is auto determined.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources and a document URL to resolve the internal links. 
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources. The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width using a base URL to resolve the external resources and a document URL to resolve the internal links. The height in PDF is auto determined. The virtual browser width in pixels is specified by the htmlViewerWidth parameter.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources. The virtual browser width and height in pixels is specified by 
            the htmlViewerWidth and htmlViewerHeight parameters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window
            with the specified width and height. When this parameter is less or equal to 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfVariableElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a HTML string to PDF converter element at the specified x and y coordinates with the specified
            width and height using a base URL to resolve the external resources and a document URL to resolve the internal links. The virtual browser width and height in pixels is specified by 
            the htmlViewerWidth and htmlViewerHeight parameters.
            </summary>
            <param name="x">The x position in points where the rendered content will be placed </param>
            <param name="y">The y position in points where the rendered content will be placed</param>
            <param name="width">The destination width in points  for the rendered content. If the specified with is less or equal 0,
            the destination width will be given by the available width in page</param>
            <param name="height">The destination height in points  for the rendered content. If the specified height is less or equal 0,
            the destination height will be auto determined so all the content can be rendered. Please note that the specified height is 
            the effective height that will be rendered in the PDF document and does not include for example 
            the empty spaces introduced by custom or automatic page breaks.</param>
            <param name="htmlStringToConvert">The HTML string convert to PDF.</param>
            <param name="htmlStringBaseURL">The full URL of the page from where this string was taken used to resolve the images and CSS
            files referenced by a relative URL in the HTML string. This parameter is optional and the default value is NULL.
            When this parameter is NULL no base URL will be used.</param>
            <param name="internalLinksBaseUrl">The full URL of the document referenced by the internal links from the HTML string. 
            </param>
            <param name="htmlViewerWidth">The virtual browser width in pixels. The default value is 1024 pixels. The effect of this parameter
            is similar with viewing the HTML page in a browser window with the specified width.</param>
            <param name="htmlViewerHeight">The virtual browser height in pixels. The default value is 0 which means the height will
            be auto-determined. The effect of this parameter is similar with viewing the HTML page in a browser window
            with the specified width and height. When this parameter is less or equal to 0, the converter will try to auto-determine the 
            HTML page height from the HTML document content.</param>
        </member>
        <member name="E:EvoPdf.HtmlToPdfVariableElement.BeforeRenderInPageEvent">
            <summary>
            This event is raised right before the variable HTML is rendered in a PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfVariableElement.Html">
            <summary>
            Gets or sets the variable HTML string to be converted to PDF 
            </summary>
        </member>
        <member name="T:EvoPdf.BeforeRenderInPageDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.HtmlToPdfVariableElement.BeforeRenderInPageEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.BeforeRenderInPageParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.HtmlToPdfVariableElement.BeforeRenderInPageEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderInPageParams.Page">
            <summary>
            The PDF page where the variable HTML is currently rendered
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderInPageParams.PageNumber">
            <summary>
            The number in PDF document of the PDF page where the variable HTML is currently rendered
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderInPageParams.PageCount">
            <summary>
            The total number of PDF pages in the PDF document being rendered
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderInPageParams.VariableHtmlElement">
            <summary>
            The HtmlToPdfVariableElement which triggered this event
            </summary>
        </member>
        <member name="T:EvoPdf.ImageElement">
            <summary>
            Objects of this class can be added to a PDF document to render images
            </summary>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor">
            <summary>
            Constructs an empty image element. The InitPdfImage method must be called after construction to initialize the image element
            </summary>
        </member>
        <member name="M:EvoPdf.ImageElement.InitPdfImage(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes an image element from a file. This method must be called on empty image elements
            </summary>
            <param name="x">The image element X coordinate in points</param>
            <param name="y">The image element Y coordinate in points</param>
            <param name="width">The image element width in points</param>
            <param name="imageFile">The full path of the image file</param>
        </member>
        <member name="M:EvoPdf.ImageElement.InitPdfImage(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes an image element from a file keeping the aspect ratio. This method must be called on empty image elements
            </summary>
            <param name="x">The image element X coordinate in points</param>
            <param name="y">The image element Y coordinate in points</param>
            <param name="width">The image element width in points</param>
            <param name="height">The image element height in points</param>
            <param name="imageFile">The full path of the image file</param>
        </member>
        <member name="M:EvoPdf.ImageElement.InitPdfImage(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
            <summary>
            Initializes an image element from a file. This method must be called on empty image elements
            </summary>
            <param name="x">The image element X coordinate in points</param>
            <param name="y">The image element Y coordinate in points</param>
            <param name="width">The image element width in points</param>
            <param name="height">The image element height in points</param>
            <param name="keepAspectRatio">A flag indicating if the aspect ratio of the image is kept when the image is rendered in PDF</param>
            <param name="imageFile">The full path of the image file</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.String)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> object from the specified file that will be rendered at the position (x,y)
            with the width equal to available width in page and the height auto determined to keep the initial aspect ratio.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="filePath">The image file path</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> object from the specified file that will be rendered at the position (x,y)
            with the specified width destWidth and the height auto determined to keep the initial aspect ratio.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="destWidth">The destination rectangle width</param>
            <param name="filePath">The image file path</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Drawing.Image)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> object from the specified <see cref="T:System.Drawing.Image"/> object that will be rendered at the position (x,y)
            with a width equal to the available space in page and the height auto determined to keep the aspect ratio.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="imageObj">The image file path</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Single,System.Drawing.Image)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> object from the specified <see cref="T:System.Drawing.Image"/> object that will be rendered at the position (x,y)
            with the specified width destWidth and the height auto determined to keep the aspect ratio.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="destWidth">The destination rectangle width</param>
            <param name="imageObj">The image file path</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> from the specified file that will be rendered at the position (x,y)
            with the (destWidth,destHeight) size keeping the aspect ratio.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="destWidth">The destination rectangle width</param>
            <param name="destHeight">The destination rectangle height</param>
            <param name="filePath">The image file path</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> from the specified file that will be rendered at the position (x,y)
            with the (destWidth,destHeight) size.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="destWidth">The destination rectangle width</param>
            <param name="destHeight">The destination rectangle height</param>
            <param name="keepAspectRatio">A flag indicating if the aspect ratio of the image is kept when the image is rendered in PDF</param>
            <param name="filePath">The image file path</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.Drawing.Image)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> object from the specified <see cref="T:System.Drawing.Image"/> object that will be rendered at the position (x,y)
            with the (destWidth,destHeight) size keeping the apect ratio.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="destWidth">The destination rectangle width</param>
            <param name="destHeight">The destination rectangle height</param>
            <param name="imageObj">The System.Drawing.Image object</param>
        </member>
        <member name="M:EvoPdf.ImageElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Drawing.Image)">
            <summary>
            Creates an <see cref="T:EvoPdf.ImageElement"/> object from the specified <see cref="T:System.Drawing.Image"/> object that will be rendered at the position (x,y)
            with the (destWidth,destHeight) size.
            </summary>
            <param name="x">The X location where this element will be rendered</param>
            <param name="y">The Y location where this element will be rendered</param>
            <param name="destWidth">The destination rectangle width</param>
            <param name="destHeight">The destination rectangle height</param>
            <param name="keepAspectRatio">A flag indicating if the aspect ratio of the image is kept when the image is rendered in PDF</param>
            <param name="imageObj">The System.Drawing.Image object</param>
        </member>
        <member name="E:EvoPdf.ImageElement.PrepareRenderPdfPageEvent">
            <summary>
            The event is raised after the Image element created the PDF page and before starting rendering it. 
            In the handler of this event the PDF page configuration like size, orientation, header or footer can still be changed 
            before starting rendering.
            </summary>
        </member>
        <member name="E:EvoPdf.ImageElement.BeforeRenderPdfPageEvent">
            <summary>
            The event is raised right before the page is rendered by Image element. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the background of the PDF page to be rendered.
            </summary>
        </member>
        <member name="E:EvoPdf.ImageElement.AfterRenderPdfPageEvent">
            <summary>
            The event is raised right after the Image Element finished PDF page rendering. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the foreground of the rendered PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.XLocation">
            <summary>
            Gets or sets the image element location on X in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.YLocation">
            <summary>
            Gets or sets the image element location on Y in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.DestWidth">
            <summary>
            Gets or sets the image destination width in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.DestHeight">
            <summary>
            Gets or sets the image destination height in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.Paginate">
            <summary>
            When this property true the element can be paginated and rendered in many PDF pages
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.InsertNewPagesMode">
            <summary>
            A flag indicating if the Image element will always insert a new page in the PDF document when rendering next page 
            instead of trying to use an already existing PDF page. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.RenderMultiFrame">
            <summary>
            Set this property to enable/disable multi-frame images rendering when necessary
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.RenderTransparentImage">
            <summary>
            A flag indicating if the image alpha transparency information is used when the image is rendered in PDF.
            The default value is false. Set this property to true to use transparency information from the transparent 
            PNG images and bitmap images with alpha channel when the image is rendered in PDF.
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.KeepAspectRatio">
            <summary>
            A flag imdicating if the aspect ratio of the image should be kept when the image is rendered in PDF. The default value of the property is true
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.EnlargeEnabled">
            <summary>
            A flag imdicating if the image can be enlarged if necessary to fit the destination in PDF. The default value of the property is true
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.ImageObj">
            <summary>
            Gets the underlying image object
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.ImageWidth">
            <summary>
            Gets the underlying image width.
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.ImageHeight">
            <summary>
            Gets the underlying image height.
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.ImageFrameCount">
            <summary>
            Gets the number of frames of a multi-frame image (eg. tiff image).
            </summary>
        </member>
        <member name="P:EvoPdf.ImageElement.ImageActiveFrame">
            <summary>
            Gets or sets the active frame number of a multi-frame image (e.g tiff image).
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlToImageConverter">
            <summary>
            This class offers the necessary methods to create a raster image from a web page at given URL or from a HTML string. 
            The generated image can be saved into a memory buffer or into a file
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.#ctor">
            <summary>
            Creates a HTML to Image converter using the default width and height for the HTML viewer.
            The default HTML viewer width is 1024 pixels and the default HTML viewer height is 0 which means
            the HTML viewer height will be automatically determined based on the HTML content and the HTML viewer width in order to
            make visible the whole HTML content. 
            If the HTML content is not entirely visible in the HTML viewer at the default width of 1024 pixels, the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property will control whether 
            the HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The width and height of the HTML viewer can also be controlled by the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerWidth"/> and <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerHeight"/> properties 
            of the HtmlToImageConverter class.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.#ctor(System.Int32)">
            <summary>
            Creates a HTML to Image converter using the specified width in pixels and the default height for the HTML viewer.
            The default HTML viewer height is 0 which means the HTML viewer height will be automatically determined 
            based on the HTML content and the HTML viewer width in order to make visible the whole HTML content.
            If the content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The width and height of the HTML viewer can also be controlled by the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerWidth"/> and <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerHeight"/> properties 
            of the HtmlToImageConverter class.
            </summary>
            <param name="htmlViewerWidth">The preferred HTML viewer width in pixels.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a HTML to Image converter using the specified width and height in pixels for the HTML viewer.
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and the HTML viewer width 
            in order to make visible the whole HTML content. 
            If the content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The width and height of the HTML viewer can also be controlled by the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerWidth"/> and <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerHeight"/> properties
            of the HtmlToImageConverter class.
            </summary>
            <param name="htmlViewerWidth">The preferred HTML viewer width in pixels.</param>
            <param name="htmlViewerHeight">The preferred HTML viewer height in pixels.</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertUrlToImageObject(System.String)">
            <summary>
            Converts an URL to an <see cref="T:System.Drawing.Image"/> object
            </summary>
            <param name="url">The URL of the HTML document to convert to image. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <returns>The created <see cref="T:System.Drawing.Image"/> object</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertUrlToImageTiles(System.String)">
            <summary>
            Converts an URL to a set of <see cref="T:System.Drawing.Image"/> objects.
            The image is tiled to avoid working with very large images in memory 
            </summary>
            <param name="url">The URL of the HTML document to convert to image. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <returns>The created <see cref="T:System.Drawing.Image"/> objects</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageObject(System.String,System.String)">
            <summary>
            Converts a HTML string to an <see cref="T:System.Drawing.Image"/> object using a base URL to resolve external resources
            </summary>
            <param name="htmlString">The HTML string to convert to image</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <returns>The created <see cref="T:System.Drawing.Image"/> object</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageTiles(System.String,System.String)">
            <summary>
            Converts a HTML string to a set of <see cref="T:System.Drawing.Image"/> objects using a base URL to resolve external resources.
            The image is tiled to avoid working with very large images in memory 
            </summary>
            <param name="htmlString">The HTML string to convert to image</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <returns>The rendered <see cref="T:System.Drawing.Image"/> objects</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageTiles(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to a set of <see cref="T:System.Drawing.Image"/> objects using a base URL to resolve external resources and an internal links base URL.
            The image is tiled to avoid working with very large images in memory 
            </summary>
            <param name="htmlString">The HTML string to convert to image</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML string</param>
            <returns>The created <see cref="T:System.Drawing.Image"/> objects</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertUrl(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an URL to an image having the given image format and returns the rendered image into a memory buffer
            </summary>
            <param name="url">The URL of the HTML document to convert to image. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <param name="format">The image format</param>
            <returns>A memory buffer containing the the generated image</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a HTML file to an image having the given format and returns the rendered image into a memory buffer
            </summary>
            <param name="htmlFilePath">The full path of the HTML file to convert to image</param>
            <param name="format">The image format</param>
            <returns>A memory buffer containing the the generated image</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtml(System.String,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a HTML string to an image having the given format using a base URL to resolve external resources 
            and returns the rendered image into a memory buffer
            </summary>
            <param name="htmlString">The HTML string to convert to image</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="format">The image format</param>
            <returns>A memory buffer containing the the generated image</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the HTML string read from a stream to an image having the given format using a base URL to resolve external resources 
            and returns the rendered image into a memory buffer
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to image</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="format">The image format</param>
            <returns>A memory buffer containing the the generated image</returns>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertUrlToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts an URL to an image having the given format and writes the rendered image into a file
            </summary>
            <param name="url">The URL of the HTML document to convert to image. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <param name="format">The image format</param>
            <param name="outFile">The full path of the file where to write the rendered image</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlFileToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts a HTML file to an image having the given format and writes the rendered image into a file
            </summary>
            <param name="htmlFilePath">The full path of the HTML file to convert to image</param>
            <param name="format">The image format</param>
            <param name="outFile">The full path of the file where to write the rendered image</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToFile(System.String,System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts a HTML string to an image having the given format using a base URL to resolve external resources and writes the rendered image into a file
            </summary>
            <param name="htmlString">The HTML string to be convert to image</param>
            <param name="format">The image format</param>
            <param name="baseUrl">The URL base of the page</param>
            <param name="outFile">The full path of the file where to write the rendered image</param>
        </member>
        <member name="M:EvoPdf.HtmlToImageConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
             to resolve external resources 
            and writes the rendered image into a fileConverts the HTML string read from a stream to an image having the given format using a base URL
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to image</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="format">The image format</param>
            <param name="outFile">The full path of the file where to write the rendered image</param>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.HtmlViewerWidth">
            <summary>
            Gets or sets the preferred HTML viewer width in pixels in the HTML to Image converter. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The HTML viewer width can also be specified in the HtmlToImageConverter class constructor. The default value is 1024 pixels.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.HtmlViewerHeight">
            <summary>
            Gets or sets the HTML viewer height in pixels in the HTML to Image converter. 
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and 
            the HTML viewer width in order to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerWidth"/> property. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer height can also be specified in the HtmlToImageConverter class contructor. The default value is 0 to automatically determine
            the HTML viewer height based on the HTML content and the HTML viewer width.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.ClipHtmlView">
            <summary>
            If the HTML content is not entirely visible in the HTML viewer of the HTML to Image converter at the specified width, the <see cref="P:EvoPdf.HtmlToImageConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerWidth"/> property. 
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.LicenseKey">
            <summary>
            Gets or sets the license key string received from the vendor in HTML to Image converter.
            If this property is null the converter will automatically enter in evaluation mode
            and a demo watermark will be displayed on the generated image.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.JavaScriptEnabled">
            <summary>
            A flag indicating if JavaScript execution is enabled in HTML to Image converter. 
            The default is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.Enable3DTransformations">
            <summary>
            Gets or sets a flag indicating if the accelerated CSS 3D transformations are enabled in the HTML to Image converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.EnableWebGL">
            <summary>
            Gets or sets a flag indicating if the WebGL is enabled in the HTML to Image converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.EnableAccelerated2DCanvas">
            <summary>
            Gets or sets a flag indicating if the accelerated 2D canvas is enabled in the HTML to Image converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.AuthenticationOptions">
            <summary>
            This property can be set with an username and a password in order to authenticate to the web server
            before accessing the URL to be converted in HTML to Image converter. They can be used for example to resolve the IIS Integrated Windows Authentication
            or other types of IIS authentication.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.ImpersonationOptions">
            <summary>
            The impersonation options applied during navigation in HTML to Image converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.TiledImageEnabled">
            <summary>
            A flag indicating if the image captured by converter is tiled. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.DefaultHtmlEncoding">
            <summary>
            The default HTML document text encoding to be used if there is no charset meta tag defined in the HTML document. By default this property is not set
            and an auto determined text encoding will be used by converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.ProxyOptions">
            <summary>
            Gets a reference to an object encapsulating the proxy options used by HTML to Image converter to access the HTML document to convert.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.TransparentBackground">
            <summary>
            Gets or sets a flag indicating if the resulted image will have a transparent background when converting a HTML documement without a defined background color or image.
            This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.HttpPostFields">
            <summary>
            Returns the collection of HTTP POST fields to be used when accessing a web page in the HTML to Image converter.
            If there are elements in collection then the converter will make a POST request to the web page URL 
            with the fields from this collection, otherwise it will make a GET request
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.MediaType">
            <summary>
            Gets or sets the media type of the HTML document used by the HTML to Image converter. The default media type is 'screen'. 
            If you set this property with 'print' then the CSS properties defined in '@media print' rule will be used to render the document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.SvgFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the SVG fonts are enabled in HTML during HTML to Image conversion. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.WebFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the Web Fonts are enabled in HTML during the HTML to Image conversion. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.PostScriptFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the fonts with PostScript outlines are enabled in HTML during the HTML to Image conversion. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.ExtensionsEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML viewer extensions are executed during the HTML to Image conversion. The default value is false and no extension is executed.
            The Flash player for Google Chrome must be installed in order to execute the flash content from HTML
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.DownloadAllResources">
            <summary>
            Gets or sets a flag indicating if the HTML to Image converter should try to download all the resources even if this could cause
            a slower conversion. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.PrerenderEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML to Image converter should perform a pre-rendering. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.InterruptSlowJavaScript">
            <summary>
            Gets or sets a flag indicating if the slow JavaScript script should be interrupted in HTML to Image converter. The default value is false and the scripts are not interrupted
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.HiddenHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to be excluded from rendering in HTML to Image converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.AvoidImageBreak">
            <summary>
            When true this property instructs the HTML to PDF converter to try to avoid cutting off the images between PDF pages. By default this property is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.AvoidHtmlElementsBreakSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to not be broken between PDF pages if possible
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.PageBreakBeforeHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements before which to force a page break in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.PageBreakAfterHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements after which to force a page break in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.RenderedHtmlElementSelector">
            <summary>
            Get or set the CSS selector of the HTML element to be rendered by the HTML to Image converter. If the selector selects multiple HTML elements, 
            only the the first one will be converted. The CSS selector is case sensitive. If this property is not set then the entire 
            HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.MaxHtmlViewerHeight">
            <summary>
            Gets or sets the maximum height in pixels to be rendered from the HTML document by the HTML to Image converter.
            The default value is 0 and the entire HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.MinHtmlViewerHeight">
            <summary>
            Gets or sets the minimum height in pixels to be rendered from HTML document by the HTML to Image converter.
            This value of this property is ignored if the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerHeight"/> property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.InitialHtmlViewerHeight">
            <summary>
            Gets or sets the initial height in pixels of the HTML viewer in HTML to Image converter.
            This value of this property is ignored if the <see cref="P:EvoPdf.HtmlToImageConverter.HtmlViewerHeight"/> property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.ImagePartSize">
            <summary>
            Gets or sets the maximum height in pixels of an image part in HTML to Image converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.TriggeringMode">
            <summary>
            The conversion triggering mode used by the HTML to Image converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.ConversionDelay">
            <summary>
            An additional time in seconds to wait for asynchronous items to be completely loaded or for a web page redirect to finish before
            starting the rendering in HTML to Image converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.NavigationTimeout">
            <summary>
            The HTML to Image converter navigation timeout in seconds. Default value is 60.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.HttpRequestHeaders">
            <summary>
            Gets a collection of custom HTTP headers to be sent by the HTML to Image converter to the web server 
            when the web page is requested from a URL. A custom HTTP header is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToImageConverter.HttpRequestHeaders"/> property.
            The <see cref="P:EvoPdf.HtmlToImageConverter.PersistentHttpRequestHeaders"/> property can be set on true to instruct the converter to send the custom headers 
            each time an external resource (image, css, etc) referenced by the web page is requested. By default the <see cref="P:EvoPdf.HtmlToImageConverter.PersistentHttpRequestHeaders"/>
            property is false and the custom headers are not automatically sent to the web server when the web page resources are requested.
            The custom HTTP headers can be used to define cookies, authentication options, URL referer or any other
            HTTP header to be sent to the web browser. The preferred method to send cookies is to use the <see cref="P:EvoPdf.HtmlToImageConverter.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.PersistentHttpRequestHeaders">
            <summary>
            The PersistentHttpRequestHeaders property can be set on true to instruct the HTML to Image converter to send the custom headers defined by the 
            <see cref="P:EvoPdf.HtmlToImageConverter.HttpRequestHeaders"/> property each time an external resource (image, css, etc) referenced by the web page is requested. 
            The default value of this property is true and the custom headers are automatically sent to the web server when the web page resources are requested.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.HttpRequestCookies">
            <summary>
            Gets a collection of custom HTTP cookies to be sent by the HTML to Image converter to the web server 
            when the web page to convert and the resources (image, css, etc) referenced by the web page are requested. A cookie is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToImageConverter.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.XPSupplementalLanguages">
            <summary>
            A flag in HTML to Image converter indicating if the supplemental languages (complex script, right-to-left, East Asian) support was enabled in Windows XP Regional and Language Options. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToImageConverter.EvoInternalFileName">
            <summary>
            Sets the full path of evointernal.dat helper file of the HTML to Image converter. By default this file is expected to be found 
            in the same folder with evohtmltopdf.dll assembly.
            </summary>
        </member>
        <member name="T:EvoPdf.ImgConverter">
            <summary>
            This class represents the HTML to Image converter and offers the necessary properties and methods to convert HTML documents to raster images.
            This class is still present in the API to maintain the backward compatibility and it will be replaced by HtmlToImageConverter class in the future versions
            </summary>
        </member>
        <member name="M:EvoPdf.ImgConverter.#ctor">
            <summary>
            This constructor creates a HTML to Image converter using the default width and height for the HTML viewer
            </summary>
        </member>
        <member name="M:EvoPdf.ImgConverter.#ctor(System.Int32)">
            <summary>
            This constructor creates a HTML to Image converter using the given width in pixels and the default height for the HTML viewer
            </summary>
            <param name="htmlViewerWidth">The HTML viewer width in pixels</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            This constructor creates a HTML to Image converter using the given width and height in pixels of the HTML viewer
            </summary>
            <param name="htmlViewerWidth">The HTML viewer width in pixels</param>
            <param name="htmlViewerHeight">The HTML viewer height in pixels</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageFromUrl(System.String)">
            <summary>
            Converts an URL to an image object. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertUrlToImageObject(System.String)"/> method in the future versions
            </summary>
            <param name="url">The URL to convert</param>
            <returns>The image object</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageTilesFromUrl(System.String)">
            <summary>
            Converts an URL to an array of image objects. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertUrlToImageTiles(System.String)"/> method in the future versions
            </summary>
            <param name="url">The URL to convert</param>
            <returns>The image objects</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageFromHtmlString(System.String)">
            <summary>
            Converts a HTML string to an image object. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageObject(System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <returns>The image object</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageFromHtmlString(System.String,System.String)">
            <summary>
            Converts a HTML string to an Image object using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageObject(System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <returns>The image object</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageTilesFromHtmlString(System.String)">
            <summary>
            Converts a HTML string to a set of image objects. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageTiles(System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <returns>The created image objects</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageTilesFromHtmlString(System.String,System.String)">
            <summary>
            Converts a HTML string to a set of image objects using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageTiles(System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <returns>The created image objects</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageTilesFromHtmlString(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to a set of image objects using a base URL and an internal links base URL. 
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToImageTiles(System.String,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
            <returns>The created image objects</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageBytesFromUrl(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts an URL to an image having the given image format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertUrl(System.String,System.Drawing.Imaging.ImageFormat)"/> method in the future versions 
            </summary>
            <param name="url">The URL to convert</param>
            <param name="format">The image format</param>
            <returns>The created image bytes</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageBytesFromHtmlFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a HTML file to an image having the given format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlFile(System.String,System.Drawing.Imaging.ImageFormat)"/> method in the future versions
            </summary>
            <param name="htmlFilePath">The HTML file to convert</param>
            <param name="format">The image format</param>
            <returns>The created image bytes</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageBytesFromHtmlString(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a HTML string to an image having the given format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtml(System.String,System.String,System.Drawing.Imaging.ImageFormat)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="format">The image format</param>
            <returns>The created image bytes</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageBytesFromHtmlString(System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts a HTML string to an image having the given format using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtml(System.String,System.String,System.Drawing.Imaging.ImageFormat)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="format">The image format</param>
            <param name="baseUrl">The base URL</param>
            <returns>The created image bytes</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageBytesFromHtmlStream(System.IO.Stream,System.Text.Encoding,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the HTML string read from a stream to an image having the given format.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.Drawing.Imaging.ImageFormat)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="format">The image format</param>
            <returns>The created image bytes</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.GetImageBytesFromHtmlStream(System.IO.Stream,System.Text.Encoding,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts the HTML string read from a stream to an image having the given format using a base URL.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.Drawing.Imaging.ImageFormat)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="format">The image format</param>
            <param name="baseUrl">The base URL</param>
            <returns>The created image bytes</returns>
        </member>
        <member name="M:EvoPdf.ImgConverter.SaveImageFromUrlToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts an URL to an image having the given format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertUrlToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)"/> method in the future versions
            </summary>
            <param name="url">The URL to convert</param>
            <param name="format">The image format</param>
            <param name="outFile">The output image file</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.SaveImageFromHtmlFileToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts a HTML file to an image having the given format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlFileToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)"/> method in the future versions
            </summary>
            <param name="htmlFilePath">The HTML file to convert</param>
            <param name="format">The image format</param>
            <param name="outFile">The output image file</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.SaveImageFromHtmlStringToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts a HTML string to an image having the given format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToFile(System.String,System.String,System.Drawing.Imaging.ImageFormat,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="format">The image format</param>
            <param name="outFile">The output image file</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.SaveImageFromHtmlStringToFile(System.String,System.Drawing.Imaging.ImageFormat,System.String,System.String)">
            <summary>
            Converts a HTML string to an image having the given format using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlToFile(System.String,System.String,System.Drawing.Imaging.ImageFormat,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="format">The image format</param>
            <param name="outFile">The output image file</param>
            <param name="baseUrl">The base URL</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.SaveImageFromHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Converts the HTML string read from a stream to an image having the given format. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.Drawing.Imaging.ImageFormat,System.String)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="format">The image format</param>
            <param name="outFile">The output image file</param>
        </member>
        <member name="M:EvoPdf.ImgConverter.SaveImageFromHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.Drawing.Imaging.ImageFormat,System.String,System.String)">
            <summary>
            Converts the HTML string read from a stream to an image having the given format using a base URL.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToImageConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.Drawing.Imaging.ImageFormat,System.String)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="format">The image format</param>
            <param name="outFile">The output image file</param>
            <param name="baseUrl">The base URL</param>
        </member>
        <member name="T:EvoPdf.ImpersonationLogonMode">
            <summary>
            The logon mode for impersonation
            </summary>
        </member>
        <member name="F:EvoPdf.ImpersonationLogonMode.Automatic">
            <summary>
            Automatic logon
            </summary>
        </member>
        <member name="F:EvoPdf.ImpersonationLogonMode.Explicit">
            <summary>
            Explicit logon
            </summary>
        </member>
        <member name="T:EvoPdf.ImpersonationOptions">
            <summary>
            This class encapsulates the options to control the HTML converter impersonation during navigation
            </summary>
        </member>
        <member name="P:EvoPdf.ImpersonationOptions.CurrentUserImpersonation">
            <summary>
            A flag indicating if the converter should impersonate the current user during navigation.
            By default this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.ImpersonationOptions.Username">
            <summary>
            The name of the user to logon before navigation. The <see cref="P:EvoPdf.ImpersonationOptions.Domain"/> and <see cref="P:EvoPdf.ImpersonationOptions.Password"/> properties must also be set.
            This property has priority over the <see cref="P:EvoPdf.ImpersonationOptions.CurrentUserImpersonation"/> property. 
            By default this property is not set.
            </summary>
        </member>
        <member name="P:EvoPdf.ImpersonationOptions.Domain">
            <summary>
            The user Windows domain name. This property together with <see cref="P:EvoPdf.ImpersonationOptions.Username"/> property define the user to logon before navigation.
            If the user is not part of a Windows domain the machine name can be used.
            By default this property is not set.
            </summary>
        </member>
        <member name="P:EvoPdf.ImpersonationOptions.Password">
            <summary>
            The password of the user specified by <see cref="P:EvoPdf.ImpersonationOptions.Username"/> and <see cref="P:EvoPdf.ImpersonationOptions.Domain"/> properties.
            By default this property is not set.
            </summary>
        </member>
        <member name="P:EvoPdf.ImpersonationOptions.LogonMode">
            <summary>
            The logon mode of the user before navigation. This property has effect only when a username for impersonation is specified.
            The default logon mode is automatic.
            </summary>
        </member>
        <member name="T:EvoPdf.NavigationCompletedDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.HtmlToPdfConverter.NavigationCompletedEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.NavigationCompletedParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.HtmlToPdfConverter.NavigationCompletedEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.NavigationCompletedParams.HtmlContentWidthPx">
            <summary>
            The width of the HTML document in pixels
            </summary>
        </member>
        <member name="P:EvoPdf.NavigationCompletedParams.HtmlContentHeightPx">
            <summary>
            The height of the HTML document in pixels
            </summary>
        </member>
        <member name="P:EvoPdf.NavigationCompletedParams.HtmlContentWidthPt">
            <summary>
            The width of the HTML document in points
            </summary>
        </member>
        <member name="P:EvoPdf.NavigationCompletedParams.HtmlContentHeightPt">
            <summary>
            The height of the HTML document in points
            </summary>
        </member>
        <member name="T:EvoPdf.PathElement">
            <summary>
            Represents a graphic element to be rendered in a PDF document 
            </summary>
        </member>
        <member name="M:EvoPdf.PathElement.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a graphic path element
            </summary>
            <param name="startPoint">The path start point</param>
        </member>
        <member name="M:EvoPdf.PathElement.AddBezierCurveSegment(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a Bezier curve to path
            </summary>
            <param name="startPoint">The Bezier curve segment start point</param>
            <param name="directionPoint">The Bezier curve segment direction point</param>
            <param name="endPoint">The Bezier curve segment end point</param>
        </member>
        <member name="M:EvoPdf.PathElement.AddLineSegment(System.Drawing.PointF)">
            <summary>
            Adds a line to path
            </summary>
            <param name="endPoint">The line end point</param>
        </member>
        <member name="P:EvoPdf.PathElement.ClosePath">
            <summary>
            A flag indicating if the path should be automatically closed. By default this property is false and the path is not closed
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormAutoFieldStyle">
            <summary>
            This class offers the necessary properties and methods to control the style of the automatically generated PDF form fields
            </summary>
        </member>
        <member name="M:EvoPdf.PdfFormAutoFieldStyle.SetFont(System.Drawing.Font,System.Boolean)">
            <summary>
            Use the given system font when the automatically generated PDF form field needs a font
            </summary>
            <param name="systemFont">The system font</param>
            <param name="embedSystemFont">A flag indicating if the system font will be embedded in PDF. Only the PDF form submit buttons support embedded system fonts.</param>
        </member>
        <member name="M:EvoPdf.PdfFormAutoFieldStyle.SetFont(EvoPdf.StdFontBaseFamily)">
            <summary>
            Use the given standard PDF font when the automatically generated PDF form field needs a font
            </summary>
            <param name="standardFont">The standard font</param>
        </member>
        <member name="M:EvoPdf.PdfFormAutoFieldStyle.SetFont(EvoPdf.PdfFont)">
            <summary>
            Use the given previously created PDF font when the automatically generated PDF form field needs a font
            </summary>
            <param name="pdfFont">The PDF font</param>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.BorderStyle">
            <summary>
            Gets or sets the form field border style in an automatically generated PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.BackColor">
            <summary>
            Gets or sets the form field background color in an automatically generated PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.ForeColor">
            <summary>
            Gets or sets the form field fore color in an automatically generated PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.BorderColor">
            <summary>
            Gets or sets the PDF form field border color in an automatically generated PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.Flatten">
            <summary>
            Gets or sets a flag indicating if the form field is flattened. The default value of the property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.ReadOnly">
            <summary>
            Gets or sets a flag indicating if the field is read only. The default value of the property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.Required">
            <summary>
            Gets or sets a flag indicating if the field should have a value at the time it is exported by a submit form action. The default value of the property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormAutoFieldStyle.Export">
            <summary>
            Gets or sets a flag indicating if the field is exported by a submit form action. The default value of the property is true
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormOptions">
            <summary>
            This class contains the properties to control the automatic conversion of a HTML form into a fillable PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.AutoPdfFormEnabled">
            <summary>
            A flag indicating if the HTML form elements like text boxes, checkboxes, radio buttons and submit buttons are automatically converted to PDF form fields in the generated PDF document. 
            The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.SubmitButtonStyle">
            <summary>
            Gets the submit button style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.TextBoxStyle">
            <summary>
            Gets the text box field style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.MultilineTextBoxStyle">
            <summary>
            Gets the multiline text box field style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.PasswordTextBoxStyle">
            <summary>
            Gets the password text box field style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.ComboBoxStyle">
            <summary>
            Gets the combo box field style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.ListBoxStyle">
            <summary>
            Gets the list box field style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.CheckBoxStyle">
            <summary>
            Gets the checkbox field style object where you can set the style properties
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormOptions.RadioButtonsGroupStyle">
            <summary>
            Gets the radio buttons group field style object where you can set the style properties
            </summary>
        </member>
        <member name="T:EvoPdf.ExternalPdfPageAddedDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.Document.ExternalPdfPageAddedEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.ExternalPdfPageAddedParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.Document.ExternalPdfPageAddedEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.ExternalPdfPageAddedParams.Page">
            <summary>
            Gets a reference to the added PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.ExternalPdfPageAddedParams.Index">
            <summary>
            Gets the index of the added page in PDF document pages collection
            </summary>
        </member>
        <member name="T:EvoPdf.PrepareRenderPdfPageDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.HtmlToPdfConverter.PrepareRenderPdfPageEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.PrepareRenderPdfPageParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.HtmlToPdfConverter.PrepareRenderPdfPageEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.PrepareRenderPdfPageParams.Page">
            <summary>
            Gets a reference to the PDF page being rendered
            </summary>
        </member>
        <member name="P:EvoPdf.PrepareRenderPdfPageParams.PageNumber">
            <summary>
            The number in PDF document of the PDF page to initialize
            </summary>
        </member>
        <member name="P:EvoPdf.PrepareRenderPdfPageParams.IsNewPage">
            <summary>
            A flag indicating if the PDF page to initialize is a new page just created by converter or a previously created page
            </summary>
        </member>
        <member name="P:EvoPdf.PrepareRenderPdfPageParams.PdfDocument">
            <summary>
            The PDF document to which the PDF page to initialize belongs
            </summary>
        </member>
        <member name="P:EvoPdf.PrepareRenderPdfPageParams.CancelConversion">
            <summary>
            Set this property on true to cancel the conversion before the PDF page to initialize is rendered
            </summary>
        </member>
        <member name="T:EvoPdf.InternalLinkElement">
            <summary>
            This class represents an internal link element in the PDF document which can be used to connect various sections of a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.InternalLinkElement.#ctor(System.Drawing.RectangleF,EvoPdf.ExplicitDestination)">
            <summary>
            Constructs an PDF internal link element with the given location and destination
            </summary>
            <param name="linkRectangle">The link rectangle in page</param>
            <param name="linkDestination">The link destination</param>
        </member>
        <member name="P:EvoPdf.InternalLinkElement.LinkRectangle">
            <summary>
            Gets or sets the internal link element rectangle in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.InternalLinkElement.LinkDestination">
            <summary>
            Gets or sets the link destination
            </summary>
        </member>
        <member name="T:EvoPdf.LineCapStyle">
            <summary>
            The line cap style
            </summary>
        </member>
        <member name="F:EvoPdf.LineCapStyle.Default">
            <summary>
            Default line cap style.
            </summary>
        </member>
        <member name="F:EvoPdf.LineCapStyle.ButtCap">
            <summary>
            The stroke is squared off at the endpoint of the path. There is no
            projection beyond the end of the path.
            </summary>
        </member>
        <member name="F:EvoPdf.LineCapStyle.RoundCap">
            <summary>
            A semicircular arc with a diameter equal to the line width is
            drawn around the endpoint and filled in.
            </summary>
        </member>
        <member name="F:EvoPdf.LineCapStyle.ProjectingSquareCap">
            <summary>
            The stroke continues beyond the endpoint of the path
            for a distance equal to half the line width and is then squared off.
            </summary>
        </member>
        <member name="T:EvoPdf.LineDashStyle">
            <summary>
            Specifies the style of a dashed line.
            </summary>
        </member>
        <member name="F:EvoPdf.LineDashStyle.Default">
            <summary>
            Default dash style
            </summary>
        </member>
        <member name="F:EvoPdf.LineDashStyle.Solid">
            <summary>
            Specifies a solid line
            </summary>
        </member>
        <member name="F:EvoPdf.LineDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:EvoPdf.LineDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:EvoPdf.LineDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:EvoPdf.LineDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="T:EvoPdf.LineElement">
            <summary>
            This class represents a line element that can be added to a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.LineElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a line element 
            </summary>
            <param name="startX">The start X coordinate</param>
            <param name="startY">The start Y coordinate</param>
            <param name="endX">The end X coordinate</param>
            <param name="endY">The end Y coordinate</param>
        </member>
        <member name="T:EvoPdf.LineJoinStyle">
            <summary>
            This enumeration represents the possible styles to join the lines in a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.LineJoinStyle.Default">
            <summary>
            Default line join style.
            </summary>
        </member>
        <member name="F:EvoPdf.LineJoinStyle.MiterJoin">
            <summary>
            The outer edges of the strokes for the two segments are extended until they meet at an angle,
            as in a picture frame. If the segments meet at too sharp an angle (as defined by the miter limit
            parameter— see "Miter Limit"), a bevel join is used instead.
            </summary>
        </member>
        <member name="F:EvoPdf.LineJoinStyle.RoundJoin">
            <summary>
            An arc of a circle with a diameter equal to the line width is drawn around the point
            where the two segments meet, connecting the outer edges of the strokes for the two segments.
            This pie slice-shaped figure is filled in, producing a rounded corner.
            </summary>
        </member>
        <member name="F:EvoPdf.LineJoinStyle.BevelJoin">
            <summary>
            The two segments are finished with caps (see "Line Cap Style")
            and the resulting notch beyond the ends of the segments is filled with a triangle.
            </summary>
        </member>
        <member name="T:EvoPdf.LineStyle">
            <summary>
            The line style for a graphic element which draws lines
            </summary>
        </member>
        <member name="M:EvoPdf.LineStyle.#ctor">
            <summary>
            Constructs a default line style
            </summary>
        </member>
        <member name="M:EvoPdf.LineStyle.#ctor(System.Single)">
            <summary>
            Constructs a line style with the specified line width
            </summary>
            <param name="lineWidth">The line width</param>
        </member>
        <member name="M:EvoPdf.LineStyle.#ctor(EvoPdf.LineDashStyle)">
            <summary>
            Constructs a style for a dashed line
            </summary>
            <param name="lineDashStyle">The dash style</param>
        </member>
        <member name="M:EvoPdf.LineStyle.#ctor(System.Single,EvoPdf.LineDashStyle)">
            <summary>
            Constructs a style for a dashed line
            </summary>
            <param name="lineWidth">The line width</param>
            <param name="lineDashStyle">The dash style</param>
        </member>
        <member name="M:EvoPdf.LineStyle.#ctor(System.Single,EvoPdf.LineCapStyle,EvoPdf.LineJoinStyle)">
            <summary>
            Constructs a style for a line with the specified width, cap and join styles
            </summary>
            <param name="lineWidth">The line width in graphic units</param>
            <param name="lineCapStyle">The line cap style</param>
            <param name="lineJoinStyle">The line join style</param>
        </member>
        <member name="P:EvoPdf.LineStyle.LineWidth">
            <summary>
            The line width
            </summary>
        </member>
        <member name="P:EvoPdf.LineStyle.LineCapStyle">
            <summary>
            Gets or sets the line cap style
            </summary>
        </member>
        <member name="P:EvoPdf.LineStyle.LineJoinStyle">
            <summary>
            Gets or sets the line join style
            </summary>
        </member>
        <member name="P:EvoPdf.LineStyle.LineDashStyle">
            <summary>
            Gets or sets the line dash pattern
            </summary>
        </member>
        <member name="T:EvoPdf.Margins">
            <summary>
            This class represents the dimensions of the margins of a PDF page
            </summary>
        </member>
        <member name="M:EvoPdf.Margins.#ctor">
            <summary>
            Initializes all margins with 0
            </summary>
        </member>
        <member name="M:EvoPdf.Margins.#ctor(System.Single)">
            <summary>
            Initializes all margins with the same value
            </summary>
            <param name="all">The value for all document margins.</param>
        </member>
        <member name="M:EvoPdf.Margins.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Default constructor initializes with 0 all the margins
            </summary>
            <param name="left">The left margin</param>
            <param name="right">The right margin</param>
            <param name="top">The top margin</param>
            <param name="bottom">The ottom margin</param>
        </member>
        <member name="P:EvoPdf.Margins.Left">
            <summary>
            The left margin in points
            </summary>
        </member>
        <member name="P:EvoPdf.Margins.Right">
            <summary>
            The right margin in points of the PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.Margins.Top">
            <summary>
            The top margin in points of the PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.Margins.Bottom">
            <summary>
            The bottom margin in points
            </summary>
        </member>
        <member name="P:EvoPdf.Margins.Empty">
            <summary>
            Empty margins object
            </summary>
        </member>
        <member name="T:EvoPdf.NetworkProxyType">
            <summary>
            The type of proxy used by converter to resolve requests
            </summary>
        </member>
        <member name="F:EvoPdf.NetworkProxyType.None">
            <summary>
            No proxy is used
            </summary>
        </member>
        <member name="F:EvoPdf.NetworkProxyType.Socks5">
            <summary>
            Proxy for any kind of connection
            </summary>
        </member>
        <member name="F:EvoPdf.NetworkProxyType.Http">
            <summary>
            HTTP transparent proxy
            </summary>
        </member>
        <member name="F:EvoPdf.NetworkProxyType.HttpCaching">
            <summary>
            HTTP caching proxy 
            </summary>
        </member>
        <member name="T:EvoPdf.PageCollection">
            <summary>
            This class represents a collection of pages of in a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.PageCollection.document">
            <summary>
            The parent PDF Document.
            </summary>
        </member>
        <member name="M:EvoPdf.PageCollection.#ctor(EvoPdf.Document)">
            <summary>
            Creates a collection of pages for this document.
            </summary>
            <param name="document">The PDF document for which this collection is created.</param>
        </member>
        <member name="M:EvoPdf.PageCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>The collection enumerator.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.AddNewPage">
            <summary>
            Creates a new PDF page and adds it to the collection. If there is a previous page in the
            collection, the orientation and size are inherited from the that page otherwise a first page with
            the default A4 size and Portrait orientation is created. The page margins are inherited from the
            default document margins.
            </summary>
            <returns>The newly created PDF page.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.AddNewPage(EvoPdf.Margins)">
            <summary>
            Creates a new PDF page and adds it to the collection. If there is a previous page in the
            collection, the orientation and size are inherited from the that page otherwise a first page with
            the default A4 size and Portrait orientation is created.
            </summary>
            <param name="pageMargins">The PDF page margins.</param>
            <returns>The newly created PDF page.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.AddNewPage(EvoPdf.PdfPageSize,EvoPdf.Margins)">
            <summary>
            Creates a new PDF page and adds it to the collection. If there is a previous page in the
            collection, the page orientation is inherited from the that page otherwise a first page with
            the specified size and Portrait orientation is created.
            </summary>
            <param name="pageSize">The page size in points.</param>
            <param name="pageMargins">The page mergins in points.</param>
            <returns>The newly created PDF page.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.AddNewPage(EvoPdf.PdfPageSize,EvoPdf.Margins,EvoPdf.PdfPageOrientation)">
            <summary>
            Creates a new PDF page with the specified size, margins and orientation and adds it to the collection.
            </summary>
            <param name="pageSize">The PDF page size in points.</param>
            <param name="pageMargins">The PDF page margins in points.</param>
            <param name="pageOrientation">The PDF page orientation.</param>
            <returns>The newly created PDF page.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.InsertNewPage(System.Int32,EvoPdf.PdfPageSize,EvoPdf.Margins,EvoPdf.PdfPageOrientation)">
            <summary>
            Creates a new PDF page with the specified size, margins and orientation and inserts it into the collection
            at the specified index
            </summary>
            <param name="index">The index where to insert the new page.</param>
            <param name="pageSize">The PDF page size in points.</param>
            <param name="pageMargins">The PDF page margins in points.</param>
            <param name="pageOrientation">The PDF page orientation.</param>
            <returns>The newly created PDF page.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.Add(EvoPdf.PdfPage)">
            <summary>
            Adds the specified page to the document pages collection. The page to be added is allowed to be
            from another document.
            The source document of the page to be added must remain opened until the
            current document is saved.
            </summary>
            <param name="pdfPage">The page to be added to the collection.</param>
            <returns>The index of the page in collection. If the page already exists, 
            this method returns the index of the existing page</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.AddRange(EvoPdf.PdfPage[])">
            <summary>
            Adds the specified array of pages to the PDF document pages. The page to be added are allowed to be
            from another document. The source document of the pages to be added must remain opened until the
            current document is saved.
            </summary>
            <param name="pages">The PDF pages to be added.</param>
        </member>
        <member name="M:EvoPdf.PageCollection.Insert(System.Int32,EvoPdf.PdfPage)">
            <summary>
            Inserts the specified page into the document pages collection at the specified index. 
            The page to be added is allowed to be from another document. 
            The source document of the page to be inserted must remain opened until the
            current document is saved.
            </summary>
            <param name="pageIndex">The index where the page will be inserted.</param>
            <param name="pdfPage">The PDF page to be inserted.</param>
        </member>
        <member name="M:EvoPdf.PageCollection.Contains(EvoPdf.PdfPage)">
            <summary>
            Indicates if the collection contains specified page.
            </summary>
            <param name="pdfPage">The PDF page to search.</param>
            <returns>True if the collection contains specified page.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.IndexOf(EvoPdf.PdfPage)">
            <summary>
            Returns the index of specified page in collection.
            </summary>
            <param name="pdfPage">PDF page to search.</param>
            <returns>The index of the page in collection.</returns>
        </member>
        <member name="M:EvoPdf.PageCollection.Remove(EvoPdf.PdfPage)">
            <summary>
            Removes the specified PDF page from the pages collection.
            </summary>
            <param name="pdfPage">The PDF page to be removed.</param>
        </member>
        <member name="M:EvoPdf.PageCollection.Remove(System.Int32)">
            <summary>
            Removes the PDF page at the specified index in collection.
            </summary>
            <param name="pageIndex">The zero based index of the PDF page to be removed.</param>
        </member>
        <member name="P:EvoPdf.PageCollection.Document">
            <summary>
            The parent document of this collection
            </summary>
        </member>
        <member name="P:EvoPdf.PageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the page at the specified zero based index in the pages collection.
            </summary>
            <param name="pageIndex">The zero based page index in the collection.</param>
            <returns>The PDF page at the specified index</returns>
        </member>
        <member name="P:EvoPdf.PageCollection.Count">
            <summary>
            The number of pages in collection.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfAction">
            <summary>
            Base class for the Go To, JavaScript, Submit Form or Reset Form actions
            </summary>
        </member>
        <member name="T:EvoPdf.PdfActionGoTo">
            <summary>
            Represents a Go To action in the PDF document.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfActionGoTo.#ctor(EvoPdf.ExplicitDestination)">
            <summary>
            Creates a Go To action based on the sepecified explicit destination.
            </summary>
            <param name="goToDestination">The destination of the Go To action.</param>
        </member>
        <member name="P:EvoPdf.PdfActionGoTo.Destination">
            <summary>
            Gets or sets the explicit destination of the Go To action.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfActionJavaScript">
            <summary>
            Represents a JavaScript action in the PDF document.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfActionJavaScript.#ctor(System.String)">
            <summary>
            Creates a JavaScript action based on a JavaScript string.
            </summary>
            <param name="javaScript">The JavaScript string.</param>
        </member>
        <member name="P:EvoPdf.PdfActionJavaScript.JavaScriptCode">
            <summary>
            Gets or sets the JavaScript code executed by this action.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfBookmarkOptions">
            <summary>
            This class contains the necessary properties to control the bookmarks creation in a PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfBookmarkOptions.AutoBookmarksEnabled">
            <summary>
            A flag indicating if the automatic creation of bookmarks in PDF for the H1 to H6 HTML elements is enabled or not. By default the automatic bookmarks creation is disabled 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfBookmarkOptions.HierarchicalBookmarks">
            <summary>
            A flag indicating if the bookmarks created in PDF for the HTML elements are arranged in a hierarchy based on the bookmark levels defined in HTML. By default this property is true  
            </summary>
        </member>
        <member name="P:EvoPdf.PdfBookmarkOptions.HtmlElementSelectors">
            <summary>
            Gets or sets the selectors of the HTML elements to be bookmarked.
            For example, the selector for all the H1 elements is "H1", the selector for all the elements with the CSS class name 'myclass'
            is "*.myclass" and the selector for the elements with the id 'myid' is "*#myid".
            </summary>
        </member>
        <member name="P:EvoPdf.PdfBookmarkOptions.AllowDefaultTitle">
            <summary>
            A flag indicating if the HTML elements without text can be bookmarked. This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfBookmarkOptions.DefaultTitle">
            <summary>
            Gets or sets the default title to be used for bookmarks that don't have an associated text. This property has effect only if <see cref="P:EvoPdf.PdfBookmarkOptions.AllowDefaultTitle"/>
            is true. This property defaults to "Bookmark" text
            </summary>
        </member>
        <member name="P:EvoPdf.PdfBookmarkOptions.MaxTitleLength">
            <summary>
            Gets or sets the maximum accepted length of the bookmark title string. If a positive value is set for this 
            property the bookmark title will be truncated if necessary. By default and the bookmark title will not be truncated
            </summary>
        </member>
        <member name="T:EvoPdf.PdfBorderStyle">
            <summary>
            This enumeration represents the possible border stylea in a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBorderStyle.Default">
            <summary>
            Default border style
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBorderStyle.NoBorder">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBorderStyle.FixedSingle">
            <summary>
            Single border
            </summary>
        </member>
        <member name="F:EvoPdf.PdfBorderStyle.Fixed3D">
            <summary>
            3D border
            </summary>
        </member>
        <member name="T:EvoPdf.PdfColor">
            <summary>
            Represents a PDF color
            </summary>
        </member>
        <member name="M:EvoPdf.PdfColor.#ctor(System.Drawing.Color)">
            <summary>
            Creates a PDF color object based on a .NET <see cref="T:System.Drawing.Color"/> structure
            </summary>
            <param name="color">The .NET Color structure.</param>
        </member>
        <member name="M:EvoPdf.PdfColor.#ctor(System.Single)">
            <summary>
            Creates a Grayscale color based on gray level
            </summary>
            <param name="gray">A value between 0 and 1 to specify the gray level</param>
        </member>
        <member name="M:EvoPdf.PdfColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color based on RGB values. The color values are on a scale from 0 to 255.
            </summary>
            <param name="red">Red value.</param>
            <param name="green">Green value.</param>
            <param name="blue">Blue value.</param>
        </member>
        <member name="M:EvoPdf.PdfColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color based on GMYK values. The color values are on a scale from 0 to 1.
            </summary>
            <param name="cyan">Cyan value.</param>
            <param name="magenta">Magenta value.</param>
            <param name="yellow">Yellow value.</param>
            <param name="key">Key value.</param>
        </member>
        <member name="M:EvoPdf.PdfColor.op_Implicit(System.Drawing.Color)~EvoPdf.PdfColor">
            <summary>
            Implicit operator to convert a .NET <see cref="T:System.Drawing.Color"/> structure a PDF color.
            </summary>
            <param name="color">The .NET Color object</param>
            <returns>The PDF color.</returns>
        </member>
        <member name="M:EvoPdf.PdfColor.op_Implicit(EvoPdf.PdfColor)~System.Drawing.Color">
            <summary>
            Implicit operator to convert a PDF color to a .NET <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">The PDF color object</param>
            <returns>The .NET color object.</returns>
        </member>
        <member name="P:EvoPdf.PdfColor.Empty">
            <summary>
            Gets a reference to an empty PDF color having all components 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Red">
            <summary>
            Gets or sets the value of the Red component of this PDF color.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Blue">
            <summary>
            Gets or sets the value of the Blue component of this PDF color.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Green">
            <summary>
            Gets or sets the value of the Green component of this PDF color.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Gray">
            <summary>
            Gets or sets Gray level.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Cyan">
            <summary>
            Gets or sets Cyan value.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Magenta">
            <summary>
            Gets sets Magenta value.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Yellow">
            <summary>
            Gets  sets Yellow chanel value.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfColor.Key">
            <summary>
            Gets or sets Black value.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfCompressionLevel">
            <summary>
            This enumration represents the possible compression levels that can be used when a PDF document is saved
            </summary>
        </member>
        <member name="F:EvoPdf.PdfCompressionLevel.NoCompression">
            <summary>
            The PDF document is not compressed.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfCompressionLevel.Normal">
            <summary>
            Normal compression level. This is the default compression level of the PDF document.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfCompressionLevel.Best">
            <summary>
            Produces the smallest PDF document but it takes longer to compress the streams.
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlToPdfConverter">
            <summary>
            This class is the main class of the HTML to PDF Converter which offers the necessary methods to create a PDF document from
            a web page at given URL or from a HTML string. The generated PDF document can be saved into a memory buffer or into a file
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.#ctor">
            <summary>
            Creates a HTML to PDF converter using the default width and height for the HTML viewer window.
            The default HTML viewer width is 1024 pixels and the default HTML viewer height is 0 which means
            the HTML viewer height will be automatically determined based on the HTML content and the HTML viewer width in order to
            make visible the whole HTML content. 
            If the HTML content is not entirely visible in the HTML viewer at the default width of 1024 pixels, the ClipHtmlView property will control whether 
            the HTML content is clipped to the width set for the HTML viewer or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The width and height of the HTML viewer can also be controlled by the <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerWidth"/> and <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerHeight"/> properties 
            of the HtmlToPdfConverter class.
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.#ctor(System.Int32)">
            <summary>
            Creates a HTML to PDF converter using the specified width in pixels and the default height for the HTML viewer window.
            The default HTML viewer height is 0 which means the HTML viewer height will be automatically determined 
            based on the HTML content and the HTML viewer width in order to make visible the whole HTML content.
            If the content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The width and height of the HTML viewer can also be controlled by the <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerWidth"/> and <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerHeight"/> properties 
            of the HtmlToPdfConverter class.
            </summary>
            <param name="htmlViewerWidth">The HTML viewer width in pixels</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a HTML to PDF using the specified width and height in pixels for the HTML viewer window.
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and the HTML viewer width 
            in order to make visible the whole HTML content. 
            If the content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The width and height of the HTML viewer can also be controlled by the <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerWidth"/> and <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerHeight"/> properties
            of the HtmlToPdfConverter class
            </summary>
            <param name="htmlViewerWidth">The HTML viewer width in pixels</param>
            <param name="htmlViewerHeight">The HTML viewer height in pixels</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.GetPageCount(System.String)">
            <summary>
            A fast method to obtain the page count of a PDF document from the specified file path.
            </summary>
            <param name="pdfFilePath">The path of the PDF file for which to get the page count.</param>
            <returns>The number of pages in the specified PDF document.</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.GetPageCount(System.IO.Stream)">
            <summary>
            A fast method to obtain the page count of a PDF document from the specified stream.
            </summary>
            <param name="pdfStream">The stream containing the PDF document for which to get the page count.</param>
            <returns>The number of pages in the specified PDF document.</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertUrlToPdfDocumentObject(System.String)">
            <summary>
            Converts an URL to PDF and returns the rendered PDF document as an object of the <see cref="T:EvoPdf.Document"/> class that can be further used in other operations
            requiring this type of objects
            </summary>
            <param name="url">The URL of the HTML document to convert to PDF. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <returns>The created <see cref="T:EvoPdf.Document"/> object
            </returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFileToPdfDocumentObject(System.String)">
            <summary>
            Converts a HTML file to PDF and returns the rendered PDF document as an object of the <see cref="T:EvoPdf.Document"/> class that can be further used in other operations
            requiring this type of objects
            </summary>
            <param name="htmlFilePath">The full path of the HTML file to convert to PDF</param>
            <returns>The created <see cref="T:EvoPdf.Document"/> object
            </returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToPdfDocumentObject(System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and returns the rendered PDF document
            as an object of the <see cref="T:EvoPdf.Document"/> class that can be further used in other operations
            requiring this type of objects. 
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <returns>The created <see cref="T:EvoPdf.Document"/> object
            </returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToPdfDocumentObject(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and an internal links base URL and returns the rendered PDF document
            as an object of the <see cref="T:EvoPdf.Document"/> class that can be further used in other operations
            requiring this type of objects.
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="internalLinksBaseUrl">The fully qualified URL of the HTML document referenced by the internal links from the HTML string</param>
            <returns>The created <see cref="T:EvoPdf.Document"/> object</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToPdfDocumentObject(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and returns the rendered PDF document
            as an object of the <see cref="T:EvoPdf.Document"/> class that can be further used in other operations
            requiring this type of objects.
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <returns>The created <see cref="T:EvoPdf.Document"/> object
            </returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToPdfDocumentObject(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and an internal links and returns the rendered PDF document
            as an object of the <see cref="T:EvoPdf.Document"/> class that can be further used in other operations
            requiring this type of objects.
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="internalLinksBaseUrl">The fully qualified URL of the HTML document referenced by the internal links from the HTML string</param>
            <returns>The created <see cref="T:EvoPdf.Document"/> object</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertUrl(System.String)">
            <summary>
            Converts an URL to PDF and returns the rendered PDF document into a memory buffer
            </summary>
            <param name="url">The URL of the HTML document to convert to PDF. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <returns>A memory buffer containing the the generated PDF document</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFile(System.String)">
            <summary>
            Converts a HTML file to PDF and returns the rendered PDF document into a memory buffer
            </summary>
            <param name="htmlFilePath">The full path of the HTML file to convert to PDF</param>
            <returns>A memory buffer containing the the generated PDF document</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtml(System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and returns the rendered PDF document into a memory buffer
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <returns>A memory buffer containing the the generated PDF document</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtml(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and an internal links base URL and returns the rendered PDF document into a memory buffer
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML string
            </param>
            <returns>A memory buffer containing the the generated PDF document</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and returns the rendered PDF document into a memory buffer
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <returns>An array of bytes containing the binary representation of the PDF document.</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and an internal links base URL 
            and returns the rendered PDF document into a memory buffer
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML stream
            </param>
            <returns>An array of bytes containing the binary representation of the PDF document.</returns>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertUrlToStream(System.String,System.IO.Stream)">
            <summary>
            Converts an URL to PDF and writes the rendered PDF document into a stream
            </summary>
            <param name="url">The URL of the HTML document to convert to PDF. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <param name="outPdfStream">The output stream where to write the generated PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFileToStream(System.String,System.IO.Stream)">
            <summary>
            Converts a HTML file to PDF and writes the rendered PDF document into a stream
            </summary>
            <param name="htmlFilePath">The full path of the HTML file to convert to PDF</param>
            <param name="outPdfStream">The output stream where to write the generated PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToStream(System.String,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and writes the rendered PDF document into a stream
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <param name="outPdfStream">The output stream where to write the generated PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToStream(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and an internal links base URL and writes the rendered PDF document into a stream
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML string
            </param>
            <param name="outPdfStream">The output stream where to write the generated PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and writes the rendered PDF document into a stream
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="outPdfStream">The output stream where to save the generated PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and an internal links base URL and writes the rendered PDF document into a stream
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML stream
            </param>
            <param name="outPdfStream">The output stream where to save the generated PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertUrlToFile(System.String,System.String)">
            <summary>
            Converts an URL to PDF and writes the rendered PDF document into a file
            </summary>
            <param name="url">The URL of the HTML document to convert to PDF. The full path of a HTML file in the local file system 
            is accepted as an URL if necessary</param>
            <param name="outFile">The full path of the file where to write the rendered PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFileToFile(System.String,System.String)">
            <summary>
            Converts a HTML file to PDF and writes the rendered PDF document into a file
            </summary>
            <param name="htmlFilePath">The full path of the HTML file to convert to PDF</param>
            <param name="outFile">The full path of the file where to write the rendered PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToFile(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and writes the rendered PDF document into a file
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <param name="outFile">The full path of the file where to write the rendered PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToFile(System.String,System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL to resolve external resources and an internal links base URL and writes the rendered PDF document into a file
            </summary>
            <param name="htmlString">The HTML string to convert to PDF</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML
            </param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML string
            </param>
            <param name="outFile">The full path of the file where to write the rendered PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and writes the rendered PDF document into a file
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="outFile">The full path of the file where to write the rendered PDF document</param>
        </member>
        <member name="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL to resolve external resources and an internal links base URL 
            and writes the rendered PDF document into a file
            </summary>
            <param name="htmlStream">The stream containing the HTML string to convert to PDF</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL used to determine the full URL of the external resources like images, CSS, JavaScript and Web Font files
            referenced by relative URLs in HTML</param>
            <param name="internalLinksBaseUrl">The full URL of the HTML document referenced by the internal links from the HTML stream
            </param>
            <param name="outFile">The full path of the file where to write the rendered PDF document</param>
        </member>
        <member name="E:EvoPdf.HtmlToPdfConverter.PrepareRenderPdfPageEvent">
            <summary>
            The event is raised after the HTML to PDF converter created the PDF page and before starting rendering it. 
            In the handler of this event the PDF page configuration like size, orientation, header or footer can still be changed 
            before starting rendering.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToPdfConverter.BeforeRenderPdfPageEvent">
            <summary>
            The event is raised right before the page is rendered by HTML to PDF converter. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the background of the PDF page to be rendered.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToPdfConverter.AfterRenderPdfPageEvent">
            <summary>
            The event is raised right after the HTML to PDF converter finished PDF page rendering. The PDF page configuration like 
            size, orientation, header or footer is already defined and cannot be changed.
            In the handler of this event PDF elements can be added in the foreground of the rendered PDF page.
            </summary>
        </member>
        <member name="E:EvoPdf.HtmlToPdfConverter.NavigationCompletedEvent">
            <summary>
            The event is raised right after the converter finished the navigation and before rendering HTML content to PDF
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HtmlViewerWidth">
            <summary>
            Gets or sets the preferred HTML viewer width in pixels in HTML to PDF converter. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The HTML viewer width can also be specified in the HtmlToPdfConverter class constructor. The default value is 1024 pixels.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HtmlViewerHeight">
            <summary>
            Gets or sets the HTML viewer height in pixels in the HTML to PDF Converter . 
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and 
            the HTML viewer width in order to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerWidth"/> property of the HtmlToPdfConverter class. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer height can also be specified in the HtmlToPdfConverter class contructor. The default value is 0 to automatically determine
            the HTML viewer height based on the HTML content and the HTML viewer width.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ClipHtmlView">
            <summary>
            If the HTML content is not entirely visible in the HTML viewer of the HTML to PDF converter at the specified width, this property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToPdfConverter.HtmlViewerWidth"/> property. 
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.LicenseKey">
            <summary>
            Gets or sets the license key string received from the vendor in HTML to PDF converter.
            If this property is null the converter will automatically enter in evaluation mode
            and a demo watermark will be displayed on the generated PDF document. 
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfDocumentOptions">
            <summary>
            Gets a reference to the object controlling the conversion process and the generated PDF document properties. 
            This property can be used to control the PDF document margins, PDF compression level, JPEG compression level, 
            the PDF page size and orientation, the PDF document headers and footers, conversion of the URLs to links in PDF, 
            conversion of the HTML links with anchors to internal PDF links, true type fonts embedding, fit width and stretch to fit, 
            conversion to a single PDF page, append or prepend external PDF documents.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.AuthenticationOptions">
            <summary>
            This property can be set with an username and a password in order to authenticate to the web server
            before accessing the URL to be converted in HTML to PDF Converter. They can be used for example to resolve the IIS Integrated Windows Authentication
            or other types of IIS authentication. 
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ImpersonationOptions">
            <summary>
            The impersonation options applied during navigation in HTML to PDF converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfDocumentInfo">
            <summary>
            Gets a reference to the object to controlling the generated PDF 
            document information like the document title, author, subject or creation date.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfSecurityOptions">
            <summary>
            Gets a reference to the object to controlling the generated PDF 
            document security settings like user and owner password, restrict printing
            or editing of the generated PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfHeaderOptions">
            <summary>
            Gets a reference to an object to control the generated PDF  document header options. 
            The header is displayed in the generated PDF document only if the <see cref="P:EvoPdf.PdfDocumentOptions.ShowHeader"/> property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfFooterOptions">
            <summary>
            Gets a reference to an object to control the generated PDF document footer options.
            The footer is displayed in the generated PDF document only if the <see cref="P:EvoPdf.PdfDocumentOptions.ShowFooter"/> property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfBookmarkOptions">
            <summary>
            Gets a reference to the object controlling the bookmarks creation for the rendered PDF document generated by the HTML to PDF converter.
            In order to enable creation of bookmarks you have to set the <see cref="P:EvoPdf.PdfBookmarkOptions.HtmlElementSelectors"/> property of <see cref="T:EvoPdf.PdfBookmarkOptions"/> class
            with the CSS selectors of the HTML elements you want to bookmark.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HtmlElementsMappingOptions">
            <summary>
            Gets a reference to the object that can be used to obtain the position in PDF of the HTML elements rendered by the HTML to PDF converter.
            In order to retrieve the position in PDF for a list of HTML elements, the <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementSelectors"/> property of 
            <see cref="T:EvoPdf.HtmlElementsMappingOptions"/> class must be set with an array of strings containing the CSS selectors of the HTML elements you want to map.
            The positions of the HTML elements in the generated PDF document will be returned in the 
            <see cref="P:EvoPdf.HtmlElementsMappingOptions.HtmlElementsMappingResult"/> object after the element was added to the page.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.TableOfContentsOptions">
            <summary>
            Gets a reference to the object controlling the automatic creation of a table of contents in the generated PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfFormOptions">
            <summary>
            Gets a reference to the object controlling the automatic conversion of a HTML form to a PDF form in the generated PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ProxyOptions">
            <summary>
            Gets a reference to an object encapsulating the proxy options used by HTML to PDF converter to access the HTML document to convert.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfViewerPreferences">
            <summary>
            Gets a reference to the object controlling how the generated PDF is displayed by a PDF viewer.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ConversionSummary">
            <summary>
            Offers summary information about the conversion process. After a successfull conversion this 
            property is initialized with an instance of the <see cref="T:EvoPdf.ConversionSummary"/> class. If the conversion
            failed this property returns a null value.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HtmlDocumentInfo">
            <summary>
            Gets an object populated after conversion with the title, keywords, and description of the converted HTML document.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.JavaScriptEnabled">
            <summary>
            A flag indicating if JavaScript execution is enabled in HTML to PDF converter. 
            The default is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.Enable3DTransformations">
            <summary>
            Gets or sets a flag indicating if the accelerated CSS 3D transformations are enabled in the HTML to PDF converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.EnableWebGL">
            <summary>
            Gets or sets a flag indicating if the WebGL is enabled in the HTML to PDF converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.EnableAccelerated2DCanvas">
            <summary>
            Gets or sets a flag indicating if the accelerated 2D canvas is enabled in the HTML to PDF converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HttpPostFields">
            <summary>
            Returns the collection of HTTP POST fields to be used when accessing a web page in HTML to PDF converter.
            If there are elements in collection then the converter will make a POST request to the web page URL 
            with the fields from this collection, otherwise it will make a GET request
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.MediaType">
            <summary>
            Gets or sets the media type of the HTML document used by the HTML to PDF converter. The default media type is 'screen'. 
            If you set this property with 'print' then the CSS properties defined in '@media print' rule will be used to render the document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.SvgFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the SVG fonts are enabled in HTML during the HTML to PDF conversion. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.WebFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the Web Fonts are enabled in HTML during the HTML to PDF conversion. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PostScriptFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the fonts with PostScript outlines are enabled in HTML during the HTML to PDF conversion. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ExtensionsEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML viewer extensions are executed during HTML to PDF conversion. The default value is false and no extension is executed.
            The Flash player for Google Chrome must be installed in order to execute the flash content from HTML
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.DownloadAllResources">
            <summary>
            Gets or sets a flag indicating if the HTML to PDF converter should try to download all the resources even if this could cause
            a slower conversion. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PrerenderEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML to PDF converter should perform a pre-rendering. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.InterruptSlowJavaScript">
            <summary>
            Gets or sets a flag indicating if the slow JavaScript script should be interrupted in HTML to PDF converter. The default value is false and the scripts are not interrupted
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HiddenHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to be excluded from rendering during HTML to PDF conversion
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.RenderedHtmlElementSelector">
            <summary>
            Get or set the CSS selector of the HTML element to be rendered to PDF by the HTML to PDF converter. If the selector selects multiple HTML elements, 
            only the the first one will be converted. The CSS selector is case sensitive. If this property is not set then the entire 
            HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.MaxHtmlViewerHeight">
            <summary>
            Gets or sets the maximum height in pixels to be rendered from the HTML document by the HTML to PDF converter.
            The default value is 0 and the entire HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.MinHtmlViewerHeight">
            <summary>
            Gets or sets the minimum height in pixels to be rendered from HTML document by the HTML to PDF converter.
            This value of this property is ignored if the HtmlViewerHeight property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.InitialHtmlViewerHeight">
            <summary>
            Gets or sets the initial height in pixels of the HTML viewer in HTML to PDF converter.
            This value of this property is ignored if the HtmlViewerHeight property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.DefaultHtmlEncoding">
            <summary>
            The default HTML document text encoding to be used if there is no charset meta tag defined in the HTML document. By default this property is not set
            and an auto determined text encoding will be used by converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ImagePartSize">
            <summary>
            Gets or sets the maximum height in pixels of an image part in HTML to PDF converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.TriggeringMode">
            <summary>
            The conversion triggering mode used by the HTML to PDF converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.ConversionDelay">
            <summary>
            An additional time in seconds to wait for asynchronous items to be completely loaded or for a web page redirect to finish before
            starting the rendering in HTML to PDF converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.NavigationTimeout">
            <summary>
            The HTML to PDF converter navigation timeout in seconds. Default value is 60.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HttpRequestHeaders">
            <summary>
            Gets a collection of custom HTTP headers to be sent by the HTML to PDF converter to the web server 
            when the web page is requested from a URL. A custom HTTP header is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToPdfConverter.HttpRequestHeaders"/> property.
            The <see cref="P:EvoPdf.HtmlToPdfConverter.PersistentHttpRequestHeaders"/> property can be set on true to instruct the converter to send the custom headers 
            each time an external resource (image, css, etc) referenced by the web page is requested. By default the <see cref="P:EvoPdf.HtmlToPdfConverter.PersistentHttpRequestHeaders"/>
            property is false and the custom headers are not automatically sent to the web server when the web page resources are requested.
            The custom HTTP headers can be used to define cookies, authentication options, URL referer or any other
            HTTP header to be sent to the web browser. The preferred method to send cookies is to use the <see cref="P:EvoPdf.HtmlToPdfConverter.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PersistentHttpRequestHeaders">
            <summary>
            This property can be set on true to instruct the HTML to PDF converter to send the custom headers defined by the 
            HttpRequestHeaders property each time an external resource (image, css, etc) referenced by the web page is requested. 
            The default value of this property is true and the custom headers are automatically sent to the web server when the web page resources are requested.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.HttpRequestCookies">
            <summary>
            Gets a collection of custom HTTP cookies to be sent by the HTML to PDF converter to the web server 
            when the web page to convert and the resources (image, css, etc) referenced by the web page are requested. A cookie is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToPdfConverter.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.XPSupplementalLanguages">
            <summary>
            A flag in HTML to PDF converter indicating if the supplemental languages (complex script, right-to-left, East Asian) support was enabled in Windows XP Regional and Language Options. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.EvoInternalFileName">
            <summary>
            Sets the full path of evointernal.dat helper file of the HTML to PDF converter. By default this file is expected to be found 
            in the same folder with evohtmltopdf.dll assembly.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToPdfConverter.PdfConverterConcurrencyLevel">
            <summary>
            This static parameter gives the maximum number of threads in the current .NET application domain that can convert HTML to PDF simultaneously.
            This parameter must be set before the first conversion performed in the current application domain.
            When this property is set with a negative value or zero the concurrency level is maximum. The default value is 4.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfConverter">
            <summary>
            This class represents the HTML to PDF converter and offers the necessary properties and methods to convert HTML documents to PDF.
            This class is still present in the API to maintain the backward compatibility and it will be replaced by HtmlToPdfConverter class in the future versions
            </summary>
        </member>
        <member name="M:EvoPdf.PdfConverter.#ctor">
            <summary>
            This constructor creates a HTML to PDF converter using the default width and height for the HTML viewer
            </summary>
        </member>
        <member name="M:EvoPdf.PdfConverter.#ctor(System.Int32)">
            <summary>
            This constructor creates a HTML to PDF converter using the given width in pixels and the default height for the HTML viewer
            </summary>
            <param name="htmlViewerWidth">The HTML viewer width in pixels</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.#ctor(System.Int32,System.Int32)">
            <summary>
            This constructor creates a HTML to PDF converter using the given width and height in pixels of the HTML viewer
            </summary>
            <param name="htmlViewerWidth">The HTML viewer width in pixels</param>
            <param name="htmlViewerHeight">The HTML viewer height in pixels</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromUrl(System.String)">
            <summary>
            Converts an URL to PDF document object.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertUrlToPdfDocumentObject(System.String)"/> method in the future versions
            </summary>
            <param name="url">The URL to convert</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlFile(System.String)">
            <summary>
            Converts a HTML file to a PDF document object.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFileToPdfDocumentObject(System.String)"/> method in the future versions 
            </summary>
            <param name="htmlFilePath">The HTML file to convert</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlString(System.String)">
            <summary>
            Converts a HTML string to PDF document object.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToPdfDocumentObject(System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlString(System.String,System.String)">
            <summary>
            Converts a HTML string to a PDF document object using a base URL.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToPdfDocumentObject(System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlString(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to a PDF document object using a base URL and an internal links base URL.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToPdfDocumentObject(System.String,System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Converts a HTML from a stream to PDF document object. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToPdfDocumentObject(System.IO.Stream,System.Text.Encoding,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlStream(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Converts a HTML from a stream to a PDF document object using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToPdfDocumentObject(System.IO.Stream,System.Text.Encoding,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfDocumentObjectFromHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
            <summary>
            Converts a HTML from a stream to a PDF document object using a base URL and an internal links base URL. 
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToPdfDocumentObject(System.IO.Stream,System.Text.Encoding,System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
            <returns>The PDF document object</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromUrl(System.String)">
            <summary>
            Converts an URL to PDF. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertUrl(System.String)"/> method in the future versions 
            </summary>
            <param name="url">The URL to convert</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlFile(System.String)">
            <summary>
            Converts a HTML file to PDF. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFile(System.String)"/> method in the future versions 
            </summary>
            <param name="htmlFilePath">The HTML file to convert</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlString(System.String)">
            <summary>
            Converts a HTML string to PDF. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtml(System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlString(System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtml(System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlString(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL and an internal links base URL. 
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtml(System.String,System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The base URL</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Converts a HTML from a stream to PDF. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlStream(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Converts a HTML from a stream to PDF using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.GetPdfBytesFromHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
            <summary>
            Converts a HTML from a stream to PDF using a base URL and an internal links base URL. 
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStream(System.IO.Stream,System.Text.Encoding,System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
            <returns>The PDF document bytes</returns>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromUrlToStream(System.String,System.IO.Stream)">
            <summary>
            Converts an URL to PDF and saves the rendered PDF document into a stream. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertUrlToStream(System.String,System.IO.Stream)"/> method in the future versions 
            </summary>
            <param name="url">The URL to convert</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlFileToStream(System.String,System.IO.Stream)">
            <summary>
            Converts a HTML file to PDF and saves the rendered PDF document into a stream. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFileToStream(System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlFilePath">The HTML file to convert</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStringToStream(System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string to PDF and saves the rendered PDF document into a stream. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToStream(System.String,System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStringToStream(System.String,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string to PDF using a base URL and saves the rendered PDF document into a stream.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToStream(System.String,System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStringToStream(System.String,System.String,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string to PDF using a base URL and an internal links base URL and saves the rendered PDF document into a stream.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToStream(System.String,System.String,System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.IO.Stream)">
            <summary>
            Converts the HTML string read from a stream to PDF and saves the rendered PDF document into a stream.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL and saves the rendered PDF document into a stream.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.String,System.IO.Stream)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL and an internal links base URL and saves the rendered PDF document into a stream.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToStream(System.IO.Stream,System.Text.Encoding,System.String,System.String,System.IO.Stream)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
            <param name="outPdfStream">The output stream</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromUrlToFile(System.String,System.String)">
            <summary>
            Converts an URL to PDF and saves the rendered PDF document into a file. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertUrlToFile(System.String,System.String)"/> method in the future versions 
            </summary>
            <param name="url">The URL to convert</param>
            <param name="outFile">The output file</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlFileToFile(System.String,System.String)">
            <summary>
            Converts a HTML file to PDF and saves the rendered PDF document into a file. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlFileToFile(System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlFilePath">The HTML file to convert</param>
            <param name="outFile">The output PDF file</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStringToFile(System.String,System.String)">
            <summary>
            Converts a HTML string to PDF and saves the rendered PDF document into a file. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToFile(System.String,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="outFile">The output PDF file</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStringToFile(System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL and saves the rendered PDF document into a file.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToFile(System.String,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="outFile">The output PDF file</param>
            <param name="baseUrl">The base URL</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStringToFile(System.String,System.String,System.String,System.String)">
            <summary>
            Converts a HTML string to PDF using a base URL and an internal links base URL and saves the rendered PDF document into a file.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlToFile(System.String,System.String,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlString">The HTML string to convert</param>
            <param name="outFile">The output PDF file</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Converts the HTML string read from a stream to PDF and saves the rendered PDF document into a stream.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="outFile">The output PDF file</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL and saves the rendered PDF document into a fil.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="outFile">The output PDF file</param>
            <param name="baseUrl">The base URL</param>
        </member>
        <member name="M:EvoPdf.PdfConverter.SavePdfFromHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String,System.String)">
            <summary>
            Converts a HTML string read from a stream to PDF using a base URL and an internal links base URL and saves the rendered PDF document into a fil.
            This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToPdfConverter.ConvertHtmlStreamToFile(System.IO.Stream,System.Text.Encoding,System.String,System.String,System.String)"/> method in the future versions
            </summary>
            <param name="htmlStream">The HTML stream</param>
            <param name="textEncoding">The stream text encoding</param>
            <param name="outFile">The output PDF file</param>
            <param name="baseUrl">The base URL</param>
            <param name="internalLinksBaseUrl">The internal links base URL</param>
        </member>
        <member name="T:EvoPdf.PdfDocumentException">
            <summary>
            Exception thrown by the HTML to PDF converter library
            </summary>
        </member>
        <member name="M:EvoPdf.PdfDocumentException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception that triggered this exception</param>
        </member>
        <member name="T:EvoPdf.PdfDocumentInfo">
            <summary>
            This class encapsulates the options to control the PDF document
            description (author, title, keywords, etc). The HtmlToPdfConverter class exposes 
            a reference to an object of this type in the <see cref="P:EvoPdf.HtmlToPdfConverter.PdfDocumentInfo"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentInfo.AuthorName">
            <summary>
            Gets or sets the name of the author of the PDF document generated by the HTML to PDF converter.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentInfo.CreatedDate">
            <summary>
            Gets or sets the date and time when the PDF document was created by the HTML to PDF converter.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentInfo.Keywords">
            <summary>
            Gets or sets the keywords of the PDF document generated by the HTML to PDF converter.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentInfo.Subject">
            <summary>
            Gets or sets the subject of the PDF document generated by the HTML to PDF converter.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentInfo.Title">
            <summary>
            Gets or sets the title of the PDF document generated by the HTML to PDF converter.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfDocumentOptions">
            <summary>
            This class encapsulates the options to control the PDF document
            redering process. The HtmlToPdfConverter class define 
            a reference to an object of this type.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddStartDocument(EvoPdf.Document,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a PDF document object before the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved.
            </summary>
            <param name="pdfDocument">The document to be inserted before conversion result</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer can be applied to the added document when the document was created from an external file or stream.
            If this parameter is true then the interactive features like links and bookmarks are disabled in the added PDF document</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn in first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddStartDocument(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a PDF document from the given file before the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved
            </summary>
            <param name="pdfFile">The full path of the PDF file to be inserted before conversion result</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer can be applied to the added document.
            If this parameter is true then the interactive features like links and bookmarks are disabled in the added PDF document</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn in first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddStartDocument(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a PDF document from the given stream before the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved
            </summary>
            <param name="pdfStream">The stream from where to read the PDF document to be inserted before conversion result</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer can be applied to the added document.
            If this parameter is true then the interactive features like links and bookmarks are disabled in the added PDF document</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn in first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddEndDocument(EvoPdf.Document,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a PDF document object after the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved
            </summary>
            <param name="pdfDocument">The document to be inserted after conversion result</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer can be applied to the added document when the document was created from an external file or stream.
            If this parameter is true then the interactive features like links and bookmarks are disabled in the added PDF document</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn in first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddEndDocument(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a PDF document from the given file after the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved
            </summary>
            <param name="pdfFile">The full path of the PDF file to be inserted after conversion result</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer can be applied to the added document.
            If this parameter is true then the interactive features like links and bookmarks are disabled in the added PDF document</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn in first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddEndDocument(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a PDF document from the given stream after the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved
            </summary>
            <param name="pdfStream">The stream from where to read the PDF document to be inserted after conversion result</param>
            <param name="enableHeaderAndFooter">A flag indicating if the header and footer can be applied to the added document.
            If this parameter is true then the interactive features like links and bookmarks are disabled in the added PDF document</param>
            <param name="drawHeaderOnFirstPage">A flag indicating if the header is drawn on first page of the appended document</param>
            <param name="drawFooterOnFirstPage">A flag indicating if the footer is drawn in first page of the appended document</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddStartDocument(EvoPdf.Document)">
            <summary>
            Adds a PDF document object before the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved. The header and footer are not applied to the PDF
            documents added by this method. If you want to enable the header and footer in the added PDF document use the <see cref="M:EvoPdf.PdfDocumentOptions.AddStartDocument(EvoPdf.Document,System.Boolean,System.Boolean,System.Boolean)"/> 
            </summary>
            <param name="pdfDocument">The document to be inserted before conversion result</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddStartDocument(System.String)">
            <summary>
            Adds a PDF document from the given file before the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved. The header and footer are not applied to the PDF
            documents added by this method. If you want to enable the header and footer in the added PDF document use the <see cref="M:EvoPdf.PdfDocumentOptions.AddStartDocument(System.String,System.Boolean,System.Boolean,System.Boolean)"/> 
            </summary>
            <param name="pdfFile">The full path of the PDF file to be inserted before conversion result</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddStartDocument(System.IO.Stream)">
            <summary>
            Adds a PDF document from the given stream before the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved. The header and footer are not applied to the PDF
            documents added by this method. If you want to enable the header and footer in the added PDF document use the <see cref="M:EvoPdf.PdfDocumentOptions.AddStartDocument(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="pdfStream">The stream from where to read the PDF document to be inserted before conversion result</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddEndDocument(EvoPdf.Document)">
            <summary>
            Adds a PDF document object after the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved. The header and footer are not applied to the PDF
            documents added by this method. If you want to enable the header and footer in the added PDF document use the <see cref="M:EvoPdf.PdfDocumentOptions.AddEndDocument(EvoPdf.Document,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="pdfDocument">The document to be inserted after conversion result</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddEndDocument(System.String)">
            <summary>
            Adds a PDF document from the given file after the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved. The header and footer are not applied to the PDF
            documents added by this method. If you want to enable the header and footer in the added PDF document use the <see cref="M:EvoPdf.PdfDocumentOptions.AddEndDocument(System.String,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="pdfFile">The full path of the PDF file to be inserted after conversion result</param>
        </member>
        <member name="M:EvoPdf.PdfDocumentOptions.AddEndDocument(System.IO.Stream)">
            <summary>
            Adds a PDF document from the given stream after the result of HTML to PDF conversion. If the <see cref="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs"/> property is true the 
            added document will be automatically closed when the final document is closed or saved.  The header and footer are not applied to the PDF
            documents added by this method. If you want to enable the header and footer in the added PDF document use the <see cref="M:EvoPdf.PdfDocumentOptions.AddEndDocument(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)"/>
            </summary>
            <param name="pdfStream">The stream from where to read the PDF document to be inserted after conversion result</param>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.AutoCloseExternalDocs">
            <summary>
            This flag indicates if the external documents added by the AddStartDocument() and AddEndDocument() are automatically closed after the final document
            was generated. By default the external documents are closed
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.LeftMargin">
            <summary>
            The rendered PDF document left margin in points. 1 point is 1/72 inch. By default the left margin is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.RightMargin">
            <summary>
            The rendered PDF document right margin in points. 1 point is 1/72 inch. By default the right margin is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TopMargin">
            <summary>
            The rendered PDF document top margin in points. 1 point is 1/72 inch. By default the top margin is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.BottomMargin">
            <summary>
            The rendered PDF document bottom margin in points. 1 point is 1/72 inch. By default the left margin is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.X">
            <summary>
            The Y coordinate in points where to start HTML rendering in first page. By default the top location is 0
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.Y">
            <summary>
            The X coordinate in points where to start HTML rendering in first page. By default the left location is 0
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.Width">
            <summary>
            The width in points of the destination rectangle in PDF page where the HTML content is rendered. By default the destination width 
            is the available width in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.Height">
            <summary>
            The height in points of the destination rectangle in PDF page where the HTML content is rendered. By default the destination height 
            is automatically calculated to render the whole HTML content
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TopSpacing">
            <summary>
            A space in points to introduce at the top of PDF pages where the HTML is rendered. 1 point is 1/72 inch. By default the top spacing is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.BottomSpacing">
            <summary>
            A space in points to introduce at the bottom of PDF pages where the HTML is rendered. 1 point is 1/72 inch. By default the bottom spacing is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.BackColor">
            <summary>
            The PDF pages background color
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.PdfCompressionLevel">
            <summary>
            This property controls the compression level of the PDF document created by the HTML to PDF converter.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.JpegCompressionEnabled">
            <summary>
            Gets or sets a flag indicating if the JPEG compression is enabled or not for the images in the PDF document created by the HTML to PDF converter.
            By default the JPEG compression is enabled to reduce the size of the generated PDF. When the JPEG compression is enabled
            the quality of the images in the generated PDF is lower than the quality of the original images in the HTML document,
            function of the <see cref="P:EvoPdf.PdfDocumentOptions.JpegCompressionLevel"/> parameter. When the <see cref="P:EvoPdf.PdfDocumentOptions.JpegCompressionLevel"/> is increased, the quality of the images in PDF decreases.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.JpegCompressionLevel">
            <summary>
            Gets or sets the compression level of images in the PDF document generated by the HTML to PDF converter as an integer value between 0 and 100. 
            This property has effect only when the <see cref="P:EvoPdf.PdfDocumentOptions.JpegCompressionEnabled"/> is true.
            When the <see cref="P:EvoPdf.PdfDocumentOptions.JpegCompressionLevel"/> is 0, the compression rate is the lowest and the quality of the images is the best.
            When the <see cref="P:EvoPdf.PdfDocumentOptions.JpegCompressionLevel"/> is 100, the compression rate is the highest and quality of the images in PDF is the worst.
            The default JPEG compression level is 10, which should offer a good balance between the compression rate and 
            the quality of the images in PDF.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.CompressCrossReference">
            <summary>
            Set this property on true to store the cross-reference table and the trailer of the PDF document generated by the HTML to PDF converter in compressed cross-reference streams
            and to reduce the PDF file size. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.PdfPageSize">
            <summary>
            This property controls the page size of the PDF document generated by the HTML to PDF converter. 
            The default size of the PDF document page is A4
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.PdfStandardSubset">
            <summary>
            Defines the PDF subset used by the PDF document generated by the HTML to PDF converter. The default value is Full.
            This property can be used to instruct the converter to generate PDF/A or PDF/X compliant documents.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.ColorSpace">
            <summary>
            Gets or sets the color space of the PDF document generated by the HTML to PDF converter. 
            The possible values are RGB, CMYK or Gray Scale. The default color space is RGB.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.ColorProfile">
            <summary>
            Gets or sets the color profile of the PDF document generated by the HTML to PDF converter.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.FitWidth">
            <summary>
            When this property is true the HTML content will be resized if necessary to fit the available width in PDF page 
            of the PDF document generated by the HTML to PDF converter.
            By default this property is true and the content will be resized if necessary to fit the available width in PDF page. 
            When this property is false the HTML content is not resized (is rendered at the real size) and therefore 
            it could be cut off at the right size if the PDF page is not enough wide to display the whole HTML content. 
            In this case the <see cref="P:EvoPdf.PdfDocumentOptions.AutoSizePdfPage"/> property can be set on true to automatically resize the PDF page width 
            to display the whole content.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.FitHeight">
            <summary>
            When this property is true the HTML content will be resized if necessary to fit the available height in PDF page
            of the PDF document generated by the HTML to PDF converter.
            By default this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.StretchToFit">
            <summary>
            This property has effect in HTML to PDF converter only when <see cref="P:EvoPdf.PdfDocumentOptions.FitWidth"/> property is true. When <see cref="P:EvoPdf.PdfDocumentOptions.FitWidth"/> is true and this property is true 
            the HTML content will be stretched if necessary to fit the available width in PDF page.
            By default this property is false and the content will not be stretched to fit the available width in PDF page. 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.SinglePage">
            <summary>
            When this property is true the HTML to PDF converter will generate a single PDF page with a custom size calculated to 
            display the whole HTML content and any specified header and footer. 
            If the <see cref="P:EvoPdf.PdfDocumentOptions.FitWidth"/> property is true the specified PDF page width will be preserved, otherwise the PDF page width
            is automatically calculated by the converter to display the whole HTML content at real size.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.AutoSizePdfPage">
            <summary>
            When the property <see cref="P:EvoPdf.PdfDocumentOptions.AutoSizePdfPage"/> property  is true the HTML to PDF converter will automatically calculate the PDF page size such 
            that all the HTML content will be visible in the resulted PDF document. This property has effect only when the <see cref="P:EvoPdf.PdfDocumentOptions.FitWidth"/> and <see cref="P:EvoPdf.PdfDocumentOptions.FitHeight"/> properties are false. 
            When the FitWidth property is false (the HTML content is rendered at real size) and the <see cref="P:EvoPdf.PdfDocumentOptions.AutoSizePdfPage"/> is false 
            the rendered HTML content could be cut off at the right of the generated PDF document if the PDF page is not wide enough
            to display the whole content. This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.AvoidTextBreak">
            <summary>
            When true this property instructs the HTML to PDF converter to try to avoid cutting off 
            the text between PDF pages. By default this property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.AvoidImageBreak">
            <summary>
            When true this property instructs the HTML to PDF converter to try to avoid cutting off the images between PDF pages. By default this property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.AvoidHtmlElementsBreakSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements to not be broken between PDF pages if possible
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.PageBreakBeforeHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements before which to force a page break in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.PageBreakAfterHtmlElementsSelectors">
            <summary>
            Gets or sets the CSS selectors of the HTML elements after which to force a page break in PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.PdfPageOrientation">
            <summary>
            This property controls the page orientation of the pages of the PDF document generated by the HTML to PDF converter. 
            The default orientation is <see cref="F:EvoPdf.PdfPageOrientation.Portrait"/>.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.GenerateSelectablePdf">
            <summary>
            When this property is true the generated PDF will contain selectable text. When this property is false,
            the converter will embed a snapshot image of the HTML document in PDF.
            The default value of this property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.ShowHeader">
            <summary>
            This property controls the whether the header appears or not in the PDF document generated by the HTML to PDF converter. 
            The header properties can be further customized by setting the properties of object exposed by the 
            <see cref="P:EvoPdf.HtmlToPdfConverter.PdfHeaderOptions"/> property of the HtmlToPdfConverter class.
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.EmbedFonts">
            <summary>
            When true this options instructs the HTML to PDF converter to embed all the true type fonts in the PDF document generated by the HTML to PDF converter. 
            The default value of this property is true
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.LiveUrlsEnabled">
            <summary>
            When true this options instructs the HTML to PDF converter to convert the external links from HTML to PDF links in the PDF document generated by the HTML to PDF converter. 
            The default value is true.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.InteractiveHiddenElements">
            <summary>
            A flag indicating if the interactive features are enabled for hidden HTML elements. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.InternalLinksEnabled">
            <summary>
            When true this options instructs the HTML to PDF converter to convert the internal HTML links (links with anchors) 
            to internal PDF links in the PDF document generated by the HTML to PDF converter.
            The default value is true.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.ShowFooter">
            <summary>
            This property controls the whether the footer appears or not in the PDF document generated by the HTML to PDF converter. 
            The footer properties can be further customized by setting the properties of object exposed by the 
            <see cref="P:EvoPdf.HtmlToPdfConverter.PdfFooterOptions"/> property of the HtmlToPdfConverter class.
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TiledRenderingEnabled">
            <summary>
            A flag indicating if rendering of HTML document is tiled in the PDF document generated by the HTML to PDF converter.
            This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.EnhancedGraphicsQuality">
            <summary>
            A flag indicating the PDF graphics are rendered at the best quality in the PDF document generated by the HTML to PDF converter.
            The default property value is true
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TransparentImagesEnabled">
            <summary>
            A flag indicating if the converter uses transparency information of the images in the PDF document generated by the HTML to PDF converter.
            The default property value is true
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.ImagesScalingEnabled">
            <summary>
            A flag indicating if the images scaling is allowed in the PDF document generated by the HTML to PDF converter.
            The default property value is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.NoSizeElementsEnabled">
            <summary>
            A flag indicating if the hidden elements are rendered in the PDF document generated by the HTML to PDF converter.
            The default property value is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TransparencyEnabled">
            <summary>
            Gets or sets a flag indicating if the transparency is enabled in the PDF document generated by the HTML to PDF converter.
            Default value is true. This property can be set to false to eliminate the additional flattening time 
            when the document is sent to the printer from Adobe Reader viewer.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TableHeaderRepeatEnabled">
            <summary>
            Get or sets a flag indicating if the repeating of the HTML table header in PDF pages is enabled in the PDF document generated by the HTML to PDF converter. 
            Default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.TableFooterRepeatEnabled">
            <summary>
            Get or sets a flag indicating if the repeating of the HTML table footer in PDF pages is enabled in the PDF document generated by the HTML to PDF converter. 
            Default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.PdfDocumentOptions.DocumentObject">
            <summary>
            A reference to the internal <see cref="T:EvoPdf.Document"/> object initialized by converter during conversion
            </summary>
        </member>
        <member name="T:EvoPdf.PdfElement">
            <summary>
            The base class for the PDF elements that can be added to header and footer.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfElement.Render(System.Object,System.Object)">
            <summary>
            Render this page element using the specified renderer.
            </summary>
            <param name="renderer">The renderer to render this PDF element. 
            A renderer can be a PDF page, a header or a footer.
            </param>
            <param name="param">An optional parameter.</param>
        </member>
        <member name="T:EvoPdf.PdfFont">
            <summary>
            This class represents a font that can be added to a PDF document and used by the text elements
            </summary>
        </member>
        <member name="M:EvoPdf.PdfFont.GetCharWidth(System.Char)">
            <summary>
            Gets the width of the specified character in points.
            </summary>
            <param name="c">The character.</param>
            <returns>The character width in points.</returns>
        </member>
        <member name="M:EvoPdf.PdfFont.GetTextWidth(System.String)">
            <summary>
            Get the width in points of the specified string when rendered in PDF using this font.
            </summary>
            <param name="text">The measured string.</param>
            <returns>The width of the string in points.</returns>
        </member>
        <member name="M:EvoPdf.PdfFont.GetTextSize(System.String)">
            <summary>
            Gets the size of the specified string in points.
            </summary>
            <param name="text">The measured string.</param>
            <returns>The size of the string in points.</returns>
        </member>
        <member name="M:EvoPdf.PdfFont.GetSystemFont">
            <summary>
            Converts this font to a corresponding system font.
            </summary>
            <returns>A system font corresponding to this font object.</returns>
        </member>
        <member name="M:EvoPdf.PdfFont.Clone(EvoPdf.Document)">
            <summary>
            Creates a clone of this font in the specified document.
            </summary>
            <param name="document">The cloned font document.</param>
            <returns>The font object clone.</returns>
        </member>
        <member name="P:EvoPdf.PdfFont.FontFamily">
            <summary>
            Gets the name of the font family of this PDF font.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFont.Height">
            <summary>
            Gets the height of this PDF font.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFont.Size">
            <summary>
            Gets or sets size in points of this PDF font.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFont.FontBaseFamily">
            <summary>
            Gets the predefined family name of this PDF font.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFont.IsUnderline">
            <summary>
            A flag to indicate if the font is underline.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFont.IsStrikeout">
            <summary>
            A flag to indicate if the font is strikeout.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFontType">
            <summary>
            The list of supported fonts for the header and footer
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.Helvetica">
            <summary>
            Helvetica
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.HelveticaBold">
            <summary>
            HelveticaBold
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.HelveticaOblique">
            <summary>
            HelveticaOblique
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.HelvetivaBoldOblique">
            <summary>
            HelvetivaBoldOblique
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.Courier">
            <summary>
            Courier
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.CourierBold">
            <summary>
            CourierBold
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.CourierOblique">
            <summary>
            CourierOblique
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.CourierBoldOblique">
            <summary>
            CourierBoldOblique
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.TimesRoman">
            <summary>
            TimesRoman
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.TimesBold">
            <summary>
            TimesBold
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.TimesBoldItalic">
            <summary>
            TimesBoldItalic
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.TimesItalic">
            <summary>
            TimesItalic
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFontType.ZapfDingbats">
            <summary>
            ZapfDingbats
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFooterOptions">
            <summary>
            This class encapsulates the options to control the appearance of the 
            footer in the rendered PDF document. The HtmlToPdfConverter class exposes a 
            a reference to an object of this type in <see cref="P:EvoPdf.HtmlToPdfConverter.PdfFooterOptions"/> property. If the <see cref="P:EvoPdf.PdfDocumentOptions.ShowFooter"/> property of the <see cref="T:EvoPdf.PdfDocumentOptions"/>
            object exposed exposed by the <see cref="P:EvoPdf.HtmlToPdfConverter.PdfDocumentOptions"/> property is false, the footer options have no efect.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfFooterOptions.AddElement(EvoPdf.PageElement)">
            <summary>
            Add a PDF element to be rendered in footer by the HTML to PDF converter
            </summary>
            <param name="pdfElement">The PDF element to be rendered in footer</param>
        </member>
        <member name="P:EvoPdf.PdfFooterOptions.FooterBackColor">
            <summary>
            The background color of the footer.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFooterOptions.FooterHeight">
            <summary>
            Gest or sets the height in points of the footer. 1 point is 1/72 inch.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFooterOptions.PageNumberingStartIndex">
            <summary>
            Gets or sets the start index for page numbering using the &amp;p; variable in a TextElement object added to the footer.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFooterOptions.PageNumberingPageCountIncrement">
            <summary>
            Gets or sets an increment for the total number of pages displayed using &amp;P; variable in a TextElement object added to the footer.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfForm">
            <summary>
            This class represents the PDF form of a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.PdfForm.CreateFieldStyle">
            <summary>
            Creates a form field style
            </summary>
            <returns>The form field style</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.AddCheckBox(EvoPdf.PdfPage,System.Drawing.RectangleF)">
            <summary>
            Creates a check box form field in PDF form of the PDF document
            </summary>
            <param name="pdfPage">The PDF page in which to place the check box control</param>
            <param name="box">The check box control bounding box</param>
            <returns>The created check box field</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.AddListBox(EvoPdf.PdfPage,System.Drawing.RectangleF,System.String[],EvoPdf.PdfFont)">
            <summary>
            Creates a list box field in PDF form
            </summary>
            <param name="pdfPage">The PDF page in which to place the list box control</param>
            <param name="box">The list box control bounding box</param>
            <param name="items">The list box items</param>
            <param name="pdfFont">The list box items font</param>
            <returns>The created list box field</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.AddButton(EvoPdf.PdfPage,System.Drawing.RectangleF,System.String,EvoPdf.PdfFont)">
            <summary>
            Creates a button in PDF form
            </summary>
            <param name="pdfPage">The PDF page in which to place the button</param>
            <param name="box">The button control bounding box</param>
            <param name="text">The button text</param>
            <param name="pdfFont">The button text font</param>
            <returns>The created button field</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.AddTextBox(EvoPdf.PdfPage,System.Drawing.RectangleF,System.String,EvoPdf.PdfFont)">
            <summary>
            Creates a text box form field in PDF form of the PDF document
            </summary>
            <param name="pdfPage">The PDF page in which to place the text box control</param>
            <param name="box">The text box control bounding box</param>
            <param name="text">The text box initial text</param>
            <param name="pdfFont">The text font</param>
            <returns>The created text box field</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.AddComboBox(EvoPdf.PdfPage,System.Drawing.RectangleF,System.String[],EvoPdf.PdfFont)">
            <summary>
            Creates a combo box field in PDF form
            </summary>
            <param name="pdfPage">The PDF page in which to place the combo box control</param>
            <param name="box">The combo box control bounding box</param>
            <param name="items">The combo box items</param>
            <param name="pdfFont">The combo box items font</param>
            <returns>The created combo box field</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.AddRadioButtonsGroup(EvoPdf.PdfPage)">
            <summary>
            Creates a group of radio buttons in PDF form
            </summary>
            <param name="pdfPage">The PDF page in which to place the group of radio buttons</param>
            <returns>The created radio buttons group</returns>
        </member>
        <member name="M:EvoPdf.PdfForm.FlattenFields">
            <summary>
            Flattens the fields in the PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfForm.Document">
            <summary>
            The form owner document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfForm.Fields">
            <summary>
            The form fields
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormButton">
            <summary>
            Represents a button in a PDF form
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormField">
            <summary>
            This class represents a field in the PDF form of a PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Action">
            <summary>
            The action to be performed when the field is activated
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Name">
            <summary>
            Gets or sets the PDF form field name
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Value">
            <summary>
            Gets or sets the PDF form field value
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.DefaultValue">
            <summary>
            Gets or sets the default value of the field to which the field reverts when a reset form action is executed
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.ReadOnly">
            <summary>
            Gets or sets a flag indicating if the field is read only. The default value of the property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Required">
            <summary>
            Gets or sets a flag indicating if the field should have a value at the time it is exported by a submit form action. The default value of the property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Export">
            <summary>
            Gets or sets a flag indicating if the field is exported by a submit form action. The default value of the property is true
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.ToolTip">
            <summary>
            Gets or sets the PDF form field tooltip
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Style">
            <summary>
            Gets or sets the PDF form field style
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.BoundingRectangle">
            <summary>
            Gets or sets the PDF form field control box in PDF page with the dimensions expressed in points
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormField.Flatten">
            <summary>
            Gets or sets a flag indicating if the form field is flattened. The default value of the property is false
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormButton.Text">
            <summary>
            The PDF form button text
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormButton.Font">
            <summary>
            The PDF form button text font
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormCheckBox">
            <summary>
            Represents a check box in a PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormCheckBox.Checked">
            <summary>
            The initial status of the PDF form check box control
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormComboBox">
            <summary>
            Represents a combo box in a PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.Editable">
            <summary>
            A flag indicating if the combo box presents a text box above the drop down list.
            This property is true by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.ListItems">
            <summary>
            Gets or sets the the combo box items
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.Font">
            <summary>
            Gets or sets the combo box items font 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.AllowMultiSelect">
            <summary>
            A flag indicating if it is allowed to have multiple selections in combo box list. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.SortItems">
            <summary>
            A flag indicating if the list items are sorted alphabetically. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.SpellChecking">
            <summary>
            A flag indicating if the spell checking is enabled for the text entered. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormComboBox.CommitOnSelectionChanged">
            <summary>
            A flag indicating if a new value selected is committed immediately without waiting to leave the field. This property is false by default
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormFieldsCollection">
            <summary>
            This class represents a collection of fields in the PDF form of a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.PdfFormFieldsCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:EvoPdf.PdfFormFieldsCollection.Remove(EvoPdf.PdfFormField)">
            <summary>
            Removes a given form field from collection
            </summary>
            <param name="formField">The field to be removed from collection</param>
        </member>
        <member name="M:EvoPdf.PdfFormFieldsCollection.Add(EvoPdf.PdfFormField)">
            <summary>
            Adds a form field to collection
            </summary>
            <param name="formField">The form field to be added to collection</param>
        </member>
        <member name="P:EvoPdf.PdfFormFieldsCollection.Item(System.Int32)">
            <summary>
            Gets the form field at a given index in collection
            </summary>
            <param name="index">The form field index in collection</param>
            <returns>The form field at the given index</returns>
        </member>
        <member name="P:EvoPdf.PdfFormFieldsCollection.Item(System.String)">
            <summary>
            Gets the first form field with the given name from collection
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The form field with the given name</returns>
        </member>
        <member name="T:EvoPdf.PdfFormFieldStyle">
            <summary>
            This class represents the style of a PDF form field in a PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormFieldStyle.BorderStyle">
            <summary>
            Gets or sets the form field border style
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormFieldStyle.BackColor">
            <summary>
            Gets or sets the form field background color
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormFieldStyle.ForeColor">
            <summary>
            Gets or sets the form field fore color
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormFieldStyle.BorderColor">
            <summary>
            Gets or sets the PDF form field border color
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormListBox">
            <summary>
            Represents a list box in a PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormListBox.ListItems">
            <summary>
            Gets or sets the items in the list box
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormListBox.Font">
            <summary>
            Gets or sets the font of the items in the list
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormListBox.AllowMultiSelect">
            <summary>
            A flag indicating if it is allowed to have multiple selections in list box. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormListBox.SortItems">
            <summary>
            A flag indicating if the list items are sorted alphabetically. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormListBox.SpellChecking">
            <summary>
            A flag indicating if the spell checking is enabled. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormListBox.CommitOnSelectionChanged">
            <summary>
            A flag indicating if a new value selected is committed immediately without waiting to leave the field. This property is false by default
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormRadioButton">
            <summary>
            Represents a radio button in a radio buttons group
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormRadioButton.Name">
            <summary>
            The radio button field name
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormRadioButton.Checked">
            <summary>
            A flag indicating if the radio button is checked
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormRadioButton.BoundingRectangle">
            <summary>
            Gest or sets the bounding box in PDF page of the radio button control. The box dimensions are expressed in points
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormRadioButtonsGroup">
            <summary>
            Represents a group of radio buttons in a PDF form
            </summary>
        </member>
        <member name="M:EvoPdf.PdfFormRadioButtonsGroup.AddRadioButton(System.Drawing.RectangleF,System.String)">
            <summary>
            Creates a radio button with the given box and the given name in the radio button group
            </summary>
            <param name="box">The radio button bounding box</param>
            <param name="buttonName">The radio button name</param>
            <returns>The created radio button</returns>
        </member>
        <member name="M:EvoPdf.PdfFormRadioButtonsGroup.AddRadioButton(System.Drawing.RectangleF,System.String,EvoPdf.PdfPage)">
            <summary>
            Creates a radio button with given box and the given name in the given PDF page
            </summary>
            <param name="box">The radio button bounding box</param>
            <param name="buttonName">The radio button name</param>
            <param name="pdfPage">The PDF page where to add this radio button</param>
            <returns>The created radio button</returns>
        </member>
        <member name="M:EvoPdf.PdfFormRadioButtonsGroup.SetCheckedRadioButton(System.Int32)">
            <summary>
            Call this method to check on the radio button at the given index
            </summary>
            <param name="index">The radio button index</param>
        </member>
        <member name="M:EvoPdf.PdfFormRadioButtonsGroup.SetCheckedRadioButton(System.String)">
            <summary>
            Call this method to check on the radio button with the given name
            </summary>
            <param name="name">The radio button name</param>
        </member>
        <member name="M:EvoPdf.PdfFormRadioButtonsGroup.SetCheckedRadioButton(EvoPdf.PdfFormRadioButton)">
            <summary>
            Call this method to check on the given radio button
            </summary>
            <param name="radioButton">The radio button to check on</param>
        </member>
        <member name="P:EvoPdf.PdfFormRadioButtonsGroup.Count">
            <summary>
            Gets the number of radio buttons in group
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormRadioButtonsGroup.Item(System.Int32)">
            <summary>
            Gets the radio button at the given index in the radio buttons group
            </summary>
            <param name="index">The radio button index</param>
            <returns>The the radio button at the given index in the radio buttons group</returns>
        </member>
        <member name="P:EvoPdf.PdfFormRadioButtonsGroup.Item(System.String)">
            <summary>
            Gets the radio button with the given name from the radio buttons group
            </summary>
            <param name="name">The radio button name</param>
            <returns>The radio button with the given name from the radio buttons group</returns>
        </member>
        <member name="T:EvoPdf.PdfFormSubmitFlags">
            <summary>
            The submit form action flags to be combined to express various characteristics of the action
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.Default">
            <summary>
            The default value of the flags
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.IncludeExclude">
            <summary>
            If clear, the Fields array specifies which fields to include in the submission. 
            If set, the Fields array tells which fields to exclude
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.IncludeNoValueFields">
            <summary>
            If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted, regardless of whether they have a value. 
            For fields without a value, only the field name shall betransmitted. 
            If clear, fields without a value shall not be submitted
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.ExportFormat">
            <summary>
            Meaningful only if the SubmitPDF and XFDF flags are clear. If set, field names and values shall be submitted in HTML Form format. 
            If clear, they shall be submitted in Forms Data Format
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.GetMethod">
            <summary>
            If set, field names and values shall be submitted using an HTTP GET request. 
            If clear, they shall be submitted using a POST request. 
            This flag is meaningful only when the ExportFormat flag is set; if ExportFormat is clear, this flag shall also be clear
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.SubmitCoordinates">
            <summary>
            If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data. 
            The coordinate values are relative to the upper-left corner of the field’s widget annotation rectangle.
            This flag shall be used only when the ExportFormat flag is set. If ExportFormat is clear, this flag shall also be clear
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.XFDF">
            <summary>
            Shall be used only if the SubmitPDF flags are clear. If set, field names and values shall be submitted as XFDF
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.IncludeAppendSaves">
            <summary>
            Shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). 
            If set, the submitted FDF file shall include the contents of all incremental updates to the underlying PDF document, as contained in 
            the Differences entry in the FDF dictionary. 
            If clear, the incremental updates shall not be included
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.IncludeAnnotations">
            <summary>
            Shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). 
            If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document. 
            If clear, markup annotations shall not be included
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.SubmitPDF">
            <summary>
            If set, the document shall be submitted as PDF, using the MIME content type application/pdf. 
            If set, all other flags shall be ignored except GetMethod
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.CanonicalFormat">
            <summary>
            If set, any submitted field values representing dates shall be converted to the standard format
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.ExclNonUserAnnots">
            <summary>
            Shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear) and the IncludeAnnotations flag is set. 
            If set, it shall include only those markup annotations whose T entry matches the name of the current user, as determined by the remote server to which the form is being submitted.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.ExclFKey">
            <summary>
            Shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). 
            If set, the submitted FDF shall exclude the F entry.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfFormSubmitFlags.EmbedForm">
            <summary>
            Shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). 
            If set, the F entry of the submitted FDF shall be a file specification containing an embedded file stream representing the PDF file from which the FDF is being submitted
            </summary>
        </member>
        <member name="T:EvoPdf.PdfFormTextBox">
            <summary>
            Represents a text box in a PDF form
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormTextBox.Text">
            <summary>
            Gets or sets the text box initial text
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormTextBox.Font">
            <summary>
            Gets or sets the PDF form text box font
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormTextBox.IsMultiLine">
            <summary>
            A flag indicating if the text box is multiline. This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormTextBox.IsPassword">
            <summary>
            A flag indicating if this text box is used to enter a password.  This property is false by default
            </summary>
        </member>
        <member name="P:EvoPdf.PdfFormTextBox.MaxLength">
            <summary>
            Gets or sets the maximum length of the field text in characters
            </summary>
        </member>
        <member name="T:EvoPdf.PdfHeaderOptions">
            <summary>
            This class encapsulates the options to control the appearance of the 
            header in the rendered PDF document. The HtmlToPdfConverter class exposes a 
            a reference to an object of this type in <see cref="P:EvoPdf.HtmlToPdfConverter.PdfHeaderOptions"/> property. If the <see cref="P:EvoPdf.PdfDocumentOptions.ShowHeader"/> property of the <see cref="T:EvoPdf.PdfDocumentOptions"/>
            object exposed exposed by the <see cref="P:EvoPdf.HtmlToPdfConverter.PdfDocumentOptions"/> property is false, the header options have no efect.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfHeaderOptions.AddElement(EvoPdf.PageElement)">
            <summary>
            Add a PDF element to be rendered in header by the HTML to PDF converter
            </summary>
            <param name="pdfElement">The PDF element to be rendered in header</param>
        </member>
        <member name="P:EvoPdf.PdfHeaderOptions.HeaderBackColor">
            <summary>
            The background color of the header.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfHeaderOptions.HeaderHeight">
            <summary>
            Gets or sets the height in points of PDF header. 1 point is 1/72 inch.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfHeaderOptions.PageNumberingStartIndex">
            <summary>
            Gets or sets the start index for page numbering using the &amp;p; variable in a TextArea element
            added to the header.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfHeaderOptions.PageNumberingPageCountIncrement">
            <summary>
            Gets or sets an increment for the total number of pages displayed using &amp;P; variable in a TextArea element
            added to the header.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfPage">
            <summary>
            Represents a PDF document page
            </summary>
        </member>
        <member name="M:EvoPdf.PdfPage.AddHeaderTemplate(System.Single)">
            <summary>
            Creates a template with the specified height and automatically set the <see cref="P:EvoPdf.PdfPage.Header"/> property 
            of this page with the created template.
            </summary>
            <param name="height">The page header height</param>
            <returns>The page header</returns>
        </member>
        <member name="M:EvoPdf.PdfPage.AddFooterTemplate(System.Single)">
            <summary>
            Creates a template with the specified height and automatically set the <see cref="P:EvoPdf.PdfPage.Footer"/> property 
            of this page with the created template.
            </summary>
            <param name="height">The footer height</param>
            <returns>The page footer</returns>
        </member>
        <member name="M:EvoPdf.PdfPage.AddElement(EvoPdf.PageElement)">
            <summary>
            Add the given PDF element to this PDF page
            </summary>
            <param name="pageElement">The element to be added to this page</param>
            <returns>The result of adding the element to this page</returns>
        </member>
        <member name="P:EvoPdf.PdfPage.Document">
            <summary>
            The parent PDF document of this page
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.IsLoadedPage">
            <summary>
            A flag indicating if this page was loaded from another PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.Index">
            <summary>
            The index of this page in the parent PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.PageSize">
            <summary>
            Gets the size in points of this PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.Orientation">
            <summary>
            The PDF page orientation
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.RotationAngle">
            <summary>
            Gets or sets the PDF page rotation angle
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.Header">
            <summary>
            Represents the custom header template for the page. It will replace the document header template 
            on this page. 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.Footer">
            <summary>
            Represents the custom footer template for the page. It will replace the document footer template 
            on this page.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.ShowHeader">
            <summary>
            Gets or sets a flag indicating if the header is displayed on this PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.ShowFooter">
            <summary>
            Gets or sets a flag indicating if the footer is displayed on this PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPage.Margins">
            <summary>
            Gets the page margins
            </summary>
        </member>
        <member name="T:EvoPdf.PdfPageOrientation">
            <summary>
            This enumeration represents the possible orientations of the PDF pages of a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageOrientation.Portrait">
            <summary>
            Portrait
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageOrientation.Landscape">
            <summary>
            Landscape
            </summary>
        </member>
        <member name="T:EvoPdf.PdfPageSize">
            <summary>
            This class represents a PDF page size.
            </summary>
        </member>
        <member name="M:EvoPdf.PdfPageSize.#ctor">
            <summary>
            Default contructor constructs a A4 page size
            </summary>
        </member>
        <member name="M:EvoPdf.PdfPageSize.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a custom page size
            </summary>
            <param name="width">The page width in points</param>
            <param name="height">The page height in points</param>
        </member>
        <member name="F:EvoPdf.PdfPageSize.Letter">
            <summary>
            Represents the Letter size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.Note">
            <summary>
            Represents the Note size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.Legal">
            <summary>
            Represents the Legal size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A0">
            <summary>
            Represents the A0 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A1">
            <summary>
            Represents the A1 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A2">
            <summary>
            Represents the A2 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A3">
            <summary>
            Represents the A3 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A4">
            <summary>
            Represents the A4 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A5">
            <summary>
            Represents the A5 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A6">
            <summary>
            Represents the A6 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A7">
            <summary>
            Represents the A7 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A8">
            <summary>
            Represents the A8 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A9">
            <summary>
            Represents the A9 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.A10">
            <summary>
            Represents the A10 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.B0">
            <summary>
            Represents the B0 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.B1">
            <summary>
            Represents the B1 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.B2">
            <summary>
            Represents the B2 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.B3">
            <summary>
            Represents the B3 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.B4">
            <summary>
            Represents the B4 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.B5">
            <summary>
            Represents the B5 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.ArchE">
            <summary>
            Represents the ArchE size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.ArchD">
            <summary>
            Represents the ArchD size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.ArchC">
            <summary>
            Represents the ArchC size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.ArchB">
            <summary>
            Represents the ArchB size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.ArchA">
            <summary>
            Represents the ArchA size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.Flsa">
            <summary>
            Represents the Flsa size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.HalfLetter">
            <summary>
            Represents the HalfLetter size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.Letter11x17">
            <summary>
            Represents the 11x17 size of a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.PdfPageSize.Ledger">
            <summary>
            Represents the Ledger size of a PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPageSize.Width">
            <summary>
            Gets or sets the page width
            </summary>
        </member>
        <member name="P:EvoPdf.PdfPageSize.Height">
            <summary>
            Gets or sets the page height
            </summary>
        </member>
        <member name="T:EvoPdf.PdfResetFormAction">
            <summary>
            Represents a Reset action in a PDF form
            </summary>
        </member>
        <member name="M:EvoPdf.PdfResetFormAction.#ctor">
            <summary>
            Creates a PDF form reset action
            </summary>
        </member>
        <member name="P:EvoPdf.PdfResetFormAction.IncludeFields">
            <summary>
            A flag indicating if the P<see cref="P:EvoPdf.PdfResetFormAction.Fields"/> property defines the fields to be included or the fields to be excluded from reset.
            By default this property is true and the <see cref="P:EvoPdf.PdfResetFormAction.Fields"/> property defines the list of fields to to be included in reset
            </summary>
        </member>
        <member name="P:EvoPdf.PdfResetFormAction.Fields">
            <summary>
            Gets or sets the list of fields to be included or excluded from reset based on <see cref="P:EvoPdf.PdfResetFormAction.IncludeFields"/> property value.
            If no fields are added to this array and <see cref="P:EvoPdf.PdfResetFormAction.IncludeFields"/> property is true then all the fields are reset
            </summary>
        </member>
        <member name="T:EvoPdf.PdfSecurityOptions">
            <summary>
            This class encapsulates the options to control the PDF document
            security options. The HtmlToPdfConverter class define 
            a reference to an object of this type in <see cref="P:EvoPdf.HtmlToPdfConverter.PdfSecurityOptions"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.CanAssembleDocument">
            <summary>
            Can assemble the PDF document generated by the HTML to PDF converter (create bookmarks, thumbnail images or insert, rotate, delete
            pages). This property has effect when a 128 bit key is used.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.CanCopyContent">
            <summary>
            Can copy the content of the PDF document generated by the HTML to PDF converter. 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.CanEditAnnotations">
            <summary>
            Can edit the annotations of the PDF document generated by the HTML to PDF converter. 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.CanEditContent">
            <summary>
            Can edit the content of the PDF document generated by the HTML to PDF converter. 
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.CanFillFormFields">
            <summary>
            Can fill the form fields in the PDF document generated by the HTML to PDF converter. This property has effect when a 128 bit key is used. 
            To disable form filling the <see cref="P:EvoPdf.PdfSecurityOptions.CanEditContent"/> and <see cref="P:EvoPdf.PdfSecurityOptions.CanEditAnnotations"/> must be set on false.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.CanPrint">
            <summary>
            Can print the PDF document generated by the HTML to PDF converter. When this property is set to false the printing of the PDF document is disabled in a PDF viewer.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.KeySize">
            <summary>
            The dimension of the encryption key in the PDF document generated by the HTML to PDF converter. By default a 128 bit key is used.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.OwnerPassword">
            <summary>
            The password required to change permissions of the PDF document generated by the HTML to PDF converter, like printing or editing.
            If the <see cref="P:EvoPdf.PdfSecurityOptions.OwnerPassword"/> property is an empty string and the <see cref="P:EvoPdf.PdfSecurityOptions.UserPassword"/> is not empty,
            the <see cref="P:EvoPdf.PdfSecurityOptions.OwnerPassword"/> will be automatically assigned with the value from <see cref="P:EvoPdf.PdfSecurityOptions.UserPassword"/> 
            and when the PDF document is opened in the viewer using the user password (which is also the owner password) 
            all the operations like printing, copying, etc will be allowed.
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSecurityOptions.UserPassword">
            <summary>
            The password required to open the PDF document generated by the HTML to PDF converter. 
            If the <see cref="P:EvoPdf.PdfSecurityOptions.OwnerPassword"/> property is an empty string and the <see cref="P:EvoPdf.PdfSecurityOptions.UserPassword"/> is not empty,
            the <see cref="P:EvoPdf.PdfSecurityOptions.OwnerPassword"/> will be automatically assigned with the value from <see cref="P:EvoPdf.PdfSecurityOptions.UserPassword"/> and when the PDF document is opened in the viewer 
            using the user password (which is also the owner password) all the operations like printing, copying, etc will be allowed.
            </summary>
        </member>
        <member name="T:EvoPdf.PdfStandardSubset">
            <summary>
            This enumeration represents the possible standards used by a PDF document
            </summary>
        </member>
        <member name="F:EvoPdf.PdfStandardSubset.Full">
            <summary>
            The full PDF features can be used in the generated PDF document.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfStandardSubset.Pdf_A_1b">
            <summary>
            The generated PDF is in conformance with PDF/A 1b standard which makes the document
            suitable for long term archiving. 
            All the true type fonts are embedded in the PDF document, external HTTP links are disabled, 
            transparencies are disabled, and some special metadata to identify the document as PDF/A compliant 
            is inserted in the generated document.
            </summary>
        </member>
        <member name="F:EvoPdf.PdfStandardSubset.Pdf_X_1a">
            <summary>
            The generated PDF is in conformance with PDF/X 1a standard which makes the document 
            suitable for graphics exchange. 
            </summary>
        </member>
        <member name="T:EvoPdf.PdfSubmitFormAction">
            <summary>
            Represents a Submit action in a PDF form
            </summary>
        </member>
        <member name="M:EvoPdf.PdfSubmitFormAction.#ctor(System.String)">
            <summary>
            Creates a PDF form submit action
            </summary>
            <param name="url">The URL of the script at the Web server that will process the submission</param>
        </member>
        <member name="P:EvoPdf.PdfSubmitFormAction.Url">
            <summary>
            Gets o setd the URL of the script at the Web server that will process the submission
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSubmitFormAction.Flags">
            <summary>
            A biwise OR of flags specifying various characteristics of the action
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSubmitFormAction.IncludeFields">
            <summary>
            A flag indicating if the Fields property defines the fields to be included or the fields to be excluded from submit.
            By default this property is true and the Fields property defines the list of fields to to be included in submit
            </summary>
        </member>
        <member name="P:EvoPdf.PdfSubmitFormAction.Fields">
            <summary>
            Gets or sets a list of fields to be included or excluded from submit based on <see cref="P:EvoPdf.PdfSubmitFormAction.IncludeFields"/> property value.
            If no fields are added to this array and <see cref="P:EvoPdf.PdfSubmitFormAction.IncludeFields"/> property is true then all the fields are submitted
            </summary>
        </member>
        <member name="T:EvoPdf.PolygonElement">
            <summary>
            Represents a polygon in a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.PolygonElement.#ctor(System.Drawing.PointF[])">
            <summary>
            Constructs a polygon element
            </summary>
            <param name="points">The points to be connected</param>
        </member>
        <member name="T:EvoPdf.ProxyOptions">
            <summary>
            This class represents the various proxy settings that can be used to resolve the requests 
            </summary>
        </member>
        <member name="P:EvoPdf.ProxyOptions.Type">
            <summary>
            Gets or sets the proxy type
            </summary>
        </member>
        <member name="P:EvoPdf.ProxyOptions.HostName">
            <summary>
            Gets or sets the host name of the proxy host
            </summary>
        </member>
        <member name="P:EvoPdf.ProxyOptions.PortNumber">
            <summary>
            Gets or sets the port number of the proxy host to be used when accessing a HTML document
            </summary>
        </member>
        <member name="P:EvoPdf.ProxyOptions.Username">
            <summary>
            Gets or sets the user name used for authentication
            </summary>
        </member>
        <member name="P:EvoPdf.ProxyOptions.Password">
            <summary>
            Gets or sets the password used for authentication
            </summary>
        </member>
        <member name="T:EvoPdf.RectangleElement">
            <summary>
            This class represents a rectangle
            </summary>
        </member>
        <member name="M:EvoPdf.RectangleElement.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a rectangle element based on the rectangle top left corner coordinates, width and height
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <param name="width">The rectangle width</param>
            <param name="height">The rectangle height</param>
        </member>
        <member name="M:EvoPdf.RectangleElement.#ctor(System.Drawing.RectangleF)">
            <summary>
            Constructs a rectangle element based on a bounding rectangle
            </summary>
            <param name="rectangle">The bounding rectangle</param>
        </member>
        <member name="T:EvoPdf.RenderImageFormat">
            <summary>
            The supporter image formats
            </summary>
        </member>
        <member name="F:EvoPdf.RenderImageFormat.Png">
            <summary>
            Png
            </summary>
        </member>
        <member name="F:EvoPdf.RenderImageFormat.Bmp">
            <summary>
            Bmp
            </summary>
        </member>
        <member name="F:EvoPdf.RenderImageFormat.Gif">
            <summary>
            Gif
            </summary>
        </member>
        <member name="F:EvoPdf.RenderImageFormat.Jpeg">
            <summary>
            Jpeg
            </summary>
        </member>
        <member name="F:EvoPdf.RenderImageFormat.Tiff">
            <summary>
            Tiff
            </summary>
        </member>
        <member name="T:EvoPdf.BeforeRenderTemplateInPdfPageDelegate">
            <summary>
            Represents the delegate for the <see cref="E:EvoPdf.Template.BeforeRenderInPdfPageEvent"/> event
            </summary>
            <param name="eventParams">Event parameters</param>
        </member>
        <member name="T:EvoPdf.BeforeRenderTemplateInPdfPageParams">
            <summary>
            Represents the parameters of the <see cref="E:EvoPdf.Template.BeforeRenderInPdfPageEvent"/> event
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderTemplateInPdfPageParams.Page">
            <summary>
            The PDF page where the template is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderTemplateInPdfPageParams.PageNumber">
            <summary>
            The number in PDF document of the PDF page where the template is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.BeforeRenderTemplateInPdfPageParams.CancelRender">
            <summary>
            A flag you can set to indicate if the rendering of the template in PDF page should be canceled
            </summary>
        </member>
        <member name="T:EvoPdf.RotationAngle">
            <summary>
            Standard rotation angles for PDF pages.
            </summary>
        </member>
        <member name="F:EvoPdf.RotationAngle.Rotate_0">
            <summary>
            0 degrees rotation
            </summary>
        </member>
        <member name="F:EvoPdf.RotationAngle.Rotate_90">
            <summary>
            90 degrees rotation
            </summary>
        </member>
        <member name="F:EvoPdf.RotationAngle.Rotate_180">
            <summary>
            180 degrees rotation
            </summary>
        </member>
        <member name="F:EvoPdf.RotationAngle.Rotate_270">
            <summary>
            270 degrees rotation
            </summary>
        </member>
        <member name="T:EvoPdf.Security">
            <summary>
            This class encapsulates the options to control the PDF document
            security options. The <see cref="T:EvoPdf.Document"/> class defines 
            a reference to an object of this type in <see cref="P:EvoPdf.Document.Security"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.Security.CanAssembleDocument">
            <summary>
            Can assemble the PDF document (create bookmarks, thumbnail images or insert, rotate, delete
            pages). This property has effect when a 128 bit key is used. 
            </summary>
        </member>
        <member name="P:EvoPdf.Security.CanCopyContent">
            <summary>
            Can copy the PDF document content. 
            </summary>
        </member>
        <member name="P:EvoPdf.Security.CanEditAnnotations">
            <summary>
            Can edit PDF document annotations. When this property is set to false the annotations cannot be changed in a PDF editor
            </summary>
        </member>
        <member name="P:EvoPdf.Security.CanEditContent">
            <summary>
            Can edit PDF document content. When this property is set false the PDF document content cannot be changed in a PDF editor
            </summary>
        </member>
        <member name="P:EvoPdf.Security.CanFillFormFields">
            <summary>
            Can fill the PDF form fields. This property has effect when a 128 bit key is used. To disable form filling the <see cref="P:EvoPdf.Security.CanEditContent"/> and <see cref="P:EvoPdf.Security.CanEditAnnotations"/> must be set on false.
            </summary>
        </member>
        <member name="P:EvoPdf.Security.CanPrint">
            <summary>
            Can print the PDF document. When this property is set to false the printing of the PDF document is disabled in a PDF viewer.
            </summary>
        </member>
        <member name="P:EvoPdf.Security.KeySize">
            <summary>
            The dimension of the PDF doucument encryption key. The default the key size is 128 bits for a newly created PDF document.
            </summary>
        </member>
        <member name="P:EvoPdf.Security.OwnerPassword">
            <summary>
            The password required to change permissions of the PDF document like printing or editing.
            If the <see cref="P:EvoPdf.Security.OwnerPassword"/> property is an empty string and the <see cref="P:EvoPdf.Security.UserPassword"/> is not empty,
            the <see cref="P:EvoPdf.Security.OwnerPassword"/> will be automatically assigned with the value from <see cref="P:EvoPdf.Security.UserPassword"/> and when the PDF document is opened in the viewer 
            using the user password (which is also the owner password all the operations like printing, copying, etc will be allowed.
            </summary>
        </member>
        <member name="P:EvoPdf.Security.UserPassword">
            <summary>
            The password required to open the PDF document. If the <see cref="P:EvoPdf.Security.OwnerPassword"/> property is an empty string and the <see cref="P:EvoPdf.Security.UserPassword"/> is not empty,
            the <see cref="P:EvoPdf.Security.OwnerPassword"/> will be automatically assigned with the value from <see cref="P:EvoPdf.Security.UserPassword"/> and when the PDF document is opened in the viewer 
            using the user password (which is also the owner password) all the operations like printing, copying, etc will be allowed.
            </summary>
        </member>
        <member name="T:EvoPdf.SoundLinkElement">
            <summary>
            Represents a link to a sound file in PDF
            </summary>
        </member>
        <member name="M:EvoPdf.SoundLinkElement.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Constructs a sound link element at the given location in PDF page and using the given sound file
            </summary>
            <param name="linkRectangle">The link rectangle in page</param>
            <param name="filePath">The sound file</param>
        </member>
        <member name="P:EvoPdf.SoundLinkElement.LinkRectangle">
            <summary>
            Gets or sets the sound file link rectangle in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.SoundLinkElement.FilePath">
            <summary>
            Gets or sets the external file path
            </summary>
        </member>
        <member name="T:EvoPdf.StandardCJKFont">
            <summary>
            The Korean-Japanesse-Chinese (CJK) predefined fonts.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.HeiseiKakuGothicW5">
            <summary>
            Heisei Kaku Gothic W5 Japanese font.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.HeiseiMinchoW3">
            <summary>
            Heisei Mincho W3 Japanese font.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.HanyangSystemsGothicMedium">
            <summary>
            Hanyang Systems Gothic Medium Korean font.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.HanyangSystemsShinMyeongJoMedium">
            <summary>
            Hanyang Systems Shin MyeongJo Medium Korean font.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.MonotypeHeiMedium">
            <summary>
            Monotype Hei Medium Chinese traditional font.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.MonotypeSungLight">
            <summary>
            Monotype Sung Light Chinese traditional font.
            </summary>
        </member>
        <member name="F:EvoPdf.StandardCJKFont.SinoTypeSongLight">
            <summary>
            SinoType Song Light Chinese simplified font.
            </summary>
        </member>
        <member name="T:EvoPdf.StdFontBaseFamily">
            <summary>
            This enumeration contains the possible standard font families in a PDF document.
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.Custom">
            <summary>
            Custom font.
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.Helvetica">
            <summary>
            Helvetica
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.HelveticaBold">
            <summary>
            Helvetica Bold
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.HelveticaOblique">
            <summary>
            Helvetica Oblique
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.HelveticaBoldOblique">
            <summary>
            Helvetica Bold Oblique
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.Courier">
            <summary>
            Courier
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.CourierBold">
            <summary>
            Courier Bold
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.CourierOblique">
            <summary>
            Courier Oblique
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.CourierBoldOblique">
            <summary>
            Courier Bold Oblique
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.TimesRoman">
            <summary>
            Times Roman
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.TimesBold">
            <summary>
            Times Bold
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.TimesBoldItalic">
            <summary>
            Times Bold Italic
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.TimesItalic">
            <summary>
            Times Italic
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="F:EvoPdf.StdFontBaseFamily.ZapfDingbats">
            <summary>
            ZapfDingbats
            </summary>
        </member>
        <member name="T:EvoPdf.HtmlToSvgConverter">
            <summary>
            This class offers the necessary methods to create a SVG document from a web page at given URL or from a HTML string. 
            The generated SVG document can be saved into a memory buffer or into a file
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.#ctor">
            <summary>
            Creates a HTML to SVG converter using the default width and height for the HTML viewer
            </summary>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.ConvertUrl(System.String)">
            <summary>
            Converts an URL to a SVG document and returns the rendered SVG document into a memory buffer
            </summary>
            <param name="url">The URL of the web page to be converted to PDF. The URL can be also the full path 
            of a HTML file from the local file system.</param>
            <returns>A memory buffer containing the SVG document</returns>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.ConvertHtml(System.String,System.String)">
            <summary>
            Converts a HTML string into a SVG document using a base URL to resolve the external resources 
            and returns the rendered SVG document into a memory buffer
            </summary>
            <param name="html">The HTML string to convert to SVG</param>
            <param name="baseUrl">This parameter allows the converter to determine the full URLs from 
            relative URLs for images and CSS files appearing in the HTML string. 
            If there are not relative URLs in the HTML code this parameter can be empty or null</param>
            <returns>A memory buffer containing the SVG document</returns>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.ConvertUrlToStream(System.String,System.IO.Stream)">
            <summary>
            Converts the specified URL into a SVG document and saves the rendered SVG document to the specified stream
            </summary>
            <param name="url">The URL of the web page to be converted to PDF. The URL can be also the full path 
            of a HTML file from the local file system</param>
            <param name="outStream">The output stream where to save the generated SVG document</param>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.ConvertHtmlToStream(System.String,System.String,System.IO.Stream)">
            <summary>
            Converts the specified HTML string into a SVG document using a base URL to resolve the external resources 
            and saves the rendered SVG document to the specified stream
            </summary>
            <param name="html">The HTML string to convert</param>
            <param name="baseUrl">This parameter allows the converter to determine the full URLs from 
            relative URLs for images and CSS files appearing in the HTML string. 
            If there are not relative URLs in the HTML code this parameter can be empty or null.</param>
            <param name="outStream">The output stream where to save the generated SVG document</param>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.ConvertUrlToFile(System.String,System.String)">
            <summary>
            Converts the specified URL into a SVG document and saves the rendered SVG document to the specified file. 
            </summary>
            <param name="url">The URL of the web page to be converted to PDF. The URL can be also the full path 
            of a HTML file from the local file system</param>
            <param name="outFile">The output file where to save the generated SVG document</param>
        </member>
        <member name="M:EvoPdf.HtmlToSvgConverter.ConvertHtmlToFile(System.String,System.String,System.String)">
            <summary>
            Converts the specified HTML string into a SVG document using a base URL to resolve the external resources 
            and saves the rendered SVG document to the specified file
            </summary>
            <param name="html">The HTML string to convert</param>
            <param name="baseUrl">This parameter allows the converter to determine the full URLs from 
            relative URLs for images and CSS files appearing in the HTML string. 
            If there are not relative URLs in the HTML code this parameter can be empty or null</param>
            <param name="outFile">The output file where to save the generated SVG document</param>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.OutputResolution">
            <summary>
            The resolution of the SVG document  
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.OutputSize">
            <summary>
            A flag indicating if the calculated size of the SVG document should be set in the generated document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.HtmlViewerWidth">
            <summary>
            Gets or sets the preferred HTML viewer width in pixels of the HTML to SVG converter. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToSvgConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            By default the <see cref="P:EvoPdf.HtmlToSvgConverter.ClipHtmlView"/> property is false and the HTML viewer is automatically extended in width to make visible the whole HTML content.
            The HTML viewer width can also be specified in the HtmlToSvgConverter class constructor. The default value is 1024 pixels.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.HtmlViewerHeight">
            <summary>
            Gets or sets the HTML viewer height in pixels in HTML to SVG converter. 
            If the specified HTML viewer height is 0 the HTML viewer height will be automatically determined based on the HTML content and 
            the HTML viewer width in order to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToSvgConverter.HtmlViewerWidth"/> property. 
            If the HTML content is not entirely visible in the HTML viewer at the specified width, the <see cref="P:EvoPdf.HtmlToSvgConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer height can also be specified in the HtmlToSvgConverter class contructor. The default value is 0 to automatically determine
            the HTML viewer height based on the HTML content and the HTML viewer width.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.ClipHtmlView">
            <summary>
            If the HTML content is not entirely visible in the HTML viewer of the HTML to SVG converter at the specified width, the <see cref="P:EvoPdf.HtmlToSvgConverter.ClipHtmlView"/> property will control whether the 
            HTML content is clipped or the HTML viewer width is automatically extended to make visible the whole HTML content. 
            The HTML viewer width is given by the <see cref="P:EvoPdf.HtmlToSvgConverter.HtmlViewerWidth"/> property. 
            The default value of this property is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.LicenseKey">
            <summary>
            Gets or sets the license key string received from the vendor when converting HTML to SVG.
            If this property is null the converter will automatically enter in evaluation mode
            and a demo watermark will be displayed on the generated image.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.JavaScriptEnabled">
            <summary>
            A flag indicating if JavaScript execution is enabled in HTML to SVG converter during the HTML to SVG conversion. 
            The default is true.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.Enable3DTransformations">
            <summary>
            Gets or sets a flag indicating if the accelerated CSS 3D transformations are enabled in the HTML to SVG converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.EnableWebGL">
            <summary>
            Gets or sets a flag indicating if the WebGL is enabled in the HTML to SVG converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.EnableAccelerated2DCanvas">
            <summary>
            Gets or sets a flag indicating if the accelerated 2D canvas is enabled in the HTML to SVG converter. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.AuthenticationOptions">
            <summary>
            This property can be set with an username and a password in order to authenticate to the web server
            before accessing the URL to be converted in HTML to SVG converter. They can be used for example to resolve the IIS Integrated Windows Authentication
            or other types of IIS authentication.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.ImpersonationOptions">
            <summary>
            The impersonation options applied during navigation in the HTML to SVG converter.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.ProxyOptions">
            <summary>
            Gets a reference to an object encapsulating the proxy options used by HTML to SVG converter to access the HTML document to convert.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.HttpPostFields">
            <summary>
            Returns the collection of HTTP POST fields to be used when accessing a web page in HTML to SVG converter.
            If there are elements in collection then the converter will make a POST request to the web page URL 
            with the fields from this collection, otherwise it will make a GET request
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.MediaType">
            <summary>
            Gets or sets the media type of the HTML document used by HTML to SVG converter. The default media type is 'screen'. 
            If you set this property with 'print' then the CSS properties defined in '@media print' rule will be used to render the document
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.SvgFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the SVG fonts are enabled in HTML during the HTML to SVG conversion. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.WebFontsEnabled">
            <summary>
            Gets or sets a flag indicating if the Web Fonts are enabled in HTML during the HTML to SVG conversion. The default value is false
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.ExtensionsEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML viewer extensions are executed in HTML to SVG converter. The default value is false and no extension is executed.
            The Flash player for Google Chrome must be installed in order to execute the flash content from HTML
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.DownloadAllResources">
            <summary>
            Gets or sets a flag indicating if the HTML to SVG converter should try to download all the resources even if this could cause
            a slower conversion. The default value is false.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.PrerenderEnabled">
            <summary>
            Gets or sets a flag indicating if the HTML to SVG converter should perform a pre-rendering. The default value is true
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.InterruptSlowJavaScript">
            <summary>
            Gets or sets a flag indicating if the slow JavaScript script should be interrupted in the HTML to SVG converter. The default value is false and the scripts are not interrupted
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.RenderedHtmlElementSelector">
            <summary>
            Get or set the CSS selector of the HTML element to be rendered by the HTML to SVG converter. If the selector selects multiple HTML elements, 
            only the the first one will be converted. The CSS selector is case sensitive. If this property is not set then the entire 
            HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.MaxHtmlViewerHeight">
            <summary>
            Gets or sets the maximum height in pixels to be rendered from the HTML document by HTML to SVG converter.
            The default value is 0 and the entire HTML document is rendered
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.MinHtmlViewerHeight">
            <summary>
            Gets or sets the minimum height in pixels to be rendered from HTML document by the HTML to SVG converter.
            This value of this property is ignored if the <see cref="P:EvoPdf.HtmlToSvgConverter.HtmlViewerHeight"/> property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.InitialHtmlViewerHeight">
            <summary>
            Gets or sets the initial height in pixels of the HTML viewer in HTML to SVG converter.
            This value of this property is ignored if the <see cref="P:EvoPdf.HtmlToSvgConverter.HtmlViewerHeight"/> property is set
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.DefaultHtmlEncoding">
            <summary>
            The default HTML document text encoding to be used if there is no charset meta tag defined in the HTML document. By default this property is not set
            and an auto determined text encoding will be used by converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.TriggeringMode">
            <summary>
            The conversion triggering mode used by HTML to SVG converter
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.ConversionDelay">
            <summary>
            An additional time in seconds to wait for asynchronous items to be completely loaded or for a web page redirect to finish before
            starting the rendering of the document to SVG.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.NavigationTimeout">
            <summary>
            The HTML to SVG converter navigation timeout in seconds. Default value is 60.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.HttpRequestHeaders">
            <summary>
            Gets a collection of custom HTTP headers to be sent by the HTML to SVG converter to the web server 
            when the web page is requested from a URL. A custom HTTP header is defined by a name and a value pair
            that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToSvgConverter.HttpRequestHeaders"/> property.
            The <see cref="P:EvoPdf.HtmlToSvgConverter.PersistentHttpRequestHeaders"/> property can be set on true to instruct the converter to send the custom headers 
            each time an external resource (image, css, etc) referenced by the web page is requested. By default the <see cref="P:EvoPdf.HtmlToSvgConverter.PersistentHttpRequestHeaders"/>
            property is false and the custom headers are not automatically sent to the web server when the web page resources are requested.
            The custom HTTP headers can be used to define cookies, authentication options, URL referer or any other
            HTTP header to be sent to the web browser. The preferred method to send cookies is to use the <see cref="P:EvoPdf.HtmlToSvgConverter.HttpRequestCookies"/> property.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.PersistentHttpRequestHeaders">
            <summary>
            This property can be set on true to instruct the HTML to SVG converter to send the custom headers defined by the 
            HttpRequestHeaders property each time an external resource (image, css, etc) referenced by the web page is requested. 
            The default value of this property is true and the custom headers are automatically sent to the web server when the web page resources are requested.
            </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.HttpRequestCookies">
             <summary>
             Gets a collection of custom HTTP cookies to be sent by the HTML to SVG converter to the web server 
            when the web page to convert and the resources (image, css, etc) referenced by the web page are requested. A cookie is defined by a name and a value pair
             that can be added to the collection using the <see cref="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)"/> method of the <see cref="P:EvoPdf.HtmlToSvgConverter.HttpRequestCookies"/> property.
             </summary>
        </member>
        <member name="P:EvoPdf.HtmlToSvgConverter.EvoInternalFileName">
            <summary>
            Sets the full path of evointernal.dat helper file of the HTML to SVG converter. By default this file is expected to be found 
            in the same folder with evohtmltopdf.dll assembly.
            </summary>
        </member>
        <member name="T:EvoPdf.SvgConverter">
            <summary>
            This class represents the HTML to SVG converter and offers the necessary properties and methods to convert HTML documents to SVG documents.
            This class is still present in the API to maintain the backward compatibility and it will be replaced by HtmlToSvgConverter class in the future versions
            </summary>
        </member>
        <member name="M:EvoPdf.SvgConverter.#ctor">
            <summary>
            This constructor creates a HTML to SVG converter with default settings
            </summary>
        </member>
        <member name="M:EvoPdf.SvgConverter.GetSvgFromUrl(System.String)">
            <summary>
            Converts an URL to a SVG document. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToSvgConverter.ConvertUrl(System.String)"/> method in the future versions 
            </summary>
            <param name="url">The URL to convert</param>
            <returns>The created SVG document bytes</returns>
        </member>
        <member name="M:EvoPdf.SvgConverter.GetSvgFromHtmlString(System.String,System.String)">
            <summary>
            Converts a HTML string into a SVG document using a base URL. This method is still present in the API to maintain the backward compatibility and it will be replaced 
            by <see cref="M:EvoPdf.HtmlToSvgConverter.ConvertHtml(System.String,System.String)"/> method in the future versions
            </summary>
            <param name="html">The HTML string to convert</param>
            <param name="baseUrl">The base URL</param>
            <returns>The created SVG document bytes</returns>
        </member>
        <member name="T:EvoPdf.TableOfContentsOptions">
            <summary>
            This class contains the necessary properties to control the automatic creation of a table of contents in a PDF document
            </summary>
        </member>
        <member name="M:EvoPdf.TableOfContentsOptions.SetItemStyle(System.Int32,System.String)">
            <summary>
            Sets the style of a table of contents item on a given level. The item level is a number from 1 to 6
            </summary>
            <param name="level">The item level in the table of contents</param>
            <param name="style">The item CSS style</param>
        </member>
        <member name="M:EvoPdf.TableOfContentsOptions.SetPageNumberStyle(System.Int32,System.String)">
            <summary>
            Sets the style of the page page numbers on a given level in the table of contents. The page number level is a number from 1 to 6
            </summary>
            <param name="level">The page number level in the table of contents</param>
            <param name="style">The page number CSS style</param>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.AutoTocItemsEnabled">
            <summary>
            A flag indicating if the automatic creation of a table of contents items for the H1 to H6 HTML elements is enabled or not. By default this property is false 
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.MaxTocItemTitleLength">
            <summary>
            Gets or sets the maximum accepted length of the table of contents item title. If a positive value is set for this 
            property the table of contents item title will be truncated if necessary. By default the table of contents item title will not be truncated
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.PageNumbersEnabled">
            <summary>
            A flag indicating if the table of contents items will have page numbers besides the title. By default this property is true
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.Title">
            <summary>
            Gets or sets the table of contents title
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.TitleStyle">
            <summary>
            Gets or sets the global CSS style of the table of contents title. When this property is set with a value, the default style of the title is replaced 
            with the style given by this property. 
            For example, setting a "font-family: 'Times New Roman'; font-size:30px; font-weight:bold; color:red" style will make the converter to use
            the 'Times New Roman' bold font of 30 pixels and the blue color to write the table of contents title
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.GlobalStyle">
            <summary>
            Gets or sets the global CSS style of the table of contents. For example, setting a "body{background-color:blue}" will set a blue color for the table of contents background
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.Width">
            <summary>
            Gets or sets the table of contents width in pixels. The table can be resized if necessary to fit the PDF page width.
            If the property is 0 then the converter will automatically set the width of the table of contents
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.ShowHeader">
            <summary>
            A flag indicating if the document header is displayed on the table of content pages or not
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.ShowFooter">
            <summary>
            A flag indicating if the document footer is displayed on the table of content pages or not
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.StartPageNumbersAfterTOC">
            <summary>
            A flag indicating if the page numbers start after the table of contents. This property also changes the page numbering both in document header and footer and in
            the table of contents
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.PageNumberingStartIndex">
            <summary>
            Gets or sets the start index for page numbering in the table of contents. This property can be correlated with the <see cref="P:EvoPdf.Template.PageNumberingStartIndex"/>
            property of header and footer
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.StartPageIndex">
            <summary>
            Returns the index in PDF document of the page where the table of contents starts. This property is set by converter after the document with table of contents was generated
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.PageCount">
            <summary>
            Returns the number of pages on which the table of contents is created and together with the <see cref="P:EvoPdf.TableOfContentsOptions.StartPageIndex"/> helps to localize the position of the table of contents
            inside the generated PDF document. 
            This property is set by converter after the document with table of contents was generated
            </summary>
        </member>
        <member name="P:EvoPdf.TableOfContentsOptions.BackColor">
            <summary>
            The background color of the PDF pages on which the table of contents is created
            </summary>
        </member>
        <member name="T:EvoPdf.Template">
            <summary>
            Represents a template element which can be repeated in all PDF document pages.
            You can use variables like current PDF page number and the total number of PDF pages in a template.
            </summary>
        </member>
        <member name="M:EvoPdf.Template.AddElement(EvoPdf.PageElement)">
            <summary>
            Add a PDF page element to this template repeated in each PDF page
            </summary>
            <param name="pageElement">The page element to be added</param>
            <returns>The result of element rendering</returns>
        </member>
        <member name="E:EvoPdf.Template.BeforeRenderInPdfPageEvent">
            <summary>
            The event is raised right before the template is rendered in a PDF page. The template rendering in PDF page can be canceled by setting the 
            <see cref="P:EvoPdf.BeforeRenderTemplateInPdfPageParams.CancelRender"/> property on false
            </summary>
        </member>
        <member name="P:EvoPdf.Template.Width">
            <summary>
            Gets or sets template width for a custom template.
            Setting this property for a default document template has no effect.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.Height">
            <summary>
            Gets or sets template height for a custom template.
            Setting this property for a default document template has no effect.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.Bounds">
            <summary>
            Gets or sets the template bounds rectangle. Setting this property for 
            a default template has no effect.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.Docking">
            <summary>
            Gets or sets the template docking inside the PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.Template.Anchoring">
            <summary>
            Gets or sets the template anchoring inside the PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.Template.DrawOnOddPages">
            <summary>
            Set this property to indicate whether the template is drawn or not on the odd pages.
            By default this property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.DrawOnEvenPages">
            <summary>
            Set this property to indicate whether the template is drawn or not on the even pages.
            By default this property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.DrawOnFirstPage">
            <summary>
            Set this property to indicate whether the template is drawn or not on the first page.
            By default this property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.PageNumberingStartIndex">
            <summary>
            Gets or sets the start index for page numbering using the &amp;p; variable in a TextElement
            added to the template.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.PageNumberingPageCountIncrement">
            <summary>
            Gets or sets an increment for the total number of pages displayed using &amp;P; variable in a TextElement
            added to the template.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.BringToFront">
            <summary>
            When true, this property makes the template to be rendered in front of the 
            page main content. By default this property is true.
            </summary>
        </member>
        <member name="P:EvoPdf.Template.SendToBackground">
            <summary>
            When true, this property makes the template to be rendered in the back of the 
            page main content. By default this property is false.
            </summary>
        </member>
        <member name="T:EvoPdf.TemplateAnchoring">
            <summary>
            This enumeration represents the possible anchoring positions of the PDF template in a PDF page
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateAnchoring.NotAnchored">
            <summary>
            The template is not anchored.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateAnchoring.Center">
            <summary>
            The template will be anchored in the center of the PDF page.
            The center of the template rectangle will be same with the center of the page. 
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateAnchoring.TopLeft">
            <summary>
            The template will be anchored in the top left corner of the page.
            The template location will be the top left corner of the page.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateAnchoring.TopRight">
            <summary>
            The template will be anchored in the top right corner of the page.
            The right side of the template will be aligned with the right side of the page,
            and the top side of the template will be aligned with the top side of the page
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateAnchoring.BottomLeft">
            <summary>
            The template will be anchored in the bottom left corner of the page.
            The left side of the template will be aligned with the left side of the 
            page and the bottom side of the document will be aligned with the bottom
            side of the page.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateAnchoring.BottomRight">
            <summary>
            The template will be anchored in the bottom left corner of the page.
            The right side of the document will be aligned with the right side of the 
            PDF page and the bottom side of the document will be aligned with the bottom 
            side of the PDF page
            </summary>
        </member>
        <member name="T:EvoPdf.TemplateCollection">
            <summary>
            This class represents the collection of templates in PDF document. A template element can be repeated in all PDF document pages.
            of the document.
            </summary>
        </member>
        <member name="M:EvoPdf.TemplateCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator.
            </summary>
            <returns>The collection enumerator.</returns>
        </member>
        <member name="M:EvoPdf.TemplateCollection.AddNewTemplate(System.Single,System.Single)">
            <summary>
            Add a new template with the specified width and height to the document templates collection.
            The template location is top left corner of the page.
            </summary>
            <param name="width">The width in points of the template.</param>
            <param name="height">The height in points of the template.</param>
            <returns>The newly added template.</returns>
        </member>
        <member name="M:EvoPdf.TemplateCollection.AddNewTemplate(System.Drawing.RectangleF)">
            <summary>
            Add a new template with the specified bounds to the document templates collection.
            </summary>
            <param name="bounds">The template element bounds in points.</param>
            <returns>The newly added template.</returns>
        </member>
        <member name="P:EvoPdf.TemplateCollection.Item(System.Int32)">
            <summary>
            Gets the template at the specified index zero base index.
            </summary>
            <param name="templateIndex"></param>
            <returns>The template at the specified zero based index.</returns>
        </member>
        <member name="P:EvoPdf.TemplateCollection.Count">
            <summary>
            The number of templates in collection.
            </summary>
        </member>
        <member name="P:EvoPdf.TemplateCollection.HeaderTemplate">
            <summary>
            Represents the default PDF document header template. This header is automatically considered
            when calculating the available space for drawing in a PDF page. This template is automatically 
            docked to the top of the PDF page.
            </summary>
        </member>
        <member name="P:EvoPdf.TemplateCollection.FooterTemplate">
            <summary>
            Represents the default PDF document footer template. This footer is automatically considered
            when calculating the available space for rendering in a PDF page. This template is automatically 
            docked to the bottom of the PDF page.
            </summary>
        </member>
        <member name="T:EvoPdf.TemplateDocking">
            <summary>
            The docking style of a PDF template in PDF page.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateDocking.NotDocked">
            <summary>
            The template is not docked in PDF page.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateDocking.Top">
            <summary>
            The template is docked to the the top of the PDF page. 
            The template width and location will be adjusted for docking.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateDocking.Bottom">
            <summary>
            The template is docked to the bottom of the PDF page. 
            The template width and location will be adjusted for docking.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateDocking.Left">
            <summary>
            The template is docked to the left of the PDF page.
            The template location and height will be adjusted for docking.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateDocking.Right">
            <summary>
            The template is docked to the right of the PDF page.
            The template location and height will be adjusted for docking.
            </summary>
        </member>
        <member name="F:EvoPdf.TemplateDocking.Fill">
            <summary>
            The template fills the PDF page. The template location will be the 
            top left corner and the size will be the size of the PDF page. The docking
            will take into account the existing document Header, Footer, Left and Right templates.
            </summary>
        </member>
        <member name="T:EvoPdf.TextElement">
            <summary>
            Represents a text element to be added to a PDF page or template. 
            </summary>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.String,EvoPdf.PdfFont)">
            <summary>
            Contructs a paginable text element that will be rendered at the specified (x,y) position using the specified font. 
            The height of the rendered text will be auto-determined. The width is the available width in page.
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document. 
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, 
            the rendered text height being limited by the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the auto-determined text height is bigger 
            than the available space on page), all the text will be rendered using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font. The true type fonts must be embedded in PDF when it is added to the document 
            in order to support Unicode texts.
            
            </param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.String,System.Drawing.Font)">
            <summary>
            Contructs a paginable text element that will be rendered at the specified (x,y) position using the specified system font. 
            The height of the rendered text will be auto-determined. The width is the available width in page.
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document.  
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, 
            the rendered text height being limited by the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the auto-determined text height is bigger 
            than the available space on page), all the text will be rendered using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font as a System.Drawing.Font object.</param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.String,EvoPdf.PdfFont,EvoPdf.PdfColor)">
            <summary>
            Contructs a paginable text element that will be rendered at the specified (x,y) position using the specified font and color. 
            The height of the rendered text will be auto-determined. The width is the available width in page.
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document. 
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, 
            the rendered text height being limited by the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the auto-determined text height is bigger 
            than the available space on page), all the text will be rendered using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font. The true type fonts must be embedded in PDF when it is added to the document 
            in order to support Unicode texts.</param>
            <param name="textColor">The text color</param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.Single,System.String,EvoPdf.PdfFont)">
            <summary>
            Contructs a paginable text element that will be rendered at the specified (x,y) position using the specified width and font. 
            The height of the rendered text will be auto-determined.
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document. 
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, 
            the rendered text height being limited by the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the auto-determined text height is bigger 
            than the available space on page), all the text will be rendered using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="width">The width of the destination rectangle</param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font. The true type fonts must be embedded in PDF when it is added to the document 
            in order to support Unicode texts.</param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,EvoPdf.PdfFont)">
            <summary>
            Contructs a paginable text element that will be rendered in the specified rectangle using the specified width, height and font.
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document. 
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, the rendered text height 
            being given by the minimum between the specified height and the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the specified height is bigger 
            than the available space on page), the height parameter will be ignored and the text will be rendered to the end using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            If the text pagination is allowed but the text does not need pagination (the specified height is less than the available space on page),
            the rendered text will be truncated to fit the specified height. The text bounds inside the current page and the last page index are 
            returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added to a renderer.
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="width">The width of the destination rectangle</param>
            <param name="height">The height of the destination rectangle</param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font. The true type fonts must be embedded in PDF when it is added to the document 
            in order to support Unicode texts.</param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.Single,System.String,EvoPdf.PdfFont,EvoPdf.PdfColor)">
            <summary>
            Contructs a paginable text element that will be rendered at the specified (x,y) position using the specified width, font and color. 
            The height of the rendered text will be auto-determined.
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document. 
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, 
            the rendered text height being limited by the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the auto-determined text height is bigger 
            than the available space on page), all the text will be rendered using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="width">The width of the destination rectangle</param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font. The true type fonts must be embedded in PDF when it is added to the document 
            in order to support Unicode texts.</param>
            <param name="textColor">The text color</param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,EvoPdf.PdfFont,EvoPdf.PdfColor)">
            <summary>
            Contructs a paginable text element that will be rendered in the specified rectangle using the specified width, height, font and color. 
            
            The Unicode text is supported only for embedded true type fonts. A flag indicating if the font is embedded or not in PDF
            can be specified when the font is added to PDF document. 
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, the rendered text height 
            being given by the minimum between the specified height and the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the specified height is bigger 
            than the available space on page), the height parameter will be ignored and the text will be rendered to the end using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            If the text pagination is allowed but the text does not need pagination (the specified height is less than the available space on page),
            the rendered text will be truncated to fit the specified height. The text bounds inside the current page and the last page index are 
            returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added to a renderer.
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="width">The width of the destination rectangle</param>
            <param name="height">The height of the destination rectangle</param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font. The true type fonts must be embedded in PDF when it is added to the document 
            in order to support Unicode texts.</param>
            <param name="textColor">The text color</param>
        </member>
        <member name="M:EvoPdf.TextElement.#ctor(System.Single,System.Single,System.Single,System.Single,System.String,System.Drawing.Font,EvoPdf.PdfColor)">
            <summary>
            Contructs a paginable text element that will be rendered in the specified rectangle using the specified width, height, system font and color. 
            
            The Unicode text is supported only for embedded true type fonts. A font can be embedded in the generated PDF document
            if the EmbedSysFont property was set on true.
            
            If the text pagination is not allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is false ), the text will be written on current page, the rendered text height 
            being given by the minimum between the specified height and the available height on page. The remaining text
            and the text bounds inside the current page are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added 
            to a renderer.
            
            If the text pagination is allowed ( <see cref="P:EvoPdf.TextElement.Paginate"/> property is true ) and the text needs pagination (the specified height is bigger 
            than the available space on page), the height parameter will be ignored and the text will be rendered to the end using the necessary
            height. The text bounds inside the last page and the last page index are returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when 
            the element is added to a renderer. 
            
            If the text pagination is allowed but the text does not need pagination (the specified height is less than the available space on page),
            the rendered text will be truncated to fit the specified height. The text bounds inside the current page and the last page index are 
            returned in the <see cref="T:EvoPdf.AddTextElementResult"/> object when the element is added to a renderer.
            </summary>
            <param name="x">The start x coordinate where the text will be rendered</param>
            <param name="y">The start y coordinate where the text </param>
            <param name="width">The width of the destination rectangle</param>
            <param name="height">The height of the destination rectangle</param>
            <param name="text">The text to be rendered</param>
            <param name="font">The text font as a System.Drawing.Font object.</param>
            <param name="textColor">The text color</param>
        </member>
        <member name="M:EvoPdf.TextElement.Render(EvoPdf.ElementsRenderer)">
            <summary>
            Renders the text using the specified renderer. The renderer can be a page or a template.
            </summary>
            <param name="renderer">The renderer to render this text element</param>
            <returns>The </returns>
        </member>
        <member name="P:EvoPdf.TextElement.TextAlign">
            <summary>
            Gets or sets the horizontal alignment of the text rendered by this element in PDF
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.VerticalTextAlign">
            <summary>
            Gets or sets the vertical alignment of the text rendered by this element in PDF
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.RightToLeftLanguage">
            <summary>
            Set this property true if the text is in a RTL language.
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.CharacterSpacing">
            <summary>
            Gets or sets an additional spacing between characters.
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.WordSpacing">
            <summary>
            Gets or sets an aditional spacing between words. The words separator is consider the 
            space character with code 32
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.LineSpacing">
            <summary>
            Gets or sets value that indicates the vertical distance between the baselines of adjacent lines of text.
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.TextAngle">
            <summary>
            Gets or sets an angle to control text counter-clockwise direction. The default value is 0.
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.TextRise">
            <summary>
            Gets or sets the distance to move the text baseline up or down from its default location.
            Adjustments to the baseline are useful for drawing superscripts or subscripts.
            Positive values of text rise move the baseline up and creates a superscript text. 
            Negative values of text rise move the baseline down and creates a subscript text. 
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.Text">
            <summary>
            The string to be written
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.X">
            <summary>
            The start X position of this element relative to the PDF elements container
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.Y">
            <summary>
            The start Y position of this element relative to the PDF elements container
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.Width">
            <summary>
            The width of destination rectangle in PDF where this text element will be rendered
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.Height">
            <summary>
            The height of destination rectangle in PDF where this text element will be rendered
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.TextFont">
            <summary>
            Gets or sets the font of the text rendered by this element in PDF
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.TextSysFont">
            <summary>
            Gets or sets the text font as a System.Drawing.Font object
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.EmbedSysFont">
            <summary>
            A flag indicating if the System.Drawing.Font object associated with this text element should be embedded in the generated PDF document
            </summary>
        </member>
        <member name="P:EvoPdf.TextElement.Paginate">
            <summary>
            When true the text can be paginated
            </summary>
        </member>
        <member name="T:EvoPdf.TextNoteElement">
            <summary>
            Represents a text annotation in the PDF page.
            </summary>
        </member>
        <member name="M:EvoPdf.TextNoteElement.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Constructs a text note element
            </summary>
            <param name="linkRectangle">The link rectangle in page</param>
            <param name="text">The text annontation</param>
        </member>
        <member name="P:EvoPdf.TextNoteElement.LinkRectangle">
            <summary>
            Gets or sets the text note element rectangle in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.TextNoteElement.Text">
            <summary>
            Gets or sets the annotation text
            </summary>
        </member>
        <member name="P:EvoPdf.TextNoteElement.Open">
            <summary>
            Gets or sets default annotation status. Default value is false and the annotation is closed
            </summary>
        </member>
        <member name="P:EvoPdf.TextNoteElement.NoteIcon">
            <summary>
            Gets or sets text note icon in PDF document.
            </summary>
        </member>
        <member name="T:EvoPdf.TextNoteIcon">
            <summary>
            Defines set of text annotation types.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.Note">
            <summary>
            Note.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.Comment">
            <summary>
            Comment.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.Help">
            <summary>
            Help.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.Insert">
            <summary>
            Insert.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.Key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.NewParagraph">
            <summary>
            NewParagraph.
            </summary>
        </member>
        <member name="F:EvoPdf.TextNoteIcon.Paragraph">
            <summary>
            Paragraph.
            </summary>
        </member>
        <member name="T:EvoPdf.TriggeringMode">
            <summary>
            This enumeration represents the possible modes to trigger the conversion of a HTML document
            </summary>
        </member>
        <member name="F:EvoPdf.TriggeringMode.Auto">
            <summary>
            The conversion is starts automatically after the page was loaded in converter. This is the default option
            </summary>
        </member>
        <member name="F:EvoPdf.TriggeringMode.ConversionDelay">
            <summary>
            The converter will delay the conversion after the page was loaded in converter with the amount of time given by the ConversionDelay property 
            of the HtmlToPdfConverter or HtmlToImageConverter classes
            </summary>
        </member>
        <member name="F:EvoPdf.TriggeringMode.Manual">
            <summary>
            The conversion will be triggered manually by a call from JavaScript to evoPdfConverter.startConversion() method 
            available in a HTML document loaded in converter
            </summary>
        </member>
        <member name="T:EvoPdf.UnitsConverter">
            <summary>
            Converts between various graphic units (pixels, points, etc).
            </summary>
        </member>
        <member name="M:EvoPdf.UnitsConverter.PointsToPixels(System.Single)">
            <summary>
            Converts from points to pixels. The result of this method takes into account the 
            current screen resolution.
            </summary>
            <param name="points">The value in points to convert.</param>
            <returns>The value in pixels.</returns>
        </member>
        <member name="M:EvoPdf.UnitsConverter.PixelsToPoints(System.Single)">
            <summary>
            Converts from pixels to points. The result of this method takes into account the 
            current screen resolution.
            </summary>
            <param name="pixels">The value in pixels to convert.</param>
            <returns>The value in points.</returns>
        </member>
        <member name="T:EvoPdf.LinkUrlElement">
            <summary>
            This class represents a link to an URL in a PDF document.
            </summary>
        </member>
        <member name="M:EvoPdf.LinkUrlElement.#ctor(System.Drawing.RectangleF,System.String)">
            <summary>
            Constructs a URL link element
            </summary>
            <param name="linkRectangle">The link rectangle in page</param>
            <param name="linkURL">The link destination URL</param>
        </member>
        <member name="P:EvoPdf.LinkUrlElement.LinkRectangle">
            <summary>
            Gets or sets the URL link element rectangle in PDF page
            </summary>
        </member>
        <member name="P:EvoPdf.LinkUrlElement.LinkURL">
            <summary>
            Gets or sets the link destination URL
            </summary>
        </member>
        <member name="T:EvoPdf.VerticalTextAlign">
            <summary>
            This enumeration contains the possible values of the vertical alignment of the text in PDF documents.
            </summary>
        </member>
        <member name="F:EvoPdf.VerticalTextAlign.Top">
            <summary>
            Top aligned.
            </summary>
        </member>
        <member name="F:EvoPdf.VerticalTextAlign.Middle">
            <summary>
            Center aligned.
            </summary>
        </member>
        <member name="F:EvoPdf.VerticalTextAlign.Bottom">
            <summary>
            Bottom alligned.
            </summary>
        </member>
        <member name="T:EvoPdf.ViewerFullScreenExitMode">
            <summary>
            Used in <see cref="T:EvoPdf.ViewerPreferences"/> to specify how to display the document on exiting full-screen mode
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerFullScreenExitMode.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerFullScreenExitMode.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerFullScreenExitMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerFullScreenExitMode.UseOC">
            <summary>
            Optional content group panel visible.
            </summary>
        </member>
        <member name="T:EvoPdf.ViewerPageLayout">
            <summary>
            A name object specifying the page layout to be used when the
            document is opened.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageLayout.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageLayout.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageLayout.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with odd numbered
            pages on the left.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageLayout.TwoColumnRight">
            <summary>
            Display the pages in two columns, with odd numbered
            pages on the right.
            </summary>
        </member>
        <member name="T:EvoPdf.ViewerPageMode">
            <summary>
            A name object specifying how the document should be displayed when opened.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageMode.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageMode.UseOutlines">
            <summary>
            Document outline (bookmarks) visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, window
            controls, or any other window visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageMode.UseOC">
            <summary>
            Optional content group panel visible.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerPageMode.UseAttachments">
            <summary>
            Document attachments visible.
            </summary>
        </member>
        <member name="T:EvoPdf.ViewerPreferences">
            <summary>
            Represents the viewer preferences of the PDF document generated by the HTML to PDF converter
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.HideToolbar">
            <summary>
            A flag specifying whether to hide the viewer application’s tool
            bars when the document is active when displaying the PDF document generated by the HTML to PDF converter. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.HideMenuBar">
            <summary>
            A flag specifying whether to hide the viewer application’s
            menu bar when the document is active when displaying the PDF document generated by the HTML to PDF converter. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.HideWindowUI">
            <summary>
            A flag specifying whether to hide user interface elements in
            the document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed when displaying the PDF document generated by the HTML to PDF converter. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.FitWindow">
            <summary>
            A flag specifying whether to resize the document’s window to
            fit the size of the first displayed page when displaying the PDF document generated by the HTML to PDF converter. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.CenterWindow">
            <summary>
            A flag specifying whether to position the document’s window
            in the center of the screen when displaying the PDF document generated by the HTML to PDF converter. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.DisplayDocTitle">
            <summary>
            A flag specifying whether the window’s title bar should display the document title
            taken from the title entry of the document information dictionary when displaying the PDF document generated by the HTML to PDF converter. Default value: False.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.NonFullScreenPageMode">
            <summary>
            The document’s page mode, specifying how to display the
            document on exiting full-screen mode when displaying the PDF document generated by the HTML to PDF converter. 
            This entry is meaningful only if the value of the PageMode entry in the catalog dictionary 
            is FullScreen; it is ignored otherwise. Default value: UseNone.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.Direction">
            <summary>
            The predominant reading order for text when displaying the PDF document generated by the HTML to PDF converter. Default value: L2R.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.PageMode">
            <summary>
            Specifies how the PDF document generated by the HTML to PDF converter should be displayed when opened. Default value: UseNone.
            </summary>
        </member>
        <member name="P:EvoPdf.ViewerPreferences.PageLayout">
            <summary>
            The page layout to be used when the PDF document generated by the HTML to PDF converter is opened. Default value: OneColumn.
            </summary>
        </member>
        <member name="T:EvoPdf.ViewerTextOrder">
            <summary>
            Used in <see cref="T:EvoPdf.ViewerPreferences"/> to specify the predominant reading order for text.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerTextOrder.L2R">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:EvoPdf.ViewerTextOrder.R2L">
            <summary>
            Right to left ( including vertical writing systems such as
            Chinese, Japanese, and Korean ).
            </summary>
        </member>
        <member name="M:HiQPdf.HtmlConvertProcessInternal.NavigatorCommand.NativePack(System.Int32@)">
            <summary>
            Package the command for transmission to unmanaged code
            </summary>
            <param name="packLength">Receives the native pack size</param>
            <returns>The native pack address in unmanaged memory</returns>
        </member>
    </members>
</doc>
