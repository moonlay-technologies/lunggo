using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Script.Serialization;
using Lunggo.ApCommon.Identity.Auth;
using Lunggo.ApCommon.Identity.Users;
using Lunggo.ApCommon.Payment.Constant;
using Lunggo.ApCommon.Payment.Model;
using Lunggo.Framework.Encoder;
using Lunggo.Framework.Extension;
using Lunggo.Framework.Log;
using Microsoft.WindowsAzure.Storage.Table;
using Lunggo.Framework.TableStorage;
using Lunggo.ApCommon.Log;
using Lunggo.Framework.Environment;

namespace Lunggo.ApCommon.Payment.Processor
{
    internal partial class PaymentProcessorService
    {
        internal class NicepayWrapper
        {
            internal static readonly string Endpoint = EnvVariables.Get("nicepay", "endPoint");
            internal static readonly string MerchantId = EnvVariables.Get("nicepay", "merchantId");
            internal static readonly string MerchantKey = EnvVariables.Get("nicepay", "merchantKey");

            private NicepayResponse objResult = new NicepayResponse();
            private NicepayModel objNicepay = new NicepayModel();
            private NicepayClass objNicepayClass = new NicepayClass();
            private Data objData = new Data();
            private NotificationResult objNoti = new NotificationResult();

        internal PaymentDetails ProcessPayment(PaymentDetails payment, TransactionDetails transactionDetail)
        {
            JavaScriptSerializer JsonSerializer = new JavaScriptSerializer();
            var TableLog = new GlobalLog();

            TableLog.PartitionKey = "PAYMENT LOG";

            if (payment.Method == PaymentMethod.VirtualAccount)
            {
                objNicepay.currency = "IDR";
                objNicepay.BankCd = objNicepayClass.GetBankCode(payment.Submethod);
                objNicepay.DateNow = DateTime.UtcNow.AddHours(7).ToString("yyyyMMdd");
                // Set VA expiry date +1 day (optional)
                objNicepay.vaExpDate = payment.TimeLimit?.AddHours(7).ToString("yyyyMMdd");
                //Populate Mandatory parameters to send
                // payment type Bank
                objNicepay.PayMethod = "02"; //
                                             // Total gross amount
                objNicepay.amt = payment.FinalPriceIdr.ToString("0.#####"); //

                // Invoice Number or Referenc Number Generated by merchant 
                objNicepay.referenceNo = transactionDetail.TrxId; //
                objNicepay.description = "Payment Invoice No. " + objNicepay.referenceNo; //
                                                                                          // Transaction description

                var contact = transactionDetail.Contact;

                objNicepay.billingNm = contact.Name; //
                objNicepay.billingPhone = contact.CountryCallingCode + contact.Phone; //
                objNicepay.billingEmail = contact.Email; //
                                                         //objNicepay.billingAddr = "Jalan Sisingamangaraja";
                                                         //objNicepay.billingCity = "Jakarta Selatan";
                                                         //objNicepay.billingState = "Jakarta";
                                                         //objNicepay.billingPostCd = "12110";
                                                         //objNicepay.billingCountry = "Indonesia";

                //objNicepay.deliveryNm = "Dwi Agustina";
                //objNicepay.deliveryPhone = "0811351793";
                //objNicepay.deliveryEmail = "dwi.agustina@travelmadezy.com";
                //objNicepay.deliveryAddr = "Jalan Sisingamangaraja";
                //objNicepay.deliveryCity = "Jakarta Selatan";
                //objNicepay.deliveryState = "Jakarta";
                //objNicepay.deliveryPostCd = "12110";
                //objNicepay.deliveryCountry = "Indonesia";

                objNicepay.vacctValidDt = objNicepay.vaExpDate;
                objNicepay.vacctValidTm = payment.TimeLimit?.AddHours(7).ToString("HHmmss");

                objResult = objNicepayClass.CreateVA(objNicepay);

                if (objResult.resultCd == "0000")
                {
                    payment.TransferAccount = objResult.bankVacctNo;
                    payment.Status = PaymentResult(objResult);
                    payment.ExternalId = objResult.tXid;
                }
                else if (objResult.resultCd != null)
                {
                    //API data Not correct, you can redirect back to checkout page Or echo error message.
                    //In this sample, we echo error message


                    payment.Status = PaymentStatus.Failed;
                    payment.FailureReason = FailureReason.PaymentFailure;

                    var log = LogService.GetInstance();
                    var env = EnvVariables.Get("general", "environment");
                    TableLog.Log = "```Payment Log```"
                                   + "\n`*Environment :* " + env.ToUpper()
                                   + "\n*PAYMENT DETAILS :*\n"
                                   + payment.Serialize()
                                   + "\n*TRANSAC DETAILS :*\n"
                                   + transactionDetail.Serialize()
                                   //+ "\n*ITEM DETAILS :*\n"
                                   //+ itemDetails.Serialize()
                                   + "\n*REQUEST :*\n"
                                   + JsonSerializer.Serialize(objNicepay)
                                   + "\n*RESPONSE :*\n"
                                   + JsonSerializer.Serialize(objResult)
                                   + "\n*Platform :* "
                                   + Client.GetPlatformType(HttpContext.Current.User.Identity.GetClientId());
                    log.Post(TableLog.Log,
                        env == "production" ? "#logging-prod" : "#logging-dev");
                    TableLog.Logging();
                }
                else
                {
                    //Timeout, you can redirect back to checkout page Or echo error message.
                    //In this sample, we echo error message

                    payment.Status = PaymentStatus.Failed;
                    payment.FailureReason = FailureReason.PaymentFailure;

                    var log = LogService.GetInstance();
                    var env = EnvVariables.Get("general", "environment");
                    TableLog.Log = "```Payment Log, Connection Time out to Nicepay```"
                                   + "\n`*Environment :* " + env.ToUpper()
                                   + "\n*PAYMENT DETAILS :*\n"
                                   + payment.Serialize()
                                   + "\n*TRANSAC DETAILS :*\n"
                                   + transactionDetail.Serialize()
                                   //+ "\n*ITEM DETAILS :*\n"
                                   //+ itemDetails.Serialize()
                                   + "\n*REQUEST :*\n"
                                   + JsonSerializer.Serialize(objNicepay)
                                   + "\n*RESPONSE :*\n"
                                   + JsonSerializer.Serialize(objResult)
                                   + "\n*Platform :* "
                                   + Client.GetPlatformType(HttpContext.Current.User.Identity.GetClientId());
                    log.Post(
                        TableLog.Log,
                        env == "production" ? "#logging-prod" : "#logging-dev");
                    TableLog.Logging();
                }
            }

            return payment;
        }

        private PaymentStatus PaymentResult(NicepayResponse response)
        {
            var paymentStatusResponse = objNicepayClass.ChargcheckPaymentStatuseCard(response.tXid,
                response.referenceNo, response.amount);
            if (paymentStatusResponse.resultCd == "0000")
            {
                switch (paymentStatusResponse.status)
                {
                    case "0":
                        return PaymentStatus.Settled; //Paid
                    case "1":
                        return PaymentStatus.Challenged; //Reversal
                    case "2":
                        return PaymentStatus.Challenged; // Refund
                    case "3": // Unpaid/Expired
                        return paymentStatusResponse.resultMsg.ToLower().Contains("unpaid")
                            ? PaymentStatus.Pending
                            : PaymentStatus.Expired;
                    case "4":
                        return PaymentStatus.Cancelled; //Cancelled
                    case "9":
                        return PaymentStatus.Pending; //Initialization
                    default:
                        return PaymentStatus.Failed;
                }
            }
            else
                return PaymentStatus.Pending;

        }
    }


}

}